---
title: "第14回講義資料"
subtitle: "可視化 (3)"
toc: true
link-external-icon: true
link-external-newwindow: true
---

## スライド

<a href="../slide/slide14.html" class="btn btn-primary btn-sm" target="_blank" role="button"><i class="bi bi-window"></i> 新しいタブで開く</a>

```{=html}
<iframe class="slide-deck" src="../slide/slide14.html" width="100%" style="aspect-ratio: 16 / 9.2;"></iframe>
```

```{r}
#| include: false
library(tidyverse)
knitr::opts_chunk$set(dev       = "ragg_png",
                      dpi       = 300,
                      fig.align = "center",
                      echo      = TRUE,
                      warning   = FALSE)
df <- read_csv("Data/Micro09.csv")
```

## 散布図

### 散布図の作成

散布図は2つの連続変数（=間隔尺度、比率尺度で測定された変数）間の関係を調べる代表的な可視化方法である。散布図を作成する際に必要な**最低限**の情報、つまり散布図の必須要素は何だろうか。例えば、 @fig-scatter-example の例を考えてみよう。この散布図はフリーダムハウスのスコアと人間開発指数の関係を表す散布図である。それぞれの点は一つの観察（国）を意味する。散布図は2次元平面上に複数の点を載せたものであるが、それぞれの点はどのような情報を含んでいるのか。それは、その国のフリーダムハウス・スコアと人間開発指数であり、それぞれ横軸の上の位置と縦軸上の位置から、その情報が読み取れる。

```{r fig-scatter-example}
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| warning: false
#| out-width: "500px"
#| fig-cap: "2次元散布図の例"
df %>%
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018)) +
   labs(x = "フリーダムハウス・スコア", y = "人間開発指数 (2018)") +
   theme_gray(base_family = "HiraKakuProN-W3",
              base_size   = 14)
```

　それでは @fig-scatter-example を作ってみよう。使用するデータは第9回実習用データ（`Micro09.csv`）である。

```{r}
#| eval: false
library(tidyverse)
df <- read_csv("Data/Micro08.csv")
```

　散布図を作成するためには`geom_point()`幾何オブジェクトを使用する。点の横軸上の位置は`x`に、縦軸上の位置は`y`にマッピングする。もし2つの変数の間に原因と結果の関係（因果関係）が考えられる2変数の場合、**原因を横軸**、**結果を縦軸**にするのが通例である。

```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
#| out-width: "800px"
df %>%
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018))
```

　しかし、横軸と縦軸のタイトルがFH_Total、HDI_2018になっている。図を作った人から見れば、これが何を意味するのか分かるだろうが、この図を初めて見る人にとっては何を意味するのかが分からないだろう。したがって、ラベル修正を修正し、せっかくなので点の色をおしゃれなロイヤルブルー（royal blue）にしてみよう。

```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
#| out-width: "800px"
df %>%
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018), color = "royalblue") +
   labs(x = "フリーダムハウス・スコア", y = "人間開発指数 (2018)")
```

### 次元の追加

　通常の散布図、例えば先ほど作成した散布図には、それぞれの点は各国の (1) フリーダムハウス・スコアと (2) 人間開発指数といった2つの情報を持つ。つまり、通常の散布図は2次元である。しかし、散布図は5次元、7次元までにも拡張することができる。たとえば、大陸ごとに色分けをすることによってもう一つの情報を持たせることも可能だし、人口や所得に応じて点の大きさを変えることも可能だろう。また、定番のファセット分割もできる。他にも点の枠線、点の形、透明度などに何かの情報を持たせることも可能である。

　このように高次元の散布図を作ることはできる。ただし、宋は3次元までを推奨する（ファセット分割まで入れる場合、4次元）。なぜなら、一つのグラフの情報が多すぎると読みにくくなるからである。 @fig-5d-scatter は5次元散布図の例である。各点はフリーダムハウス・スコア、人間開発指数、人口（対数変換）、大陸、OECD加盟有無の情報を持つ。

```{r fig-5d-scatter}
#| fig-width: 10
#| fig-height: 4
#| warning: false
#| out-width: "1000px"
#| fig-cap: "5次元散布図の例"
df %>%
   mutate(OECD = if_else(OECD == 1, "Member", "Non-member")) %>%
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018, color = Continent,
                  size = Population, shape = OECD), alpha = 0.65) +
   scale_size_continuous(trans = "log10") +
   labs(x = "Freedom House Score", y = "Human Development Index (2018)",
        size = "Population (log)")
```

　2次元散布図にもう一つの次元を追加、つまり3次元散布図を作成する場合は色分け（`color`）を推奨するが、白黒の図を作成する場合は形（`shape`）を使う必要がある。まずは色分けから説明しよう。色分けをする場合は、`aes()`の内部に`color = 色分けする変数`を指定する。

　たとえば、一人上がり購買力平価GDP（`PPP_per_capita`）が2万ドル以上か未満かで点の色分けをするとしよう。まず、`PPP_per_capita`が2万以上なら`"高"`、未満なら`"低"`にリコーディングした`HighIncome`変数を作成する。つづいて、この`HighIncome`変数を利用し、点の色分けを行う（`color = HighIncome`）

　他のカスタマイズとしては作図する側の自由であるが、ここでは点の大きさは2にし（全体に適用させるため、`aes()`の外側に指定）、`labs()`内で凡例タイトルを修正し、凡例を下側へ移動してみる。作成した図は`scatter_plot1`という名のオブジェクトとして格納しておく。

```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
#| out-width: "800px"
scatter_plot1 <- df %>%
   # 散布図に使われる変数が一つでも欠損していれば、その行（国）は除外する
   drop_na(FH_Total, HDI_2018, PPP_per_capita) %>%
   # リコーディング
   mutate(HighIncome = if_else(PPP_per_capita >= 20000, "高", "低")) %>%
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018, color = HighIncome), 
              size = 2) +
   # ラベル修正
   labs(x = "フリーダムハウス・スコア", y = "人間開発指数 (2018)",
        color = "一人当たりPPP GDP") +
   # 凡例を下側に
   theme(legend.position = "bottom")

scatter_plot1
```

　もし、点の色を変更したい場合は`scale_color_manual()`レイヤーを追加する。引数は`values`であり、`c("値1" = "色1", "値2" = "色2", ...)`のように名前付きcharacter型ベクトルを指定する。たとえば、`HighIncome`の値が`"低"`ならオレンジ色（`"orange"`）、`"高"`ならロイヤルブルー色（`"royalblue"`）にしてみよう。

```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
#| out-width: "800px"
scatter_plot1 +
   scale_color_manual(values = c("低" = "orange", "高" = "royalblue"))
```

　{ggplot2}で使える色は無数にある。`"red"`、`"blue"`、`"royalblue"`のように文字で指定することもでき、全657種類が用意されている[^ggplot2-color]。他にもRGBカラー（HEXコード; 16進数）で指定することもでる。たとえば赤なら`"#FF0000"`、ロイヤルブルーなら`"#4169E1"`と表記する。HEXコードを使う場合、非常に細かく色を指定することができ、全16,777,216種類の色が使える。以下の例はRで使える色の**一部**である。

[^ggplot2-color]: Googleなどで「ggplot2 color」で検索してみれば、たくさんの資料が見られる（[例](http://sape.inf.usi.ch/quick-reference/ggplot2/colour)）。

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 10
data.frame(c=colors()) %>%
   mutate(Num = grepl(x = c, pattern = "[0-9]$")) %>%
   filter(Num == FALSE) %>%
   mutate(y = seq(0, length(c) - 1) %% 18,
          x = seq(0, length(c) - 1) %/% 18) %>%
   ggplot() +
   scale_x_continuous(name="", breaks=NULL, expand=c(0, 0)) +
   scale_y_continuous(name="", breaks=NULL, expand=c(0, 0)) +
   scale_fill_identity() +
   geom_rect(aes(xmin=x, xmax=x+1, ymin=y, ymax=y+1), fill="white") +
   geom_rect(aes(xmin=x+0.05, xmax=x+0.95, ymin=y+0.5, ymax=y+1, fill=c)) +
   geom_text(aes(x=x+0.5, y=y+0.5, label=c), colour="black", hjust=0.5, vjust=1, size=4)
```

　Rで使用可能な色のリストはコンソール上で`colors()`を打ち込むと確認できる。

```{r}
colors()
```

　図を白黒で印刷する場合、色によっては区別がつかない可能性がある。この場合、点の形を修正すれば、白黒でも識別できるだろう。点の形は`aes()`内に`shape`で指定することができる。たとえば、`scatter_plot1`と同じ図を、今回は色分けせず形分けをしてみよう。

```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
#| out-width: "800px"
scatter_plot2 <- df %>%
   drop_na(FH_Total, HDI_2018, PPP_per_capita) %>%
   mutate(HighIncome = if_else(PPP_per_capita >= 20000, "高", "低")) %>%
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018, shape = HighIncome), 
              size = 2) +
   labs(x = "フリーダムハウス・スコア", y = "人間開発指数 (2018)",
        color = "一人当たりPPP GDP") +
   theme(legend.position = "bottom")

scatter_plot2
```

　点の形を自分で調整したい場合は`scale_shape_manual()`を使用する。使い方は`scale_color_manual()`と同じであるが、色は`"red"`や`"blue"`など、人間が分かる名前になっているに対し、形は1、2、3などの数値を使う。たとえば、4はバツ記号、1は中身が空っぽの丸である。

```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
#| out-width: "800px"
scatter_plot2 +
   scale_shape_manual(values = c("低" = 4, "高" = 1))
```

　Rで使えるデフォルトの`shape`は全23種類があり（0から22まで）、デフォルトは19である。0〜14の場合、中身が透明であり、枠線のみの形である。枠線の色を変えたい場合は`color`引数で調整できる。また15から20までは中身が埋まっており、枠線のない形である。この中身の色も`color`で調整可能である。注意が必要なのは21番と22番であり、21と22の場合、枠線は`color`、内側の色塗りは`fill`で調整する必要がある。

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 2.8
tibble(x = rep(1:5, 5),
       y = rep(1:5, each = 5)) %>%
   filter(!(y == 1 & x >= 4)) %>%
   arrange(desc(y), x) %>%
   mutate(pch = as.character(0:22)) %>%
   ggplot(aes(x = x, y = y)) +
   geom_point(aes(shape = pch), 
              color = "black", bg = "gray", size = 3) +
   geom_text(aes(y = y + 0.25, label = pch), size = 5) +
   scale_shape_manual(values = c("1"  =  1,  "2" =  2, "3"  =  3, "4"  =  4,
                                 "5"  =  5,  "6" =  6, "7"  =  7, "8"  =  8,
                                 "9"  =  5, "10" = 10, "11" = 11, "12" = 12,
                                 "13" = 13, "14" = 14, "15" = 15, "16" = 16,
                                 "17" = 17, "18" = 18, "19" = 19, "20" = 20,
                                 "21" = 21, "22" = 22, "0"  = 0)) +
   theme_minimal() +
   theme(panel.grid.minor = element_blank(),
         axis.line = element_blank(),
         axis.title = element_blank(),
         axis.text = element_blank(),
         legend.position = "none")
```

## 折れ線グラフ

### 折れ線グラフの作成

折れ線グラフの必須要素

折れ線グラフを作成する際に必要な**最低限**の情報

データに日と新規感染者数の**列**が必要

* `x`: 線の傾きが変化し得る点の横軸上の位置
   * 日
* `y`: 線の傾きが変化し得る点の縦軸上の位置
   * 100万人当たり新規感染者数
* 散布図とほぼ同じ
* ただし、線が2つ以上の場合`groups`が必要
   * 点をグループ化しないと、どの点を繋げば良いかが分からないため

```{r}
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| warning: false
#| out-width: "500px"
COVID_df <- read_csv("Data/Micro14.csv")
COVID_df %>%
   ggplot(aes(x = Day, y = NewCases)) +
   geom_line(aes(group = Country)) +
   geom_point(size = 3) +
   labs(x = "日 (2021年6月)", y = "100万人当たり新規感染者数 (人)") +
   theme_bw(base_size   = 14)
```

データの用意

授業サポートページから実習用データ（`Micro14.csv`）をダウンロード

* 整然データとして加工済み
* `Day`: 日付（2021年6月）; `NewCases`: 100万人当りCOVID-19新規感染者数

```{r, message = FALSE}
COVID_df <- read_csv("Data/Micro14.csv")
COVID_df
```

線が一本の場合

`geom_line()`幾何オブジェクトを使用

* `x`: 点の傾きが変化し得る点の横軸上の位置
* `y`: 点の傾きが変化し得る点の縦軸上の位置
* 日本の行のみを抽出し、横軸を日、縦軸を100万人当たり新規感染者数とした折れ線グラフを作成

```{r}
#| fig-width: 5
#| fig-height: 5
#| out-width: "500px"
COVID_df %>%
   filter(Country == "Japan") %>%
   ggplot() +
   geom_line(aes(x = Day, y = NewCases)) +
   labs(x = "日 (2021年6月)", y = "100万人当たり新規感染者数 (人)")
```

線が二本以上の場合

`group`に線のグループ変数を指定

* 国別の折れ線グラフの場合、国変数を指定

```{r}
#| fig-width: 5
#| fig-height: 5
#| out-width: "500px"
COVID_df <- COVID_df %>%
   mutate(Country = case_when(Country == "Japan" ~ "日本",
                              Country == "Korea" ~ "韓国",
                              TRUE               ~ "台湾"),
          Country = factor(Country, levels = c("日本", "韓国", "台湾")))

COVID_df %>%
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country)) +
   labs(x = "日 (2021年6月)", y = "100万人当たり新規感染者数 (人)")
```

線が二本以上の場合

`color`で色分け: 国別の折れ線グラフの場合、国変数を指定

* 線をやや太め（1.5）にする
   * `size`: 全線に適用させるために`aes()`の外側に
   * 線が細すぎると色が区別しにくい

```{r}
#| fig-width: 7
#| fig-height: 5
#| out-width: "700px"
COVID_df %>%
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country, color = Country), 
             size = 1.5) +
   labs(x = "日 (2021年6月)", y = "100万人当たり新規感染者数 (人)", 
        color = "国")
```

### 次元の追加

多くの折れ線グラフは既に3次元

* 日（`x`）、新規感染者数（`y`）、国（`group` or `color`）
* これ以上次元を増やすならファセット分割で対応するのが賢明
* ファセット分割せずに次元を増やすなら...
   * `size`: 線の太さ
   * `linetype`: 線のタイプ（1 = 実線、2 = 破線、4 = 点線、...）
      * 白黒図の場合、`color`でなく、`linetype`
   * `alpha`: 透明度

線のタイプ

* 主に白黒図で使用

```{r}
#| fig-width: 8
#| fig-height: 3.5
COVID_df %>%
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country, 
                 linetype = Country), size = 1) +
   labs(x = "日 (2021年6月)", y = "100万人当たり新規感染者数 (人)", 
        linetype = "国") 
```

自分で線のタイプを指定したい場合は`scale_linetype_manual()`レイヤーを追加し、`values`引数にそれぞれの線のタイプを指定する。

```{r}
#| eval: false
データ %>%
  ggplot() +
  ... +
  scale_linetype_manual(values = c("日本" = 1, "韓国" = 2, "台湾" = 4))
```

`linetype`の見本

種類が多くなると区別しにくいため、最大3つ程度

* 1, (2 or 3), (4 or 10）
   * 2と3、または4と10ど同時に使うと、区別することが難しい。
* 一つ面に登場する線は3〜4本程度まで（色分けも同様）

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3
tibble(x = rep(1, 10),
       xend = rep(5, 10),
       y = 1:10,
       yend = 1:10,
       type = c("10", "9", "8", "7", "6", "5", "4", "3", "2", "1")) %>%
   ggplot() +
   geom_segment(aes(x = x, xend = xend, 
                    y = y, yend = yend, linetype = type)) +
   scale_y_continuous(breaks = 1:10, labels = 10:1) +
   labs(y = "linetypeの値") +
   theme_minimal(base_size = 14,
                 base_family = "HiraKakuProN-W3") +
   theme(panel.grid = element_blank(),
         axis.title.x = element_blank(),
         axis.text.x = element_blank(),
         legend.position = "none")
```

### 折れ線グラフ + 散布図

`geom_point()`と`geom_line()`を重ねる

* 後（先）に書いたレイヤーが前面（背面）に
* 傾きの変化が激しくない場合に有効
* 点は線より大きめに
* 白黒印刷に備え、点の形分けも可能

```{r}
#| fig-width: 8
#| fig-height: 4
COVID_df %>%
   ggplot(aes(x = Day, y = NewCases, color = Country)) +
   geom_point(aes(shape = Country), size = 3) +
   geom_line(aes(group = Country), size = 1) +
   labs(x = "日 (2021年6月)", y = "100万人当たり新規感染者数 (人)", 
        color = "国", shape = "国") +
   theme_bw()
```

## 箱ひげ図

### 箱ひげ図の作成

変数の分布を示す方法の一つ

* 最小値、最大値
   * ひげの両端
* 第一四分位数、第三四分位数
   * 箱の上限と下限
* 中央値（第二四分位数）
   * 箱内の線
* 外れ値がある場合、点

変数の分布を**グループごと**に見る時に有効

```{r}
#| echo: false
#| fig-width: 4
#| fig-height: 4
#| warning: false
#| out-width: "500px"
df %>%
   ggplot() +
   geom_boxplot(aes(x = 1, y = HDI_2018), width = 0.5) +
   annotate("text", x = 1.3, y = 0.7325, label = "中央値", hjust = 0) +
   annotate("text", x = 1.3, y = 0.5870, label = "第一四分位数", hjust = 0) +
   annotate("text", x = 1.3, y = 0.8347, label = "第三四分位数", hjust = 0) +
   annotate("text", x = 1.05, y = 0.3770, label = "最小値", hjust = 0) +
   annotate("text", x = 1.05, y = 0.9540, label = "最大値", hjust = 0) +
   labs(x = "", y = "人間開発指数 (2018)") +
   coord_cartesian(xlim = c(0.75, 1.5)) +
   theme_minimal() +
   theme(axis.text.x = element_blank())
```

人間開発指数 (`HDI_2018`) の箱ひげ図

* `x`、または`y`に分布を確認した変数をマッピングする
   * `x`にマッピングするか、`y`にするかによって箱の向きが変わる

```{r}
#| fig-width: 5
#| fig-height: 4.2
#| out-width: "500px"
df %>%
   ggplot() +
   geom_boxplot(aes(y = HDI_2018)) +
   labs(x = "", y = "人間開発指数 (2018)") +
   theme_bw()
```

### 次元の追加

`y`にしかマッピングされているため、まだ次元追加の余地が残っている

* `x`にマッピング（大陸ごとの`HDI_2018`の箱ひげ図）
* 更に次元を追加したい場合は、ファセット分割

```{r}
#| fig-width: 8
#| fig-height: 3
df %>%
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent)) +
   labs(x = "大陸", y = "人間開発指数 (2018)") +
   theme_bw()
```

カスタマイズ（色）

箱の色を変える

* すべての色を変える場合、`aes()`の**外側**に`fill`
* 箱ごとにの色を変える場合、`aes()`の内側に`fill`

```{r}
#| fig-width: 8
#| fig-height: 3
df %>%
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent), fill = "cornsilk") +
   labs(x = "大陸", y = "人間開発指数 (2018)") +
   theme_bw()
```

```{r}
#| fig-width: 8
#| fig-height: 3
df %>%
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent, fill = Continent)) +
   labs(x = "大陸", y = "人間開発指数 (2018)") +
   theme_bw() +
   theme(legend.position = "none")
```

カスタマイズ（箱の幅）

* `aes()`の**外側**に`width`を指定

```{r}
#| fig-width: 8
#| fig-height: 3.25
df %>%
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent), width = 0.5) +
   labs(x = "大陸", y = "人間開発指数 (2018)") +
   theme_bw() +
   theme(legend.position = "none")
```

横軸と縦軸の交換

箱が多すぎて読みにくい場合、`x`と`y`を交換も良い

```{r}
#| fig-width: 8
#| fig-height: 3.25
df %>%
   ggplot() +
   geom_boxplot(aes(x = HDI_2018, y = Continent)) +
   labs(x = "人間開発指数 (2018)", y = "大陸") +
   theme_bw(base_size = 14) +
   theme(legend.position = "none")
```

もし、縦軸の順番を反転するなら、`scale_y_discrete(limits = rev)`レイヤーを追加する。

```{r}
#| fig-width: 8
#| fig-height: 3.25
df %>%
   ggplot() +
   geom_boxplot(aes(x = HDI_2018, y = Continent)) +
   labs(x = "人間開発指数 (2018)", y = "大陸") +
   scale_y_discrete(limits = rev) +
   theme_bw(base_size = 14) +
   theme(legend.position = "none")
```

## 教科書

* 散布図の作成: [教科書第18.6章](https://www.jaysong.net/RBook/visualization2.html#visual2-scatter)
* 折れ線グラフの作成: [教科書第18.7章](https://www.jaysong.net/RBook/visualization2.html#visual2-line)
* 箱ひげ図: [教科書第18.5章](https://www.jaysong.net/RBook/visualization2.html#visual2-box)
* グラフのカスタマイズ: [教科書第19章](https://www.jaysong.net/RBook/visualization3.html)
* その他のグラフ: [教科書第20章](https://www.jaysong.net/RBook/visualization4.html)
* その他のグラフ: [The R Graph Gallery](https://www.r-graph-gallery.com/)
