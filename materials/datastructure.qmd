---
title: "第8回講義資料"
subtitle: "データ構造"
toc: true
---

## スライド

```{r}
#| include: false
knitr::opts_chunk$set(dev       = "ragg_png",
                      dpi       = 300,
                      fig.align = "center",
                      echo      = TRUE)
```

<a href="../slide/slide08.html" class="btn btn-primary btn-sm" target="_blank" role="button"><i class="bi bi-window"></i> 新しいタブで開く</a>

```{=html}
<iframe class="slide-deck" src="../slide/slide08.html" width="100%" style="aspect-ratio: 16 / 9.2;"></iframe>
```

## データ構造とは

　Rにおけるデータの最小単位はベクトルである[^atomic]。そして、これらのベクトルが集合として行列や表などが出来上がる。ベクトルの集合の在り方をRでは**データ構造 (data structure)**と呼ぶ。

[^atomic]: `"Cat"`や`5`も長さ1のベクトルであり、原子ベクトル (atomic vector) とも呼ばれ、中でもnumeric型の長さ1のベクトルはスカラー (scalar) とも呼ばれる。

　たとえば、同じ長さのnumeric型（数値型）、またはcomplex型（複素数型）の縦ベクトルが横に並んでいる構造（@fig-structure-intro-matrix）をRではmatrix構造（行列構造）と呼ぶ。Matrix構造の場合「同じ長さ、かつnumeric/complex型の縦ベクトル」の集合と言えよう。データ型の制約のない「同じ長さの縦ベクトル」の集合はRでdata.frame構造（データフレーム構造）と呼ばれる。また、data.frame構造は各列には名前が付くといった特徴がある。

:::: {.columns}

::: {.column width="47.5%"}
```{r}
#| label: fig-structure-intro-matrix
#| echo: false
#| out-width: "400px"
#| fig-cap: "行列構造の例"
knitr::include_graphics("Figs/08/matrix1.png")
```
:::

::: {.column width="5%"}
:::

::: {.column width="47.5%"}
```{r}
#| label: fig-structure-intro-df
#| echo: false
#| out-width: "600px"
#| fig-cap: "データフレーム構造の例"
knitr::include_graphics("Figs/08/df.png")
```
:::

::::

　本講義で使うデータ構造は主にベクトル (vector) とデータ・フレーム (data.frame) とその拡張版のティブル (tibble) のみであるため、行列 (matrix) 、配列 (array) 、リスト (array) の説明は割愛する。

---

## ベクトル

　ベクトル構造は**同じデータ型が一つ以上**格納されているオブジェクトであり、これまで何回も登場したデータ構造である。ベクトルはRにおけるデータの最小単位である。Rには数百、数千種類のデータ構造が存在するが、これら全てのデータ構造の最小単位はベクトルである。

```{r}
my_vec1 <- "R is fun!" # 長さ1のcharacter型ベクトル
my_vec1
my_vec2 <- c(1, 3, 5, 6, 7) # 長さ5のnumeric型ベクトル
my_vec2
```

　ベクトルを作成する際、注意しないといけないことは**一つのベクトル内の全ての要素は同じデータ型**である点である。もし、複数のデータ型が混在している場合、優先順位の高いデータ型へ強制的に変換される。頻繁に使われるデータ型の場合、優先順位はcharacter型 > numeric型 > logical型であり、character型の優先順位が最も高い。

　たとえば、character型とnumeric型の要素が混在したベクトルを考えてみよう。`my_vec3`は長さ6のベクトルであるが、2つのデータ型が混在しているため、character型が優先される。

```{r}
my_vec3 <- c("A", "B", "C", 1, 2, 3)
my_vec3
class(my_vec3)
```

　Numeric型とlogical型が混在している場合、logical型の要素はnumeric型へ変換される。変換される際、`TRUE`は1、`FALSE`は0に変換される。

```{r}
my_vec4 <- c(10, 20, TRUE, FALSE)
my_vec4
class(my_vec4)
```

　Character型とlogical型が混在している場合、logical型の要素はcharacter型へ変換される。変換される際、`TRUE`は`"TRUE"`、`FALSE`は`"FALSE"`に変換される。

```{r}
my_vec5 <- c("Miyakura", "Seki", TRUE, FALSE)
my_vec5
class(my_vec5)
```

　その他、ベクトルの操作（演算、要素の抽出など）についてはこれまでの講義資料を参照すること。

---

## 行列

　行列構造とはnumeric型、またはcomplex型の縦ベクトルを横に並べたデータ構造である。以下の`my_mat1`は3行4列（3 $\times$ 4）の行列である。

```{r}
my_mat1 <- matrix(1:12, nrow = 3)
my_mat1
```

　この`my_mat1`は長さ3のnumeric型**縦**ベクトルが4つ並んでいる。4つの縦ベクトルとは`c(1, 2, 3)`、`c(4, 5, 6)`、`c(7, 8, 9)`、`c(10, 11, 12)`である。他にも長さ4のnumeric型**横**ベクトルが3つ（`c(1, 4, 7, 10)`、`c(2, 5, 8, 11)`、`c(3, 6, 9, 12)`）積まれているとも読めるが、データ分析では一般的に縦ベクトルの集合として行列を捉える。

### 行列の作成

　行列を作成する際は`matrix()`関数を使用する。第1引数としてnumericまたはcomplex型ベクトル、`nrow`引数で行列の行数を指定する。たとえば、以下のような行列を作成し、`my_mat2`という名のオブジェクトとして作業環境内に格納するとしよう。

$$
\begin{bmatrix}
5 & 2 & 9 & 6 \\
5 & 4 & -8 & 2 \\
-3 & 3 & 0 & 7
\end{bmatrix}
$$

```{r}
my_mat2 <- matrix(c(5, 5, -3, 2, 4, 3, 9, -8, 0, 6, 2, 7), nrow = 3)
my_mat2
```

　第1引数はベクトルはベクトル構造のオブジェクトであるため、予めベクトルを作成し、ベクトル名を入れることも可能である。

```{r}
my_vec6 <- c(5, 5, -3, 2, 4, 3, 9, -8, 0, 6, 2, 7)
my_mat3 <- matrix(my_vec6, nrow = 3)
my_mat3
```

　ここで注意すべき点は要素が入る順番である。我々は通常「左から右へ」、「上から下へ」文字列を読むが、行列はその逆、つまり「上から下へ」、「左から右へ」の順番となる（@fig-structure-matrix-order）。行列が「**縦**ベクトルの集合」ということを意識すれば、予め混乱は避けられるだろう。

```{r}
#| label: fig-structure-matrix-order
#| echo: false
#| out-width: "400px"
#| fig-cap: "行列の要素の順番"
knitr::include_graphics("Figs/08/matrix2.png")
```

### 行列の操作

　行列構造のデータは本講義では使用しないため、説明は割愛し、ここでは行列の確認と要素の抽出するコードのみ紹介する。

```{r}
class(my_mat1) # my_mat1のデータ構造
dim(my_mat1)   # 行列の行数と列数
nrow(my_mat1)  # 行列の行数
ncol(my_mat1)  # 行列の列数
my_mat1[1, ]   # my_matの1「行」目を抽出
my_mat1[, 3]   # my_matの3「列」目を抽出
my_mat1[2, 4]  # my_matの2「行」、4「列」目を抽出
```

### 行列の演算

　行列構造のデータは本講義では使用しないため、説明は割愛するが、これらは線形代数を勉強する人には便利な演算子である。

| 演算子/関数               | 説明                                  |
| :------------------------ | :------------------------------------ |
| `+`                       | 行列の足し算                          |
| `-`                       | 行列の引き算                          |
| `%*%`                     | 行列の掛け算                          |
| `/`                       | 行列の割り算                          |
| `*`                       | 行列のアダマール積 (Hadamard product) |
| `t(オブジェクト名)`       | 行列の転置                            |
| `qr(オブジェクト名)$rank` | 行列の階数                            |
| `solve(オブジェクト名)`   | 逆行列                                |
| `eigen(オブジェクト名)`   | 行列の固有値                          |

　`solve()`と`eigen()`は正方行列 ($n \times n$の行列)でないと使えないことに注意しよう。

### 配列

　行列と似たようなデータ構造として、配列（array）構造がある。これは**同じ大きさ行列**を重ねたものであり（@fig-structure-matrix-array）、行列は層 (layer) が1つのみの配列である。つまり、行列構造は配列構造の一種であり、実際、`class()`で行列構造のデータ構造を確認すると`"matrix"`だけでなく、`"array"`も同時に出力される。2次元である行列を重ねたものであるため、配列構造は3次元のデータ構造であり、要素抽出の際、`[x, y, z]`で指定する必要がある（3番目の`z`が配列の層 (layer)を意味する）。

```{r}
#| label: fig-structure-matrix-array
#| echo: false
#| out-width: "500px"
#| fig-cap: "配列構造のイメージ"
knitr::include_graphics("Figs/08/array.png")
```

---

## データ・フレーム

　データ・フレーム構造（data.frame）は行列構造と同様、縦ベクトルを横に並べたものである。しかし、以下の2点が異なる。

1. データ・フレーム構造の場合、すべてのベクトルが同じデータ型である必要がない。
   * @fig-structure-df-image の場合、character型（1列目）とnumeric型（2、3、4列目）ベクトルが混在している。
2. データ・フレーム構造の場合、各列に名前が付いている。
   * @fig-structure-df-image の場合、Name、Foundation、Students、Facultiesが列名である。

```{r}
#| label: fig-structure-df-image
#| echo: false
#| out-width: "500px"
#| fig-cap: "データフレーム構造の構造のイメージ"
knitr::include_graphics("Figs/08/df.png")
```

　データ・フレーム構造は我々が頻繁に接する**表形式データ**、そのものである。前期・後期の講義全体を通じて最も頻繁に扱うこととなるデータ構造であるため、非常に重要なデータ構造である。詳しい操作方法は次回以降（データ・ハンドリング）の講義で解説するが、ここでは作成方法、確認方法、簡単な抽出方法について解説する。

### データ・フレームの作成

　データ・フレームを作成する方法は大きく分けて2通りある。小さい表であれば（1）自分で作成することも可能だが、ある程度の規模のあるデータならダウンロードしたデータや表計算ソフト（Excel、Numbers、LibreOffice Calcなど）で作成した表を（2）読み込むこともできる。

　まずは、直接データ・フレームを作成する方法から紹介する。データ・フレームの作成には`data.frame()`、または`tibble()`関数を使用する。`data.frame()`はR内蔵関数であるが、`tibble()`関数は使用する前に予め{tidyverse}パッケージを読み込んでおく必要がある。`data.frame()`と`tibble()`は厳密には異なるデータ構造であるが、`tibble()`で作成した表がより汎用性が高いため、ここでは`tibble()`関数を使用したデータ・フレームの作成する方法を紹介する。

　まず、{tidyverse}パッケージを読み込む。

```{r}
#| message: false
library(tidyverse)
```

　ここでは以下のような表を作成する。

```{r}
#| echo: false
#| message: false
library(gt)
my_df1 <- tibble(Name       = c("Kansai", "Kangaku", "Doshisha", "Ritsumeikan"),
                 Foundation = c(1886, 1889, 1875, 1900),
                 Students   = c(27736, 23671, 25974, 32467))

gt(my_df1)
```

　この表は3つの縦ベクトルの集合であり、それぞれの名前は`Name`、`Foundation`、`Students`である。`tibble()`関数内に`列名 = 縦ベクトル`を入れるだけである。作成したデータ・フレームを`my_df1`という名のオブジェクトとして格納し、その中身を確認してみよう。

```{r}
my_df1 <- tibble(Name       = c("Kansai", "Kangaku", "Doshisha", "Ritsumeikan"),
                 Foundation = c(1886, 1889, 1875, 1900),
                 Students   = c(27736, 23671, 25974, 32467))

my_df1
```

　データ・フレーム構造はベクトルの集合であるため、ベクトルから作成することも出来る。以下のような表を作成するとする。

```{r}
#| echo: false
#| message: false
Name <- c("Tokyo", "Nagoya", "Osaka", "Fukuoka")
Food <- c("Monja", "Tebasaki", "Takoyaki", "Ramen")
Pop  <- c(1396, 755, 882, 511)
Area <- c(2194, 5173, 1899, 4987)

my_df2 <- tibble(Name, Pop, Area, Food)

gt(my_df2)
```

　今回はそれぞれの列に外とするベクトルを予め作成し、そのベクトルを`tibble()`関数の引数として使用する。作成したオブジェクトは`my_df2`と名付けよう。

```{r}
Name <- c("Tokyo", "Nagoya", "Osaka", "Fukuoka")
Food <- c("Monja", "Tebasaki", "Takoyaki", "Ramen")
Pop  <- c(1396, 755, 882, 511)
Area <- c(2194, 5173, 1899, 4987)

my_df2 <- tibble(Name, Pop, Area, Food)

my_df2
```

　以上のような数行 $\times$ 数列の表なら手打ちで作成することもできるが、数百〜数万人のデータなどを手打ちで作成することはほぼ不可能であろう。この場合、予め表計算ソフトを使って表を作成しておくか、既に公開されている表形式データを使うこととなる。別途のファイルとして保存されている表形式ファイル（`.csv`ファイル）の読み込みには`read_csv()`関数を使う[^read-file]。`read_csv()`は{tidyverse}パッケージを読み込んでおかないと使えないため、予め読んでおこう。今回は既に読み込み済みであるため不要である。

[^read-file]: Excleで作成されたファイル（`.xlsx`、または`.xls`）の場合、{readxl}パッケージの`read_excle()`関数を使用する。Stataファイル（`.dta`）は{haven}パッケージの`read_dta()`を使う。

　第6回の講義で作成したデータ（`BuildingData.csv`）がプロジェクト・フォルダー内の`Data`フォルダー内に保存されている場合、以下のように読み込む。読み込んだデータを使うためには作業環境内にオブジェクトとして格納しておく必要があり、今回は`my_df3`と名付ける。

```{r}
#| message: false
my_df3 <- read_csv("Data/BuildingData.csv") # 第6回のデータ
```

### データ・フレームの確認

　作業環境に格納されたデータ・フレームを出力する場合は`オブジェクト名`を入力する。データが画面に収まらない場合は一部の列が省略される場合があり、出力される行数はデフォルト設定では10行である。以下でも最初の10行しか出力されているが、出力画面の1行目の情報（`# A tibble: 47 × 5`）から全47行のデータであることが分かる。

```{r}
my_df3
```

　全ての行を出力するためには`print()`関数を使用し、`n = Inf`を指定する。ちなみに`n = 20`にすると、最初の20行が出力される。

```{r}
print(my_df3, n = Inf)
```

* `class()`: データ構造の確認

```{r}
class(my_df3) # my_df2のデータ構造
```

* `is.data.frame()`: データ・フレームか否かを判定

```{r}
is.data.frame(my_df3)
```

* `nrow()`: データ・フレームの行数

```{r}
nrow(my_df1) # my_df1の行数
```

* `ncol()`: データ・フレームの列数

```{r}
ncol(my_df2) # my_df2の列数
```

* `head()`: **最初**の6行のみ出力
* `tail()`: **最後**の6行を出力
   * `n = 5`を追加すると、最初 (最後) の5行を出力（任意の数字）
* `names()`: 変数名のみ出力

```{r}
head(my_df3)
```

```{r}
head(my_df3, n = 10)
```

```{r}
tail(my_df3)
```

```{r}
tail(my_df3, n = 3)
```

```{r}
names(my_df3)
```

### 行の抽出

```{r}
my_df3[27, ]
class(my_df3[27, ])
```

```{r}
my_df3[c(13, 27, 40), ]
class(my_df3[c(13, 27, 40), ])
```

### 列の抽出

```{r}
my_df3[, 2]
class(my_df3[, 2])
```

```{r}
my_df3[, c(2, 4, 5)]
class(my_df3[, c(2, 4, 5)])
```

```{r}
my_df3$Pref
```

返り値はデータ・フレームでなく、ベクトル

* データ構造がベクトルの場合、`class()`はデータ型が出力される。

```{r}
class(my_df3$Pref)
```

### 抽出方法の比較

抽出方法によって返り値のデータ構造が異なる。

* `[]`を用いた抽出は返り値がデータ・フレーム
* `$`を用いた抽出は返り値がベクトル

|コード|意味|返り値|備考|
|:---|:---|:---|:---|
|`データ・フレーム名[i, ]`|`i`番目の行を抽出|データ・フレーム|`i`は任意のベクトル|
|`データ・フレーム名[, i]`|`i`番目の列を抽出|データ・フレーム|`i`は任意のベクトル|
|`データ・フレーム名$列名`|当該列を抽出|**ベクトル**||

---

## リスト

* あらゆるデータ構造が格納できるデータ型
   * Rに存在する多くのオブジェクトはリストであるため、Rでデータを自由自在に操るためにはリストの知識が必須
   * ただし、本講義ではリストは使わない。

### 作成

```{r}
my_list <- list(Vector1 = my_vec1,
                Vector2 = my_vec4,
                Matrix  = my_mat1)
```

### 中身

```{r}
my_list
```

### 抽出

`リスト名[[i]]`の場合、リストの`i`番目要素が抽出される。

```{r}
my_list[[2]]
```

要素に名前がついてある場合、`リスト名$要素名`でも抽出可能

```{r}
my_list$Matrix
```
