---
title: "第13回講義資料"
subtitle: "可視化 (2)"
toc: true
link-external-icon: true
link-external-newwindow: true
---

## スライド

<a href="../slide/slide13.html" class="btn btn-primary btn-sm" target="_blank" role="button"><i class="bi bi-window"></i> 新しいタブで開く</a>

```{=html}
<iframe class="slide-deck" src="../slide/slide13.html" width="100%" style="aspect-ratio: 16 / 9.2;"></iframe>
```

```{r}
#| include: false
library(tidyverse)
knitr::opts_chunk$set(dev       = "ragg_png",
                      dpi       = 300,
                      fig.align = "center",
                      echo      = TRUE)
df <- read_csv("Data/Micro09.csv")
```


<!--- --->

## グラフ作成の手順

　{ggplot2}を用いた作図は以下の手順で行われる。

1. 作成したいグラフを決める
2. 作成したいグラフの完成図を想像する or 描いてみる
3. グラフ上の要素（点、線、面）が持つ情報を考える
4. 3の情報が一つの変数（列）と対応するような整然データを作成する
5. {ggplot2}で作図
6. 図のカスタマイズ
7. 図の保存

　今回は第9回の実習用データ（`Micro09.csv`）を使用する。{tidyverse}パッケージを読み込んだ後、`read_csv()`関数でデータを読み込む。

```{r}
#| message: false
library(tidyverse)
df <- read_csv("Data/Micro09.csv")
```

## 棒グラフ

　まずは、棒グラフについて解説する。ここに紙と鉛筆があるとし、棒グラフを描くとしよう。棒グラフは適当なもので良い。棒グラフには通常、2つ以上の棒が並んでいる。それぞれの棒から我々は何が分かるだろうか。

```{r}
#| echo: false
tibble(x = 1:2,
       y = c(20, 80)) %>%
  ggplot() +
  geom_bar(aes(x = x, y = y), stat = "identity") +
  scale_x_continuous(breaks = 1:2, labels = c("ソンさん", "キムさん")) +
  labs(x = "人", y = "成績") +
  theme_bw(base_size = 14)
```

　この棒から分かるのは「ある**人**の**成績**」である。成績は棒の高さで分かり、それが誰の成績なのかは棒の横軸上の位置から分かる。つまり、棒グラフには棒の横軸上の位置、高さといった2つの次元で構成され、それぞれ人と成績に対応する。この位置と高さは棒グラフを作成する際に必要な**最低限**の情報である。むろん、以下の @fig-bar-comparison-2 のように位置を縦軸上の位置に、人間開発指数の平均値を棒の長さとして定義することできる。いずれにせよ、以下のような棒グラフを作成するためには「大陸」と「人間開発指数の平均値」といった2つの変数が必要だ。

```{r fig-bar-comparison}
#| fig-cap: 2つの棒グラフ
#| fig-subcap: 
#|   - "xが大陸、yが人間開発指数"
#|   - "yが大陸、xが人間開発指数"
#| layout-ncol: 2
#| echo: false
#| fig-width: 5
#| fig-height: 4
df %>%
   group_by(Continent) %>%
   summarise(HDI = mean(HDI_2018, na.rm = TRUE)) %>%
   ggplot() +
   geom_bar(aes(x = Continent, y = HDI), stat = "identity") +
   labs(y = "Human Development Index") +
   theme_bw(base_size   = 14)

df %>%
   group_by(Continent) %>%
   summarise(HDI = mean(HDI_2018, na.rm = TRUE)) %>%
   ggplot() +
   geom_bar(aes(y = Continent, x = HDI), stat = "identity") +
   labs(x = "Human Development Index") +
   theme_bw(base_size   = 14)
```

### 棒グラフの作成

　それではデータを作成してみよう。{dplyr}を使用し、大陸 (`Continent`)ごとの人間開発指数 (`HDI_2018`)の平均値を計算し、`df2`という名で格納しておく。

```{r}
df2 <- df %>%
   group_by(Continent) %>%
   summarise(HDI = mean(HDI_2018, na.rm = TRUE))

df2
```

　棒グラフに必要な2つの変数が揃った。ただし、データがこの2つの変数**のみ**で構成される必要はない。含まれていれば問題ない。それでは作図に移ろう。棒グラフを作成するときに使用する幾何オブジェクト`geom_bar()`である。また、`aes()`内に指定するマッピングは棒の横軸上の位置を意味する`x`と棒の高さを意味する`y`である。そして、棒の横軸上の位置は大陸 (`Continent`)、棒の高さは人間開発指数の平均値 (`HDI`)なので、マッピングは`x = Continent, y = HDI`となる。もし、@fig-bar-comparison-2 のような図を作成するなら、`x`と`y`を逆にすれば良い。最後に、`geom_bar()`内、かつ`aes()`の外に`stat = "identity"`と描く。`stat`引数は初心者には難しい引数なので、ここでは説明を割愛する。

　それでは図を作成し`bar_plot1`という名のオブジェクトとして格納しておこう。格納された図を出力する場合はオブジェクト名のみ入力すれば良い。

```{r}
#| fig-width: 5
#| fig-height: 2.8
#| code-line-numbers: "3"
bar_plot1 <- df2 %>%
  ggplot() +
  geom_bar(aes(x = Continent, y = HDI), stat = "identity")

bar_plot1
```

　もし、論文・レポートの使用言語が日本語であるなら図表も日本語にする必要がある。`bar_plot1`を日本語にする場合、修正が必要な箇所は大陸名とそれぞれの軸のタイトルである。まず、`df2`の`Continent`列を日本語にリコーディングし、`Continent_J`という名の列として追加する。

```{r}
df2 <- df2 %>%
   mutate(Continent_J = case_when(Continent == "Asia"    ~ "アジア",
                                  Continent == "Africa"  ~ "アフリカ",
                                  Continent == "America" ~ "アメリカ",
                                  Continent == "Europe"  ~ "ヨーロッパ",
                                  TRUE                   ~ "オセアニア"))

df2
```

　作図の際、`Continent`の代わりに`Continent_J`を使用する。また、X軸とY軸のタイトルを修正するために`labs()`レイヤーを追加し、軸のタイトルを指定する。

```{r}
#| fig-width: 8
#| fig-height: 3.2
#| code-line-numbers: "4"
df2 %>%
   ggplot() +
   geom_bar(aes(x = Continent_J, y = HDI), stat = "identity") +
   labs(x = "大陸", y = "人間開発指数の平均値")
```

　NIIオンライン分析システムを使用する場合、以上のような図が得られるはずである。しかし、自分のPCにインストールしたR/RStudioを使用する場合、文字化けは生じる可能性がある。この場合、`theme_*()`レイヤーを追加し、引数として`base_family = "日本語フォント"`を指定する必要がある。`theme_*()`は`theme_`で始まる関数の総称であり、`theme_gray()`（{ggplot2}のデフォルトテーマ）、`theme_bw()`、`theme_minimal()`などがある。日本語フォントは好きなものを使えば良いが、macOSの場合は`"HiraginoSans-W3"`、Windowsの場合は`"Yu Gothic"`が無難だろう。以下のコードはmacOSで文字化けが生じた場合のコードの改善例である。

```{r}
#| eval: false
#| code-line-numbers: "5"
df2 %>%
   ggplot() +
   geom_bar(aes(x = Continent_J, y = HDI), stat = "identity") +
   labs(x = "大陸", y = "人間開発指数の平均値") +
   theme_gray(base_family = "HiraginoSans-W3")
```

　先ほどのグラフを見ると、大陸がアジア、アフリカ、アメリカ、オセアニア、ヨーロッパ順となっている。これをアルファベット順に並べ替える、つまり、アフリカ、アメリカ、アジア、ヨーロッパ、オセアニアの順番にするにはどうすれば良いだろうか。答えは`Continet_J`列をfactor化し、アフリカ、アメリカ、アジア、ヨーロッパ、オセアニア順にすることだ。`df2`を`ggplot()`関数に渡す前に`mutate()`を入れ、そこで`Continent_J`列をfactor化すれば良い。

```{r}
#| fig-width: 8
#| fig-height: 3.5
#| code-line-numbers: "2-4"
df2 %>%
   mutate(Continent_J = factor(Continent_J, 
                               levels = c("アフリカ", "アメリカ", "アジア", 
                                          "ヨーロッパ", "オセアニア"))) %>% 
   ggplot() +
   geom_bar(aes(x = Continent_J, y = HDI), stat = "identity") +
   labs(x = "大陸", y = "人間開発指数の平均値") +
   theme_bw() # Black and Whiteテーマも使ってみよう
```

　ただし、`df2`を見ると表の順番はアルファベット順になっている。

```{r}
df2
```

　このように表で表示されている順番は作図の際の順番は一致しない場合がある。この順番を調整するためには、当該変数を予めfactor化しておく必要がある。

　ここで一つ便利な関数を紹介しよう。それは`fct_inorder()`関数だ。この関数は{forcats}パッケージに含まれている関数であり、{tidyverse}を読み込む際、一緒に読み込まれるので{tidyverse}を読み込んだら別途読み込む必要はない。この`fct_inorder()`は`()`内の変数をfactor化し、各要素順番を**表で登場した順番**にしてくれる関数だ。現在、`df2`はアルファベット順になっているので、この表の順番通りに`Continent_J`の要素の順番が固定される。

```{r}
#| fig-width: 8
#| fig-height: 3.5
#| code-line-numbers: "2"
df2 %>%
   mutate(Continent_J = fct_inorder(Continent_J)) %>%
   ggplot() +
   geom_bar(aes(x = Continent_J, y = HDI), 
            stat = "identity") +
   labs(x = "大陸", y = "人間開発指数の平均値")
```

<!--- --->

### 次元の追加

　通常の棒グラフはX軸とY軸のみで構成される2次元グラフである。棒グラフ上の棒には「**ある大陸** (X軸) の**HDIの平均値** (Y軸)」といった2つの情報が含まれている。つまり、一部の例外を除き、グラフの次元数は情報量を意味し、これは{ggplot2}の幾何オブジェクト内の`aes()`内で指定する引数の数でもある。以下では次元を増やす方法について紹介する。

　まず、各政治体制（`Polity_Type`）に属する国家数の棒グラフを作ってみよう。作図に必要なdata.frameを`df3`として用意しておく。

```{r}
df3 <- df %>%
   drop_na(Polity_Type) %>%
   mutate(Polity_Type = factor(Polity_Type,
                               levels = c("Autocracy", "Closed Anocracy",
                                          "Open Anocracy", "Democracy",
                                          "Full Democracy"))) %>%
   group_by(Polity_Type) %>%
   summarise(N = n())

df3
```

　棒グラフの作り方はこれまでのやり方と同じである。

```{r}
#| fig-width: 8
#| fig-height: 3.5
df3 %>%
   ggplot() +
   geom_bar(aes(x = Polity_Type, y = N), stat = "identity")
```

　この棒グラフが持つ情報は2つである。まず、`x`で指定した政治体制のタイプ (`Polity_Type`)、そして`y`で指定した国家数 (`N`)だ。ここに更にもう一つの次元を使いすると使用。たとえば、もう一つの次元として大陸（`Continent`）を使いするとしよう。この場合、作図に使用するデータには大陸の変数（列）も必要だ。一方、先ほど作成した`df3`には大陸の情報がない。まずは、政治体制$\times$大陸ごとの国家数を計算し、`df4`として格納しておく。

```{r}
df4 <- df %>%
   drop_na(Polity_Type) %>%
   mutate(Polity_Type = factor(Polity_Type,
                               levels = c("Autocracy", "Closed Anocracy",
                                          "Open Anocracy", "Democracy",
                                          "Full Democracy"))) %>%
   group_by(Polity_Type, Continent) %>%
   summarise(N       = n(),
             .groups = "drop")

df4
```

　次元を追加するときには`aes()`内に引数を追加すれば良い。棒グラフの棒に更に情報を持たせるのであれば、どうすれば良いだろうか。棒は点・線・面のうち、面に該当する。面であるならば、面の色（`fill`）、枠線の色（`color`）、枠線のタイプ（`linetype`）、透明度（`alpha`）などがある。`x`と`y`のみと構成された多くの図において、もう一つの次元を追加するのであれば、定番は色である。棒グラフの場合、面の色と枠線の色をそれぞれ指定することができるが、ここでは面の色（`fill`）にマッピングする。やり方は`aes()`内に`fill = Continent`を追加するだけだ。

```{r}
#| fig-width: 8
#| fig-height: 3
#| code-line-numbers: "3"
df4 %>%
  ggplot() +
  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = "identity")
```

　このような図を想像した人もいれば、少し違うと思う人もいるだろう。沖積されている形の棒グラフは世の中でそこそこ見るものであるが、実は分かりにくい図でもある。たとえば、民主主義（Democracy）の国の中で最も国家数が多い大陸はどこだろうか。この図ではどの大陸もだいたい同じ国家数にも見える。したがって、色分けした棒グラフは通所湯、棒の位置をずらす必要がある。ずらす方法は`geom_bar()`内に`position = "dodge"`を指定するだけだ。注意する点は`aes()`の中でなく、外に指定することだ。

```{r}
#| fig-width: 8
#| fig-height: 3
#| code-line-numbers: "4"
df4 %>%
  ggplot() +
  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = "identity",
           position = "dodge")
```

　あとは図を少しずつ調整してだけであるが、ここでは凡例の位置を変更する方法について紹介する。グラフ全体の見た目などを細かく調整するレイヤーは`theme()`である。この`theme()`内に`legend.position = "bottom"`を指定すると、凡例が図の下段へ移動する。デフォルトは`"right"`であり、
　`"top"`は上段、`"none"`は削除を意味する。`"left"`も可能だが、あまり使われない。この`theme()`はかなり奥深く、コンソール上で`?theme`を入力してみれば分かるだろうが、引数の数も数十種類以上だ。これをすべて覚えて使う人は少数だろう。多分、これは{ggplot2}の開発者にとっても同じはずである。必要に応じてヘルプやインターネット検索を活用すれば良い。

```{r}
#| fig-width: 8
#| fig-height: 3
#| code-line-numbers: "5"
df4 %>%
  ggplot() +
  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = "identity",
           position = "dodge") +
  theme(legend.position = "bottom")
```

　続いて、全く同じ情報を持つグラフでありながら、だいぶ印象が変わるものを紹介しよう。これまで作成した棒グラフは「ある政治体制内の大陸の分布」を知ることに特化している。つまり、「権威主義国家内にはアフリカがXカ国、アジアが...」といったメッセージを伝えるに効果的である。一方、「ある大陸内の政治体制の分布」を見るにはどうすれば良いだろうか。つまり、「アフリカには権威主義がXカ国、民主主義が...」のメッセージを伝えることである。いずれも必要な変数は同じはずである。異なるのはマッピングだけである。たとえば、`x`と`fill`を交換してみよう。厳密に言えば棒を並び替えただけなのに、かなり印象が変わってくる。可視化は「伝えたいメッセージを効果的に伝える」ことが重要であり、そのためには試行錯誤が必要だろう。

```{r}
#| fig-width: 8
#| fig-height: 3
df4 %>%
  ggplot() +
  geom_bar(aes(x = Continent, y = N, fill = Polity_Type), stat = "identity",
           position = "dodge", color = "white") +
  theme_bw() +
  labs(x = "Continent", y = "Number of Countries", fill = "Polity Type") +
  theme(legend.position = "bottom")
```

　最後に次元を追加するもう一つの方法として、ファセット（facet）分割について紹介する。これは色分けを出来る限り抑えたい時に効果的である。特に白黒印刷の場合、識別可能な色は白・グレー・黒の3つくらいだろう。しかし、色の種類は増えると、白黒印刷では識別するのが難しくなる。この場合、プロットの面（=ファセット）を分割することで色の増加が抑制できる。使い方は`facet_wrap(~ 分割の基準となる変数名)`のレイヤーを入れるだけだ。`df4`を使い、政治体制ごとの国家数の棒グラフを作成する。ただし、それぞれの棒グラフは大陸ごとに独立したファセットを持つとする。

```{r}
#| fig-width: 7
#| fig-height: 2.5
#| code-line-numbers: "4"
bar_plot2 <- df4 %>%
  ggplot() +
  geom_bar(aes(x = Polity_Type, y = N), stat = "identity") +
  facet_wrap(~ Continent, ncol = 5) # ncol/nrowで列/行数の指定が可能

bar_plot2
```

<!--- --->

値ラベルの回転

値ラベルが長すぎる場合、ラベルを回転することで重複を避ける

* 覚える必要はなく、必要に応じてググる（`theme()`レイヤーはかなり複雑）

以下のように図オブジェクトに直接「+」でレイヤーを追加することもできる。

```{r}
#| fig-width: 7
#| fig-height: 2.5
#| code-line-numbers: "3"
bar_plot3 <- bar_plot2 +
   theme_minimal() + # テーマを変えてみよう
   theme(axis.text.x = element_text(angle = 35, vjust = 1, hjust = 1)) # 35度回転

bar_plot3
```

<!--- --->

マッピング交換でも解決可能

`x`と`y`を交換しても良い

```{r}
#| code-line-numbers: "3"
#| fig-width: 8
#| fig-height: 3.25
bar_plot4 <- df4 %>%
  ggplot() +
  geom_bar(aes(x = N, y = Polity_Type), stat = "identity") +
  labs(x = "Number of Countries", y = "Poltiy Type") +
  facet_wrap(~ Continent, ncol = 5) + # 5列のファセット分割
  theme_minimal(base_size = 12)       # フォントサイズの調整も可能

bar_plot4
```

<!--- --->

## 図の保存

　作成した図をファイルとして保存する時には、まずベクトルとビットマップ、どのフォーマットで保存するかを考える必要がある。ベクトル画像（ @fig-pdf-png-1 ）の拡張子は`.pdf`（推奨）、`.svg`などがあり、これらのファイルは図をいくら拡大しても図が綺麗なままだという利点がある。また、複雑な図（例えば、点が数百万個ある散布図など）でないなら、ファイルサイズも比較的小さい。ビットマップ画像（ @fig-pdf-png-2 ）の拡張子は`.png`（推奨）、`.bmp`、`.jpg`（= `.jpeg`）などがあり、図がいくら複雑でもファイルサイズが安定するといったメリットがある。しかし、拡大すると図がカクカクする場合がある。高い解像度（DPI）にすると、拡大しても綺麗だが、ファイルサイズに注意する必要がある。基本的にベクトル画像を推奨するが、使用するワードソフトによってはPDFの図の埋め込みができない場合もある。ビートマップ画像はどのソフトでも確実に埋め込める。

```{r fig-pdf-png}
#| fig-cap: "ベクトル vs. ビットマップ"
#| fig-subcap: 
#|   - "ベクトル画像"
#|   - "ビットマップ画像"
#| layout-ncol: 2
#| echo: false
#| out-width: "300px"
knitr::include_graphics("Figs/12/PDF_Example.png")
knitr::include_graphics("Figs/12/PNG_Example.png")
```

　ここでは`bar_plot3`を高解像度の`.png`形式で保存する方法について解説する。{ggplot2}で作図した図の保存には`ggsave()`関数が便利だ。たとえば、作業フォルダー内の`Figs`フォルダに`Figure1.png`という名で`bar_plot3`を保存するとしよう。ただし、予め作業フォルダー内に`Figs`フォルダーを作成しておく必要がある。図のサイズは幅6**インチ**、高さ3**インチ**とし、解像度（DPI）は400とする。解像度が高いほどファイルサイズは大きくなるため、適切な解像度を選ぶのが重要だ。モニター画面に表示するだけなら最低150、印刷目的なら最低300はほしい。また、図の保存時、文字化けを防いでくれる{ragg}パッケージがあるが、これも予めインストールしておこう（NIIオンライン分析システムでは導入済み）。`ggsave()`の使い方の例は以下の通りである。

```{r}
#| eval: false
ggsave(filename = "Figs/Figure1.png", # 保存先とファイル名
       plot     = bar_plot3,          # 保存する図のオブジェクト名
       width    = 6,                  # 図の幅 (インチ)
       height   = 3,                  # 図の高さ (インチ)
       dpi      = 400,                # 解像度
       device   = ragg::agg_png)      # 文字化け防止
```

<!--- --->

## ヒストグラム

## 変数の分布

### 変数が一つの場合

* 変数が**離散変数**の場合: 棒グラフ
   * 性別、国、都道府県など、数値が意味を持たないか変数
   * 順位など取りうる値が有限
* 変数が**連続変数**の場合: ヒストグラム、箱ひげ図
   * 気温、成績、所得、身長、体重、人間開発指数、...
   * 取りうる値が無限個

### 変数が2つの場合

* **連続変数**と**連続変数**: 散布図
* **順序付き離散変数**と**連続変数**: 折れ線グラフ
* **離散変数**と**離散変数**: モザイク図

### 変数が3つ以上の場合

* 次元を追加する形で対応

<!--- --->

### ヒストグラムの作成

棒の横軸上の位置と高さ

* {ggplot2}の場合、ヒストグラムを出力する変数を`x`にマッピングするだけで、自動的にヒストグラムを生成

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.5
#| warning: false
#| message: false
df %>%
   ggplot() +
   geom_histogram(aes(x = HDI_2018), binwidth = 0.05) +
   labs(x = "人間開発指数 (2018年)", y = "国家数") +
   theme_gray(base_size   = 12)
```

<!--- --->

ヒストグラムの作成

`geom_histogram()`を使用: マッピングは`x`のみ

```{r}
#| fig-width: 8
#| fig-height: 3.5
#| warning: false
#| message: false
df %>%
  ggplot() +
  geom_histogram(aes(x = HDI_2018)) # HDI_2018のヒストグラム
```

<!--- --->

棒の数を調整する

`geom_histogram()`内、`aes()`の外に`bins`引数を指定

```{r}
#| fig-width: 8
#| fig-height: 3.5
#| warning: false
#| message: false
df %>%
  ggplot() +
  geom_histogram(aes(x = HDI_2018), bins = 10) # 棒を10本にする
```

<!--- --->

棒の幅を調整する

`geom_histogram()`内、`aes()`の外に`binwidth`引数を指定

```{r}
#| fig-width: 8
#| fig-height: 3.5
#| warning: false
#| message: false
df %>%
  ggplot() +
  geom_histogram(aes(x = HDI_2018), binwidth = 0.05) # 棒の幅を0.05にする
```

<!--- --->

棒の枠線を入れる

`geom_histogram()`内、`aes()`の外に`color`引数を指定

```{r}
#| fig-width: 8
#| fig-height: 3
#| warning: false
#| message: false
hist_plot1 <- df %>%
  ggplot() +
  geom_histogram(aes(x = HDI_2018), binwidth = 0.05, color = "white") +
  labs(x = "Human Development Index (2018)", y = "Number of Countries")
hist_plot1
```

<!--- --->

横軸のスケール調整

`scale_x_continuous()`を使用 (`x`を`y`に変えると縦軸修正)

* `breaks`引数: 目盛りの位置 / `labels`引数: 目盛りのラベル

```{r}
#| fig-width: 8
#| fig-height: 3
#| warning: false
#| message: false
#| code-line-numbers: "2,3"
hist_plot2 <- hist_plot1 +
   scale_x_continuous(breaks = seq(0.4, 1.0, by = 0.1),
                      labels = seq(0.4, 1.0, by = 0.1))
```

<!--- --->

### 次元の追加

ファセット分割

大陸ごとの`HDI_2018`のヒストグラム: ファセット分割を使用

```{r}
#| fig-width: 8
#| fig-height: 3.4
#| warning: false
#| message: false
#| code-line-numbers: "2"
hist_plot1 +
   facet_wrap(~Continent, ncol = 6)
```

<!--- --->

色分け

`position = "identity"`と`alpha = 0.5`で可能であるが、非推奨

* `alpha = 1`の場合、棒が不透明であるため、0.5程度に調整

```{r}
#| fig-width: 8
#| fig-height: 3
#| warning: false
#| message: false
#| code-line-numbers: "4,5"
df %>%
   mutate(OECD = if_else(OECD == 1, "OECD Members", "Others")) %>%
   ggplot() +
   geom_histogram(aes(x = HDI_2018, fill = OECD), position = "identity",
                  binwidth = 0.05, color = "white", alpha = 0.5)
```
