---
title: "第3回講義資料"
subtitle: "Rの基本的な操作"
toc: true
toc-title: "目次"
---

```{r}
#| include: false
rm(list = ls())
```

## 電卓としてのR

File > New File > R Scriptをクリックする。

Sourceペインを最大化する。

Sourceに以下の内容を入力する。

```{r}
#| eval: false
1 + 1
```

コードの行にカーソルをおいたままCmd + Return（Windowsの場合、Control (Ctrl) + Enter）を入力

Consoleペインに結果が表示される。

```{r}
#| echo: false
1 + 1
```

これくらいの計算はConsoleペインで直接打ち込んでも良いが、自分がこれまで書いたコードを残すという意味でSourceペインに入力することを推奨する。R Scriptを保存しておけばいつでも開いて前回のコードを再現できる。

## コメント

`#`を使用する。`#`以降の内容は処理に影響を与えない。

こまめにコメントを書こう。

## 算術演算子

* 結果として何らかの**数字**が返される
* 累乗（`^`）を除き、演算子の前後にはスペースを入れるのがRの流儀
  * 必須ではないが、コードが読みやすくなる

```{r}
1 + 5  # 足し算
3 - 10 # 引き算
19 * 2 # 掛け算
13 / 7 # 割り算
5^3    # 5の3乗
```

| 演算子    | 意味            | 例                  | 結果 |
|:---------:|-----------------|---------------------|-----:|
| `+`       | 和              |`2 + 5`              |  7   |
| `-`       | 差              |`2 - 8`              | -6   |
| `*`       | 積              |`7 * 3`              | 21   |
| `/`       | 商              |`16 / 5`             |  3.2 |
| `^`、`**` | 累乗（べき乗）  | `2^3`または`2 ** 3` |  8   |
| `%%`      | 剰余 (モジュロ) | `18 %% 7`           |  4   |
| `%/%`     | 整数商          | `18 %/% 7`          |  2   |

## 論理演算子

* 真（`TRUE`）か偽（`FALSE`）の値を返す演算子

```{r}
3 > 2 # 3は2より大きいの?
5 <= 10 # 5は10と同じか小さいの?
2 + 3 == 1 # 2と3の和は1なの?
2 + 2 != 2 * 2 # 2と2の和は2と2の積と同じなの?
```

* 「等しい」は`=`でなく、`==`であることに注意すること

|演算子|意味|例|結果|
|---|---|---|---|
|`x < y`|`x`は`y`より小さい|`3 < 1`|`FALSE`|
|`x <= y`|`x`は`y`と等しいか、小さい|`2 <= 2`|`TRUE`|
|`x > y`|`x`は`y`より大きい|`6 > 5`|`TRUE`|
|`x >= y`|`x`は`y`と等しいか、大きい|`4 >= 5`|`FALSE`|
|`x == y`|`x`と`y`は等しい|`(2 + 3) == (4 + 1)`|`TRUE`|
|`x != y`|`x`と`y`は等しくない|`((2 * 3) + 1) != (2 * (3 + 1))`|`TRUE`|

AND演算子: `&`

* `&`を挟む左右の**両側**が`TRUE`の場合のみ`TRUE`を返す

```{r}
(2 + 3 == 5) & (1 * 2 == 3) # TRUE and FALSEだから
```

OR演算子: `|`

* `|`を挟む左右の**片側、あるいは両側**が`TRUE`の場合のみ`TRUE`を返す

```{r}
(2 + 3 == 5) | (1 * 2 == 3) # TRUE or FALSEだから
```

## 代入とベクトル

* 123454321 $\times$ 2を計算してみよう
* 123454321 $\times$ 3を計算してみよう
* 123454321 $\times$ 4を計算してみよう
* ...
* 123454321 $\times$ 200を計算してみよう

```r
123454321 * 2
123454321 * 3
123454321 * 4

(省略)

123454321 * 198
123454321 * 199
123454321 * 200
```

199行のコードを書く必要がある。

効率的な方法は?

* `123454321`をコピーし貼り付けながら計算を繰り返す
* `123454321`に`x`という名前を付けて、`x * 1`のように表記する（**ここが重要**）

Rにおいてベクトルはデータの最小単位

* ベクトルの特徴
* 同じデータ型（数値、文字列など）
  * 数値と文字列が混在するベクトルは作成不可
* 長さは1以上
  * `1`や`"Cat"`は長さ1のベクトル
* 長さ2以上のベクトルは`c()`関数で作成
  * `()`の中にベクトルの要素を入力する

ベクトルの格納

* `<-`演算子で格納
  * `ベクトル名`という名前の**オブジェクト（object）**が生成される
* 格納しない場合、作業環境に保存されず、出力のみ

`x`という器に6という数字を代入したい場合は`x <- 6`

ここでの器は「オブジェクト (object)」と呼ばれ、オブジェクトの内容を確認するためにはオブジェクトの名前のみを入力する。

```{r}
x <- 123454321 # xに123454321を代入
x
x * 35
```

## 表形式データの読み込み

```{r}
#| message: false
library(tidyverse)
```

```{r}
my_data <- read_csv("Data/Pref_Vote.csv")
```

```{r}
ls()
```

```{r}
my_data # または、print(my_data)
```

```
# … with 37 more rows, and 2 more variables: Region2 <dbl>, Region6 <dbl>
```

出力された内容以外にも36行が更にあり、`Region2`と`Region6`という名の列もある。もし、20行を出力したい場合は`print(オブジェクト名, n = 20)`と入力する。

```{r}
print(my_data, n = 20)
```

最初の6行のみを出力する場合は`head()`、最後の6行を出力する場合は`tail()`を使う。

```{r}
head(my_data)
```

```{r}
tail(my_data)
```

6行でなく、任意の行数を指定したい場合は`head()`、または`tail()`内に`n = ...`を追加する。