---
title: "第11回講義資料"
subtitle: "データハンドリング (3)"
toc: true
link-external-icon: true
link-external-newwindow: true
---

## スライド

<a href="../slide/slide11.html" class="btn btn-primary btn-sm" target="_blank" role="button"><i class="bi bi-window"></i> 新しいタブで開く</a>

```{=html}
<iframe class="slide-deck" src="../slide/slide11.html" width="100%" style="aspect-ratio: 16 / 9.2;"></iframe>
```

```{r}
#| include: false
library(tidyverse)
knitr::opts_chunk$set(dev       = "ragg_png",
                      dpi       = 300,
                      fig.align = "center",
                      echo      = TRUE)
```

## データの結合

### 行の結合

　複数のdata.frameを縦に結合する場合は、`bind_rows()`を利用する。たとえば、以下のような2つのdata.frameがあるとする。

```{r}
Data1 <- data.frame(ID    = 1:3, 
                    Name  = c("Aさん", "Bさん", "Cさん"),
                    Score = c(77, 89, 41))
Data2 <- data.frame(ID    = 4:5, 
                    Name  = c("Xさん", "Yさん"),
                    Score = c(98, 78))
```

:::: {.columns}

::: {.column width=48%}
```{r}
Data1
```
:::

::: {.column width=4%}

:::

::: {.column width=48%}
```{r}
Data2
```
:::

::::

　2つのdata.frameは同じ変数名を共有しているため、縦に積み重ねることができる。このようにデータを縦に結合する時にはそれぞれのdata.frameの変数名が一致する必要がある。今回の例では以下の例はいずれのdata.frameも`ID`、`Name`、`Score`で構成されている。ただし、`ID`、`Name`、`Score`の順番は一致しなくても良いが、上のdata.frameの順番に調整される。`bind_rows()`の使い方は簡単である。`bind_rows()`の中に結合するdata.frameのオブジェクト名を入れるだけだ。

```{r}
bind_rows(Data1, Data2)
```

　この`Data1`と`Data2`がそれぞれ1組と2組の学生データだとしよう。結合後はどの生徒がどの組に所属しているかが分からない。結合と同時に各data.frameの識別変数を追加するためには結合するデータを`list()`でまとめ、`.id`引数を追加する。ただし、`list()`の内部では以下のように`"識別変数の値" = 結合するデータ`と定義する必要がある。

```{r}
bind_rows(list("1組" = Data1, "2組" = Data2),
          .id = "Class")
```

　`.id`で指定した名前の変数が第1列として追加され、それぞれどの組のデータであるかが分かるようになる。

### 列の結合

一方、データを横に結合することはいくつかのバリエーションがある。これらの作業は`*_join()`関数を使用する。ここで重要なのは結合に使う識別用の変数（**キー変数**）が必要ということであり、以下の例では`City`はキー変数である。

:::: {.columns}

::: {.column width=48%}
```{r}
Data1 <- data.frame(City  = c("Tokyo", "Osaka", "Kochi"),
                    Pop   = c(927, 148, 76),
                    Area  = c(2194, 828, 7104))
```

```{r}
Data1
```
:::

::: {.column width=4%}
:::

::: {.column width=48%}
```{r}
Data2 <- data.frame(City  = c("Kochi", "Osaka", "Tokyo"),
                    Food  = c("Katsuo", "Takoyaki", "Ramen"))
```

```{r}
Data2
```
:::

::::

　この2つのデータを結合する時には`left_join()`、`right_join()`、`inner_join()`、`full_join()`などを使用するが、いずれも使い方は同じである。まず、結合する2つのdata.frameのオブジェクト名を入力し、`by = "キー変数名"`の引数を追加する。

```{r}
left_join(Data1, Data2, by = "City")
```

　ただし、キー変数は両データに含まれているが、一致しないケースがある。たとえば、以下の例では`City`と`Toshi`がキー変数である。

:::: {.columns}

::: {.column width=48%}
```{r}
Data1 <- data.frame(City  = c("Tokyo", "Osaka", "Kochi"),
                    Pop   = c(927, 148, 76),
                    Area  = c(2194, 828, 7104))
```

```{r}
Data1
```
:::

::: {.column width=4%}
:::

::: {.column width=48%}
```{r}
Data2 <- data.frame(Toshi    = c("Kochi", "Osaka", "Tokyo"),
                    Tabemono = c("Katsuo", "Takoyaki", "Ramen"))
```

```{r}
Data2
```
:::

::::

　この場合、`by = c("データ1のキー変数名" = "データ2のキー変数名")`と指定する必要がある。

```{r}
left_join(Data1, Data2, by = c("City" = "Toshi"))
```

　それでは4種類の`*_join()`関数についてそれぞれの特徴を見てみよう。

　まず、`left_join()`はデータ1を温存させる関数である。たとえば、上の例だと、データ1には東京、大阪、高知が、データ2には高知、大阪、京都のデータが含まれている。大阪と高知は問題なく結合できるが、余っているデータ1の東京、データ2の京都はどうなるだろうか。`left_join()`を使う場合、データ1の東京が温存される。ただし、データ2に東京のデータがないため、東京の`Tabemono`は欠損値（`NA`）で埋められる。

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: false
#| out-width: "600px"
knitr::include_graphics("Figs/10/Merge_Left.png")
```
:::
::: {.column width=50%}
```{r}
#| echo: false
knitr::include_graphics("Figs/10/left-join.gif")
```
:::

::::

　一方、`right_join()`はデータ2が温存される。つまり、京都の行が残り、京都の`Pop`と`Area`は欠損値となる。

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: false
#| out-width: "600px"
knitr::include_graphics("Figs/10/Merge_Right.png")
```
:::
::: {.column width=50%}
```{r}
#| echo: false
knitr::include_graphics("Figs/10/right-join.gif")
```
:::

::::

　`inner_join()`は両データに同時に存在する行のみが結合対象となるため、大阪と高知の行のみが結合される。

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: false
#| out-width: "600px"
knitr::include_graphics("Figs/10/Merge_Inner.png")
```
:::
::: {.column width=50%}
```{r}
#| echo: false
knitr::include_graphics("Figs/10/inner-join.gif")
```
:::

::::

　最後に、`full_join()`はデータ1とデータ2すべてを温存させ、欠損しているセルは欠損値（`NA`）で埋められる。

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: false
#| out-width: "600px"
knitr::include_graphics("Figs/10/Merge_Full.png")
```
:::
::: {.column width=50%}
```{r}
#| echo: false
knitr::include_graphics("Figs/10/full-join.gif")
```
:::

::::

それでは以下のデータで実際に比較してみよう。

```{r}
df1 <- tibble(Pref  = c("東京", "大阪", "京都"),
              Score = c(3.5, 4, 4.2))
df2 <- tibble(Pref  = c("東京", "大阪", "高知"),
              N     = c(3220, 1325, 111))
```

:::: {.columns}

::: {.column width=48%}
```{r}
df1
```
:::

::: {.column width=4%}
:::

::: {.column width=48%}
```{r}
df2
```
:::

::::

:::: {.columns}

::: {.column width=48%}
```{r}
left_join(df1, df2, by = "Pref")
right_join(df1, df2, by = "Pref")
```
:::

::: {.column width=4%}
:::

::: {.column width=48%}
```{r}
inner_join(df1, df2, by = "Pref")
full_join(df1, df2, by = "Pref")
```
:::

::::

　キー変数が複数あることもある。たとえば、以下のように分析の単位（=行）が地域$\times$年度である可能性もあろう。

:::: {.columns}

::: {.column width=48%}
```{r}
df3 <- tibble(Country = c("A", "A", "A", 
                          "B", "B", "B",
                          "C", "C", "C"),
              Year    = c(2020, 2021, 2022, 
                          2020, 2021, 2022,
                          2020, 2021, 2022),
              GDP     = c(100, 150, 200,
                          100, 120, 120,
                          200, 180, 90))

df3
```
:::

::: {.column width=4%}
:::

::: {.column width=48%}
```{r}
df4 <- tibble(Country = c("A", "B", "C", 
                          "A", "B", "C",
                          "A", "B", "C"),
              Year    = c(2020, 2020, 2020, 
                          2021, 2021, 2021,
                          2022, 2022, 2022),
              Pop     = c(1000, 8000, 5000,
                          1100, 7000, 6000,
                          1100, 8000, 7800))

df4
```
:::

::::

　この場合、`Country`、または`Year`のみをキー変数として使うのではなく、両方をキー変数として使う必要がある。複数のキー変数を指定するときには`by = c("キー変数1", "キー変数2")`のように指定する。

```{r}
left_join(df3, df4, by = c("Country", "Year"))
```

## 整然データ構造

　Tidy dataとはHadley Wickhamが提唱した**データ分析に適したデータ構造**であり、日本語では**整然データ**、または簡潔データとも訳される。整然データはパソコンにとって読みやすいデータであり、Rにおける多くの分析はこの整然データを基づいて行われる。ただし、パソコンにとって読みやすいデータが必ずしも人間にとって読みやすいデータであることを意味するわけではない。2つが一致する場合もあれば、一致しない場合もある。{tidyr}パッケージは整然ではないデータ（=雑然データ）を整然データへ変形するパッケージであり、次回紹介する{ggplot2}は整然データを前提として開発されたパッケージである。

### 4つの原則

　整然データには4つの原則がある。

1. 1つの列は、1つの変数を表す
2. 1つの行は、1つの観測を表す
3. 1つのセルは、1つの値を表す
4. 1つの表は、1つの観測単位をもつ

　以下ではそれぞれの原則について解説する。

**原則1: 1列1変数**

　これは1つの列は1つの変数を意味するといった、一見当たり前のように見える原則であるが、実は雑然データのほとんどは、この原則1を満たしていない。たとえば、以下のようなデータを考えてみよう。これは3人の被験者に対し、薬を飲む前後の数学成績を測定したデータである。このデータを構成する変数は、被験者名、処置の前後、数学成績の3つである。薬を飲む前の数学関席は`Control`列、薬を飲んだ後の数学成績が`Treatment`列である。

```{r}
#| echo: false
#| out-width: "800px"
knitr::include_graphics("Figs/10/TidyData1.png")
```

　このデータの問題は「数学成績」といった一つの変数が2列に分かれていることである。実はこのデータは以下の原則2も満たしてない。原則2を満たしていないデータはほとんど原則1を満たしていないケースが多い。

**原則2: 1行1観察**

　1行に1つの観察が入るということも当たり前のように思える。しかし、「1つの観察 = 1つの値」を意味するわけではない。先ほどのデータもそれぞれのセルには1つの値のみ入っている。ここでの「観察」とは観察単位ごとに測定された**値の集合**であり、**観察単位**は人、企業、国、時間などがある。このデータの観察単位は「人」ではない。今回のデータにおける観察単位は「人 $\times$ 時間」である。たとえば、「投薬前のXさんの数学成績」が一つの観察である。しかし、以下の左側のデータは一つの行にある学生の投薬前の数学成績と投薬後の数学成績、つまり2つの観察が混じっていることとなる。

```{r}
#| echo: false
#| out-width: "800px"
knitr::include_graphics("Figs/10/TidyData2.png")
```

**原則3: 1セル1値**

　1つのセルに1つの値のみが含まれるといった原則3は、これに反するケースは多くない。以下のように「Hadleyさんは投薬前後で数学成績が変わらないから、一つのセルにまとめよう」といったことはめったにないだろう。

```{r}
#| echo: false
#| out-width: "400px"
knitr::include_graphics("Figs/10/TidyData3.png")
```

　しかし、一部の例外も存在する。たとえば、1つのセルに`2020/8/24`という値があるとしよう。このセルには「年」と「月」、「日」といった3つの値が含まれている。分析の目的によっては年月日を全て異なるセルに割り当てる必要もあるが、このままで問題とならないケースもある。分析単位が日であれば、このままで問題ないが、分析単位が「年$\times$月$\times$日」であれば、3つのセルに分ける必要があろう。

**原則4: 1表1単位**

　最後の原則4は1つの表は1単位を表すことである。実は1つの表に複数の分析単位が含まれるケースがかなり多い。以下の図は政府統計の例であるが、1つの表に「国」、「都道府県」、「市区町村」、「行政区」の単位が混在していることが分かる。

```{r}
#| echo: false
#| out-width: "800px"
knitr::include_graphics("Figs/10/TidyData4.png")
```

　また、最後の行に「合計」や「平均」が入るケースも多い。最後の行以外は個人が単位であるが、最後の行のみクラスになっている。「1表1単位」原則を満たさない場合、`filter()`関数等で、異なる単位の行を除外することができる。

```{r}
#| echo: false
#| out-width: "500px"
knitr::include_graphics("Figs/10/TidyData5.png")
```

### {tidyr}パッケージ

```{r}
#| echo: false
#| out-width: "200px"
knitr::include_graphics("Figs/10/tidyr.png")
```

雑然データから整然データへ変形をサポートするパッケージ

* `pivot_longer()`: Wide型データからLong型データへ
   * 原則1・2に反するデータを整然データへ変換 (最も頻繁に使われる)
* `pivot_wider()`: Long型データからWide型データへ
   * 人間には雑然データの方が読みやすい場合がある（原則1の例）
* `separate()`: セルの分割（「年月日」から「年」、「月」、「日」へ）
   * 原則3に反するデータを整然データへ変換
* 原則4に反するデータは単位がずれている行を`filter()`などで除外

実習用データ

`Micro10.csv`: 日本、韓国、モンゴル、台湾の5日間COVID-19新規感染者数

* サポートページからダウンロード
* データ出典:[Johns Hopkins University Center for Systems Science and Engineering](https://github.com/CSSEGISandData/COVID-19)

```{r}
#| message: false
COVID_df <- read_csv("Data/Micro10.csv")
COVID_df
```

このデータの問題点

* 観察単位は? 測定した変数は?
  * 観察単位: 地域 $\times$ 時間
  * 変数: 新規感染者数
* 新規感染者数が5列にわたって格納されている

```{r}
#| echo: false
knitr::kable(COVID_df)
```

Wide型からLong型へ

* 整然な`COVID_df`の構造は?
  * 5列を1列にまとめるため、縦に長くなる
  * WideからLongへ

```{r}
#| echo: false
COVID_df %>% 
  pivot_longer(cols      = `2021/05/24`:`2021/05/28`,
               names_to  = "Date",
               values_to = "New_Cases") %>%
  knitr::kable()
```

`pivot_longer()`: Wide to Long

* `cols`は`dplyr::select()`と同じ使い方
  * `c()`で個別の変数名を指定することも、`:`や`starts_with()`を使うこともOK
  * **注意:** 変数名が数字で始まったり、記号が含まれている場合、変数名を`` ` ``か`"`で囲む
    * 列名が日付の場合、数字で始まったり、記号（`/`や`-`など）が含まれるケースが多い
  
```{r}
#| eval: false
データ %>%
  pivot_longer(cols      = 変数が格納されている列,
               names_to  = "元の列名が入る変数名",
               values_to = "変数の値が入る変数名")
```

`pivot_longer()`: WideからLongへ

* `cols = starts_with("2020")`もOK

```{r}
#| code-line-numbers: "2-4"
COVID_Long <- COVID_df %>% 
  pivot_longer(cols      = "2021/05/24":"2021/05/28",
               names_to  = "Date",
               values_to = "New_Cases")
COVID_Long
```

`pivot_wider()`: LongからWideへ

* Long型をWide型へ戻す関数
  * 人間にとってはLong型よりWide型の方が読みやすいケースも多い
  * 1列に2つの変数が入っている場合もある

```{r}
#| code-line-numbers: "2,3"
COVID_Long %>%
  pivot_wider(names_from  = "Date",
              values_from = "New_Cases")
```

`separate()`: 列の分割

`COVID_Long`の`Date`列を`Year`、`Month`、`Day`に分けたい

* **例)** `Date`列を`"/"`を基準に分割する

```{r}
#| eval: false
データ %>%
  separate(col  = "分割する列名",
           into = c("分割後の列名1", "分割後の列名2", ...),
           sep  = "分割する基準")
```

`separate()`: 列の分割

```{r}
#| code-line-numbers: "2-4"
COVID_Long %>%
  separate(col  = "Date",
           into = c("Year", "Month", "Day"),
           sep  = "/")
```

列の分割（番外編）: 特定の記号がない場合

**例)** `City_Data`の`City`列が「都道府県名+市区町村」

* 「最初の3文字」と「残り」で分割することは出来ない（神奈川、和歌山、鹿児島）
* 任意の2文字の後に「都」、「道」、「府」、「県」が付くか、任意の3文字の後に「県」が付く箇所を見つけて分割
   * かなり複雑

```{r}
#| echo: false
City_Data <- tibble(City = c("北海道音威子府村",
                             "大阪府高槻市",
                             "広島県府中市",
                             "鹿児島県指宿市"),
                    Pop  = c(693, 347424, 36471, 38207))

City_Data
```

**正則表現（regular expression）**の知識が必要

* テキスト分析に興味があるなら必須（前期・後期含めて、本講義では解説しない）

```{r}
City_Data %>%
   # 任意の2文字の後に「都道府県」のいずれかが来るか、
   # 任意の3文字の後に「県」が来たら、そこまでをブロック1、残りをブロック2とする
   # Cityの値を「ブロック1-ブロック2」に置換する
   mutate(City = str_replace(City, "^(.{2}[都道府県]|.{3}県)(.+)", 
                             "\\1-\\2")) %>%
   # 「-」を基準に列を分割
   separate(col  = "City", into = c("Pref", "City"), sep  = "-")
```

### {tidyr}と{dplyr}

{tidyr}と{dplyr}を組み合わせることも可能

* **例)** 100万人当たりの新規感染者数を計算し、国ごとに平均値を計算

```{r}
COVID_df %>% 
  pivot_longer(cols      = "2021/05/24":"2021/05/28",
               names_to  = "Date",
               values_to = "New_Cases") %>%
   mutate(New_Case_per_1M = New_Cases / Population * 1000000) %>%
   group_by(Country) %>%
   summarise(New_Case_per_1M = mean(New_Case_per_1M))
```

## 教科書

* データの結合: 『私たちのR: ベストプラクティスの探求』[第13.5章](https://www.jaysong.net/RBook/datahandling2.html#handling2-merge)
* 整然データ構造: 『私たちのR: ベストプラクティスの探求』[第15章](https://www.jaysong.net/RBook/tidydata.html)