---
title: "第5回講義資料"
subtitle: "R Markdownと再現可能な研究"
toc: true
toc-title: "目次"
---

```{r}
#| include: false
knitr::opts_chunk$set(fig.align = "center",
                      dpi       = 300,
                      dev       = "ragg_png")
```

## Rmdファイルの作成

## Markdown文法の基本

　ここでは本講義の課題を遂行するための必要最低限のことのみ解説する。R Markdwonの詳細については教科書の第21章（R Markdown [基礎]）を参照すること。

### 改行

　Markdownにおける改行はやや特殊である。特殊といっても難しいことではない。普段よりもう一行改行するだけだ。Markdownの場合、1回の改行は改行として判定されず、同じ行の連続と認識する。たとえば、**Input**のように入力すると**Output**のように文章1と文章2が繋がってしまう。

**Input:**

```md
文章1
文章2
```

**Output:**

文章1
文章2

　文章1と文章2を改行するためにはもう一行、改行する必要がある。以下の例を見てみよう。

**Input:**

```md
文章1

文章2
```

**Output:**

文章1

文章2

　こうすることで段落間の間隔を強制的に入れることとなり、作成者側にも読みやすい文書構造になるといった利点がある[^linebreak]。

[^linebreak]: HTMLに慣れている読者なら`<br/>`を使った改行もできる。ただし、一般的なMarkdownの改行よりも行間が狭いことには注意する必要がある。HTMLに慣れている履修者なら分かるだろうが、Markdownの改行（2行改行）はHTMLの`<p></p>`に相当するものである。

### 強調

　文章の一部を強調する方法として**太字**、*イタリック*[^markdown-italic]、<u>アンダーライン</u>があり、強調ではないが、ついでに~~取り消し線~~についても紹介する。いずれも強調したい箇所を記号で囲むだけだ。

[^markdown-italic]: ただし、イタリックの場合、日本語には使わないのが鉄則である。強調の意味としてイタリックを使うのはローマ字のみである。

**Input:**

```md
文章の一部を**太字**にしてみましょう。

*イタリック*もいいですね。

~~取り消し線~~はあまり使わないかも。

<u>アンダーライン</u>はHTMLタグを使います。
```

**Output:**

文章の一部を**太字**にしてみましょう。

*イタリック*もいいですね。

~~取り消し線~~はあまり使わないかも。

<u>アンダーライン</u>はHTMLタグを使います。


### 箇条書き

　箇条書きには順序**なし**と順序**付き**がある。順序なしの場合`*`または`-`の後に半角スペースを1つ入れるだけである。また、3文字以上の字下げで下位項目を追加することもできる。

**Input:**

```md
- 項目1
   - 項目1-1
   - 項目1-2
      - 項目1-2-1
         - 項目1-2-1-1
      - 項目1-2-2
- 項目2
- 項目3
```

**Output:**

- 項目1
   - 項目1-1
   - 項目1-2
      - 項目1-2-1
         - 項目1-2-1-1
      - 項目1-2-2
- 項目2
- 項目3

　順序付き箇条書きは、これは`-`（または`*`）を`数字.`に換えるだけである。順序なしの場合と違って数字の後にピリオド（`.`）が付くことに注意すること。また、順序付き箇条書きと順序なし箇条書きは組み合わせて使うことも出来る。

**Input:**

```md
1. 項目1
   1. 項目1-1
   2. 項目1-2
2. 項目2
   * 項目2-1
   * 項目2-2
3. 項目3
```

**Output:**

1. 項目1
   1. 項目1-1
   2. 項目1-2
2. 項目2
   * 項目2-1
   * 項目2-2
3. 項目3

### 見出し

　章、節、段落のタイトルを付ける際は`#`を使う。`#`の数が多いほど文字が小さくなる。章の見出しを`##`にするなら節は`###`、小節または段落は`####`が適切だろう。R Markdownの使用上、見出しは`####`まで使える。

**Input:**

```md
# 見出し1
## 見出し2
### 見出し3
#### 見出し4
```

**Output:**

<span style = "font-size:2em; font-weight:600;">見出し1</span>

<span style = "font-size:1.75em; font-weight:600;">見出し2</span>

<span style = "font-size:1.5em; font-weight:600;">見出し3</span>

<span style = "font-size:1.25em; font-weight:600;">見出し4</span>

### 区切り線

区切り線は`---`または`***`を使う。

**Input:**

```md
---
```

**Output:**

---

### 表

　Markdownの表は非常にシンプルな書き方をしている。行は改行で、列は`|`で区切られる。ただ、表の第1行はヘッダー（変数名や列名が表示される行）扱いとなり、ヘッダーと内容の区分は`|---|`で行う。以下はMarkdownを利用した簡単な表の例である。ここでは可読性のために、適宜スペースを入れたが、スペースの有無は結果に影響を与えない。

**Input:**

```md
|ID   |Name     |Math    |English |Favorite food|
|:---:|---------|-------:|-------:|-------------|
|1    |SONG     |15      |10      |Ramen        |
|2    |Yanai    |100     |100     |Cat food     |
|3    |Shigemura|80      |50      |Raw chicken  |
|4    |Wickham  |80      |90      |Lamb         |
```

**Output:**

|ID   |Name     |Math    |English |Favorite food|
|:---:|---------|-------:|-------:|-------------|
|1    |SONG     |15      |10      |Ramen        |
|2    |Yanai    |100     |100     |Cat food     |
|3    |Shigemura|80      |50      |Raw chicken  |
|4    |Wickham  |80      |90      |Lamb         |

　1行目はヘッダーであり、太字かつ中央揃えになる。2行目以降はデフォルトでは左揃えになるが、`|---|`をいじることによって当該列の揃えを調整できる。`|:---|`は左 (デフォルト)、`|---:|`は右、`|:---:|`は中央揃えになる。また`-`の個数は1個以上なら問題なく、`|-|`も`|---|`も同じである。

### 画像

　R Markdownに画像を入れるには`![代替テキスト](ファイル名)`と入力する。画像ファイル名はパス付きを指定する必要がある。`[代替テキスト]`は画像を読み込めなかった場合に出力されるテキストを意味する。これは画像が読み込めなかった場合の代替テキストでもあるが、視覚障害者用のウェブブラウザーのためにも使われる。これらのウェブブラウザーはテキストのみ出力されるものが多く、画像の代わりには代替テキストが読み込まれる。

　例えば、`Figs`フォルダー内の`favicon.png`というファイルを読み込む場合、以下のように書く。

**Input:**

```md
![『私たちのR』ロゴ](Figs/favicon.png)
```

**Output:**

![『私たちのR』ロゴ](../Figs/favicon.png){width=25%}

### リンク

　ハイパーリンクは`[テキスト](URL)`のように書く。`[]`内は実際に表示されるテキストであり、`()`は飛ばすURLとなる。

**Input:**

```md
毎日1回は[SONGのホームページ](https://www.jaysong.net)へアクセスしましょう。
```

**Output:**

毎日1回は[SONGのホームページ](https://www.jaysong.net)へアクセスしましょう。

### 脚注

　脚注は`[^固有識別子]`と`[^固有識別子]: 脚注内容`の2つの要素が必要だ。まず、文末脚注を入れる箇所に`[^xxxx]`を挿入する。`xxxx`は任意の文字列で良い。しかし、同じR Markdown内においてこの識別子は被らないように注意すること（**固有**識別子だから）。実際の脚注の内容は`[^xxxx]: 内容`のように入力する。これはどこに位置しても問題ない。文書の途中でも、最後に入れても、脚注の内容は文末に位置する。ただし、脚注を入れる段落のすぐ後の方が作成する側としては読みやすいだろう。

**Input:**

```md
これは普通の文章です[^foot1]。

[^foot1]: これは普通の脚注です。
```

**Output:**

これは普通の文章です[^foot1]。

[^foot1]: これは普通の脚注です。

### 数式

　インライン数式は`$数式$`で埋め込むことができる。数式はLaTeXの書き方とほぼ同じだ。ちなみに、R Markdownの数式は[MathJax](https://www.mathjax.org)によってレンダリングされる。このMathJaxライブラリはHTMLに埋め込まれているのではないため、インターネットに接続せずにHTMLファイルを開くと数式が正しく出力されない可能性がある。

**Input:**

```md
アインシュタインと言えば、$e = mc^2$でしょう。
```

**Output:**

アインシュタインと言えば、$e = mc^2$でしょう。

　数式を独立した行として出力する場合は、`$`の代わりに`$$`を使用する。

**Input:**

```md
独立した数式の書き方

$$
y_i \sim \text{Normal}(\mathbf{X} \boldsymbol{\beta}, \sigma).
$$
```

**Output:**

独立した数式の書き方

$$
y_i \sim \text{Normal}(\mathbf{X} \boldsymbol{\beta}, \sigma).
$$

　もし数式が複数の行で構成されている場合は`$$`内にaligned環境（`\begin{aligned}`〜`\end{aligned}`）を使用する。むろん、使い方はLaTeXと同じである。

**Input:**

```md
複数の行にわたる数式の書き方

$$
\begin{aligned}
  Y_i      & \sim \text{Bernoulli}(\theta_i), \\
  \theta_i & = \text{logit}^{-1}(y_i^*), \\
  y_i^*    & = \beta_0 + \beta_1 x_1 + \beta_2 z_1.
\end{aligned}
$$
```

**Output:**

複数の行にわたる数式の書き方

$$
\begin{aligned}
  Y_i      & \sim \text{Bernoulli}(\theta_i), \\
  \theta_i & = \text{logit}^{-1}(y_i^*), \\
  y_i^*    & = \beta_0 + \beta_1 x_1 + \beta_2 z_1.
\end{aligned}
$$

　ここまで見ればLaTeXユーザーはお分かりだろうが、`$$`の中にはLaTeXコマンドが使える。たとえば、行列を作成する際は以下のように`\begin{bmatrix}`環境を使う。

**Input:**

```md
行列の書き方

$$
X = \begin{bmatrix}
  x_{11} & x_{12} \\
  x_{21} & x_{22} \\
  x_{31} & x_{32}
\end{bmatrix}.
$$
```

**Output:**

行列の書き方

$$
X = \begin{bmatrix}
  x_{11} & x_{12} \\
  x_{21} & x_{22} \\
  x_{31} & x_{32}
\end{bmatrix}.
$$


### 引用

　引用の際は文章の最初に`> `を入れるだけだ。`>`の後に半角のスペースを1つ入れること。

**Input:**

```md
「政治とは何か」についてイーストンは以下のように定義しました。

> [A] political system can be designated as those interactions through which values are authoritatively allocated for a society.
```

**Output:**

「政治とは何か」についてイーストンは以下のように定義しました。

> [A] political system can be designated as those interactions through which values are authoritatively allocated for a society.

### コメント

　R Markdownにもコメントを付けることができる。とりあえず書いたが要らなくなった段落や文章があって、消すことがもったいない場合はコメントアウトするのも1つの方法だろう。ただし、Rのコメントアウトの方法は`#`だったが、これはR Markdownでは見出しの記号である。R Markdownのコメントは`<!--`と`-->`で囲む必要がある。

**Input:**

```
文章1

<!--
ここはコメントです。
-->

文章2
```

**Output:**

文章1

<!--
ここはコメントです。
-->

文章2

---

## Rコード

　以上の内容まで抑えると、R Markdownを使って、簡単な文法のみで構造化された文書が作成できる。しかし、R Markdownの意義は文章とコード、結果が統合されることだろう。それでは文書内にRコードとその実行結果を入れる方法を紹介する。

　コードは```` ```{r} ````と```` ``` ````の間に入力するだけだ。これでコードと結果が同時に出力される。たとえば、`print("Hello World!")`を走らせるコードを入れてみよう。

**Input:**

````md
"Hello World!"を出力するコード

```{r, error=TRUE}`r ''`
print("Hello World!")
```
````

**Output:**

"Hello World!"を出力するコード

```{r rmarkdown-code-1}
print("Hello World!")
```

　```` ```{r} ````と```` ``` ````で囲まれた範囲をR Markdownでは**チャンク（Chunk）**と呼ぶ。このチャンク内ではRと全く同じことが出来る。パッケージやデータの読み込み、オブジェクトの生成、データハンドリング、可視化など、全てが出来る。可視化の方法については第12回講義以降の講義で解説するが、ここでは例として紹介する。

**Input:**
　
````md
```{r}`r ''`
# パッケージの読み込み
library(tidyverse)
# R内蔵データセットのirisを使った可視化
iris %>%
  mutate(Species2 = recode(Species,
                           "setosa"     = "セトナ",
                           "versicolor" = "バーシクル",
                           "virginica"  = "バージニカ")) %>%
  ggplot() +
  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +
  labs(x = "萼片の長さ (cm)", y = "萼片の幅 (cm)", color = "品種") +
  theme_minimal(base_size = 12)
```
````

**Output:**

```{r rmarkdown-code-2}
#| message: false
# パッケージの読み込み
library(tidyverse)
# R内蔵データセットのirisを使った可視化
iris %>%
  mutate(Species2 = recode(Species,
                           "setosa"     = "セトナ",
                           "versicolor" = "バーシクル",
                           "virginica"  = "バージニカ")) %>%
  ggplot() +
  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +
  labs(x = "萼片の長さ (cm)", y = "萼片の幅 (cm)", color = "品種") +
  theme_minimal(base_size = 12)
```

　他にも文中にRコードを埋め込むこともできる。例えば、ベクトル`X <- c(2, 3, 5, 7, 12)`があり、この平均値を文中で示したいとする。むろん、文中に「5.8」と書いても問題なし。しかし、実は`X`の入力ミスが見つかり、実は`c(2, 3, 5, 7, 11)`になったらどうなるだろうか。この「5.8」と書いた箇所を見つけて5.6と修正したいといけない。これは非常に面倒な作業であり、ミスも起こりやすい。文中にRコードを入れるためには`` `r ''``rコード` ``のように入力する。

````md
```{r}`r ''`
X <- c(2, 3, 5, 7, 11)
```

変数`X`の平均値は`r "\x60r mean(X)\x60"`です。
````

**Output:**

```{r rmarkdown-code-3}
X <- c(2, 3, 5, 7, 11)
```

変数`X`の平均値は`r mean(X)`です。

　ここで`` `X` ``だが、単に`` ` ``で囲まれただけではコードと認識されない。これは主に文中に短いコードを入れる際に使う機能である。

　チャンクには様々なオプションを付けることができる。出力される図の大きさ、位置、解像度、コードの非常時、結果の非表示、チャンク間の依存関係などが指定できるが、これらについては教科書の第21章（R Markdown [基礎]）を参照すること。

---

## 教科書

* 『私たちのR: ベストプラクティスの探求』の<a href="https://www.jaysong.net/RBook/rmarkdown.html" target="_blank">第21章: R Markdown [基礎]</a>