[
  {
    "objectID": "materials/visualization3.html",
    "href": "materials/visualization3.html",
    "title": "第14回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/visualization2.html",
    "href": "materials/visualization2.html",
    "title": "第13回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/visualization2.html#グラフ作成の手順",
    "href": "materials/visualization2.html#グラフ作成の手順",
    "title": "第13回講義資料",
    "section": "グラフ作成の手順",
    "text": "グラフ作成の手順\n　{ggplot2}を用いた作図は以下の手順で行われる。\n\n作成したいグラフを決める\n作成したいグラフの完成図を想像する or 描いてみる\nグラフ上の要素（点、線、面）が持つ情報を考える\n3の情報が一つの変数（列）と対応するような整然データを作成する\n{ggplot2}で作図\n図のカスタマイズ\n図の保存\n\n　今回は第9回の実習用データ（Micro09.csv）を使用する。{tidyverse}パッケージを読み込んだ後、read_csv()関数でデータを読み込む。\n\nlibrary(tidyverse)\ndf <- read_csv(\"Data/Micro09.csv\")"
  },
  {
    "objectID": "materials/visualization2.html#棒グラフ",
    "href": "materials/visualization2.html#棒グラフ",
    "title": "第13回講義資料",
    "section": "棒グラフ",
    "text": "棒グラフ\n　まずは、棒グラフについて解説する。ここに紙と鉛筆があるとし、棒グラフを描くとしよう。棒グラフは適当なもので良い。棒グラフには通常、2つ以上の棒が並んでいる。それぞれの棒から我々は何が分かるだろうか。\n\n\n\n\n\n\n\n\n\n　この棒から分かるのは「ある人の成績」である。成績は棒の高さで分かり、それが誰の成績なのかは棒の横軸上の位置から分かる。つまり、棒グラフには棒の横軸上の位置、高さといった2つの次元で構成され、それぞれ人と成績に対応する。この位置と高さは棒グラフを作成する際に必要な最低限の情報である。むろん、以下の 図 1 (b) のように位置を縦軸上の位置に、人間開発指数の平均値を棒の長さとして定義することできる。いずれにせよ、以下のような棒グラフを作成するためには「大陸」と「人間開発指数の平均値」といった2つの変数が必要だ。\n\n\n\n\n\n\n\n(a) xが大陸、yが人間開発指数\n\n\n\n\n\n\n\n(b) yが大陸、xが人間開発指数\n\n\n\n\n図 1: 2つの棒グラフ\n\n\n\n棒グラフの作成\n　それではデータを作成してみよう。{dplyr}を使用し、大陸 (Continent)ごとの人間開発指数 (HDI_2018)の平均値を計算し、df2という名で格納しておく。\n\ndf2 <- df %>%\n   group_by(Continent) %>%\n   summarise(HDI = mean(HDI_2018, na.rm = TRUE))\n\ndf2\n\n# A tibble: 5 × 2\n  Continent   HDI\n  <chr>     <dbl>\n1 Africa    0.553\n2 America   0.742\n3 Asia      0.723\n4 Europe    0.861\n5 Oceania   0.782\n\n\n　棒グラフに必要な2つの変数が揃った。ただし、データがこの2つの変数のみで構成される必要はない。含まれていれば問題ない。それでは作図に移ろう。棒グラフを作成するときに使用する幾何オブジェクトgeom_bar()である。また、aes()内に指定するマッピングは棒の横軸上の位置を意味するxと棒の高さを意味するyである。そして、棒の横軸上の位置は大陸 (Continent)、棒の高さは人間開発指数の平均値 (HDI)なので、マッピングはx = Continent, y = HDIとなる。もし、図 1 (b) のような図を作成するなら、xとyを逆にすれば良い。最後に、geom_bar()内、かつaes()の外にstat = \"identity\"と描く。stat引数は初心者には難しい引数なので、ここでは説明を割愛する。\n　それでは図を作成しbar_plot1という名のオブジェクトとして格納しておこう。格納された図を出力する場合はオブジェクト名のみ入力すれば良い。\n\nbar_plot1 <- df2 %>%\n  ggplot() +\n  geom_bar(aes(x = Continent, y = HDI), stat = \"identity\")\n\nbar_plot1\n\n\n\n\n\n\n\n\n　もし、論文・レポートの使用言語が日本語であるなら図表も日本語にする必要がある。bar_plot1を日本語にする場合、修正が必要な箇所は大陸名とそれぞれの軸のタイトルである。まず、df2のContinent列を日本語にリコーディングし、Continent_Jという名の列として追加する。\n\ndf2 <- df2 %>%\n   mutate(Continent_J = case_when(Continent == \"Asia\"    ~ \"アジア\",\n                                  Continent == \"Africa\"  ~ \"アフリカ\",\n                                  Continent == \"America\" ~ \"アメリカ\",\n                                  Continent == \"Europe\"  ~ \"ヨーロッパ\",\n                                  TRUE                   ~ \"オセアニア\"))\n\ndf2\n\n# A tibble: 5 × 3\n  Continent   HDI Continent_J\n  <chr>     <dbl> <chr>      \n1 Africa    0.553 アフリカ   \n2 America   0.742 アメリカ   \n3 Asia      0.723 アジア     \n4 Europe    0.861 ヨーロッパ \n5 Oceania   0.782 オセアニア \n\n\n　作図の際、Continentの代わりにContinent_Jを使用する。また、X軸とY軸のタイトルを修正するためにlabs()レイヤーを追加し、軸のタイトルを指定する。\n\ndf2 %>%\n   ggplot() +\n   geom_bar(aes(x = Continent_J, y = HDI), stat = \"identity\") +\n   labs(x = \"大陸\", y = \"人間開発指数の平均値\")\n\n\n\n\n\n\n\n\n　NIIオンライン分析システムを使用する場合、以上のような図が得られるはずである。しかし、自分のPCにインストールしたR/RStudioを使用する場合、文字化けは生じる可能性がある。この場合、theme_*()レイヤーを追加し、引数としてbase_family = \"日本語フォント\"を指定する必要がある。theme_*()はtheme_で始まる関数の総称であり、theme_gray()（{ggplot2}のデフォルトテーマ）、theme_bw()、theme_minimal()などがある。日本語フォントは好きなものを使えば良いが、macOSの場合は\"HiraginoSans-W3\"、Windowsの場合は\"Yu Gothic\"が無難だろう。以下のコードはmacOSで文字化けが生じた場合のコードの改善例である。\n\ndf2 %>%\n   ggplot() +\n   geom_bar(aes(x = Continent_J, y = HDI), stat = \"identity\") +\n   labs(x = \"大陸\", y = \"人間開発指数の平均値\") +\n   theme_gray(base_family = \"HiraginoSans-W3\")\n\n　先ほどのグラフを見ると、大陸がアジア、アフリカ、アメリカ、オセアニア、ヨーロッパ順となっている。これをアルファベット順に並べ替える、つまり、アフリカ、アメリカ、アジア、ヨーロッパ、オセアニアの順番にするにはどうすれば良いだろうか。答えはContinet_J列をfactor化し、アフリカ、アメリカ、アジア、ヨーロッパ、オセアニア順にすることだ。df2をggplot()関数に渡す前にmutate()を入れ、そこでContinent_J列をfactor化すれば良い。\n\ndf2 %>%\n   mutate(Continent_J = factor(Continent_J, \n                               levels = c(\"アフリカ\", \"アメリカ\", \"アジア\", \n                                          \"ヨーロッパ\", \"オセアニア\"))) %>% \n   ggplot() +\n   geom_bar(aes(x = Continent_J, y = HDI), stat = \"identity\") +\n   labs(x = \"大陸\", y = \"人間開発指数の平均値\") +\n   theme_bw() # Black and Whiteテーマも使ってみよう\n\n\n\n\n\n\n\n\n　ただし、df2を見ると表の順番はアルファベット順になっている。\n\ndf2\n\n# A tibble: 5 × 3\n  Continent   HDI Continent_J\n  <chr>     <dbl> <chr>      \n1 Africa    0.553 アフリカ   \n2 America   0.742 アメリカ   \n3 Asia      0.723 アジア     \n4 Europe    0.861 ヨーロッパ \n5 Oceania   0.782 オセアニア \n\n\n　このように表で表示されている順番は作図の際の順番は一致しない場合がある。この順番を調整するためには、当該変数を予めfactor化しておく必要がある。\n　ここで一つ便利な関数を紹介しよう。それはfct_inorder()関数だ。この関数は{forcats}パッケージに含まれている関数であり、{tidyverse}を読み込む際、一緒に読み込まれるので{tidyverse}を読み込んだら別途読み込む必要はない。このfct_inorder()は()内の変数をfactor化し、各要素順番を表で登場した順番にしてくれる関数だ。現在、df2はアルファベット順になっているので、この表の順番通りにContinent_Jの要素の順番が固定される。\n\ndf2 %>%\n   mutate(Continent_J = fct_inorder(Continent_J)) %>%\n   ggplot() +\n   geom_bar(aes(x = Continent_J, y = HDI), \n            stat = \"identity\") +\n   labs(x = \"大陸\", y = \"人間開発指数の平均値\")\n\n\n\n\n\n\n\n\n\n\n\n次元の追加\n　通常の棒グラフはX軸とY軸のみで構成される2次元グラフである。棒グラフ上の棒には「ある大陸 (X軸) のHDIの平均値 (Y軸)」といった2つの情報が含まれている。つまり、一部の例外を除き、グラフの次元数は情報量を意味し、これは{ggplot2}の幾何オブジェクト内のaes()内で指定する引数の数でもある。以下では次元を増やす方法について紹介する。\n　まず、各政治体制（Polity_Type）に属する国家数の棒グラフを作ってみよう。作図に必要なdata.frameをdf3として用意しておく。\n\ndf3 <- df %>%\n   drop_na(Polity_Type) %>%\n   mutate(Polity_Type = factor(Polity_Type,\n                               levels = c(\"Autocracy\", \"Closed Anocracy\",\n                                          \"Open Anocracy\", \"Democracy\",\n                                          \"Full Democracy\"))) %>%\n   group_by(Polity_Type) %>%\n   summarise(N = n())\n\ndf3\n\n# A tibble: 5 × 2\n  Polity_Type         N\n  <fct>           <int>\n1 Autocracy          19\n2 Closed Anocracy    23\n3 Open Anocracy      20\n4 Democracy          65\n5 Full Democracy     31\n\n\n　棒グラフの作り方はこれまでのやり方と同じである。\n\ndf3 %>%\n   ggplot() +\n   geom_bar(aes(x = Polity_Type, y = N), stat = \"identity\")\n\n\n\n\n\n\n\n\n　この棒グラフが持つ情報は2つである。まず、xで指定した政治体制のタイプ (Polity_Type)、そしてyで指定した国家数 (N)だ。ここに更にもう一つの次元を使いすると使用。たとえば、もう一つの次元として大陸（Continent）を使いするとしよう。この場合、作図に使用するデータには大陸の変数（列）も必要だ。一方、先ほど作成したdf3には大陸の情報がない。まずは、政治体制\\(\\times\\)大陸ごとの国家数を計算し、df4として格納しておく。\n\ndf4 <- df %>%\n   drop_na(Polity_Type) %>%\n   mutate(Polity_Type = factor(Polity_Type,\n                               levels = c(\"Autocracy\", \"Closed Anocracy\",\n                                          \"Open Anocracy\", \"Democracy\",\n                                          \"Full Democracy\"))) %>%\n   group_by(Polity_Type, Continent) %>%\n   summarise(N       = n(),\n             .groups = \"drop\")\n\ndf4\n\n# A tibble: 20 × 3\n   Polity_Type     Continent     N\n   <fct>           <chr>     <int>\n 1 Autocracy       Africa        3\n 2 Autocracy       Asia         14\n 3 Autocracy       Europe        2\n 4 Closed Anocracy Africa       14\n 5 Closed Anocracy America       2\n 6 Closed Anocracy Asia          6\n 7 Closed Anocracy Europe        1\n 8 Open Anocracy   Africa       12\n 9 Open Anocracy   America       4\n10 Open Anocracy   Europe        2\n11 Open Anocracy   Oceania       2\n12 Democracy       Africa       18\n13 Democracy       America      16\n14 Democracy       Asia         15\n15 Democracy       Europe       16\n16 Full Democracy  Africa        1\n17 Full Democracy  America       5\n18 Full Democracy  Asia          3\n19 Full Democracy  Europe       20\n20 Full Democracy  Oceania       2\n\n\n　次元を追加するときにはaes()内に引数を追加すれば良い。棒グラフの棒に更に情報を持たせるのであれば、どうすれば良いだろうか。棒は点・線・面のうち、面に該当する。面であるならば、面の色（fill）、枠線の色（color）、枠線のタイプ（linetype）、透明度（alpha）などがある。xとyのみと構成された多くの図において、もう一つの次元を追加するのであれば、定番は色である。棒グラフの場合、面の色と枠線の色をそれぞれ指定することができるが、ここでは面の色（fill）にマッピングする。やり方はaes()内にfill = Continentを追加するだけだ。\n\ndf4 %>%\n  ggplot() +\n  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = \"identity\")\n\n\n\n\n\n\n\n\n　このような図を想像した人もいれば、少し違うと思う人もいるだろう。沖積されている形の棒グラフは世の中でそこそこ見るものであるが、実は分かりにくい図でもある。たとえば、民主主義（Democracy）の国の中で最も国家数が多い大陸はどこだろうか。この図ではどの大陸もだいたい同じ国家数にも見える。したがって、色分けした棒グラフは通所湯、棒の位置をずらす必要がある。ずらす方法はgeom_bar()内にposition = \"dodge\"を指定するだけだ。注意する点はaes()の中でなく、外に指定することだ。\n\ndf4 %>%\n  ggplot() +\n  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = \"identity\",\n           position = \"dodge\")\n\n\n\n\n\n\n\n\n　あとは図を少しずつ調整してだけであるが、ここでは凡例の位置を変更する方法について紹介する。グラフ全体の見た目などを細かく調整するレイヤーはtheme()である。このtheme()内にlegend.position = \"bottom\"を指定すると、凡例が図の下段へ移動する。デフォルトは\"right\"であり、 　\"top\"は上段、\"none\"は削除を意味する。\"left\"も可能だが、あまり使われない。このtheme()はかなり奥深く、コンソール上で?themeを入力してみれば分かるだろうが、引数の数も数十種類以上だ。これをすべて覚えて使う人は少数だろう。多分、これは{ggplot2}の開発者にとっても同じはずである。必要に応じてヘルプやインターネット検索を活用すれば良い。\n\ndf4 %>%\n  ggplot() +\n  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = \"identity\",\n           position = \"dodge\") +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n　続いて、全く同じ情報を持つグラフでありながら、だいぶ印象が変わるものを紹介しよう。これまで作成した棒グラフは「ある政治体制内の大陸の分布」を知ることに特化している。つまり、「権威主義国家内にはアフリカがXカ国、アジアが…」といったメッセージを伝えるに効果的である。一方、「ある大陸内の政治体制の分布」を見るにはどうすれば良いだろうか。つまり、「アフリカには権威主義がXカ国、民主主義が…」のメッセージを伝えることである。いずれも必要な変数は同じはずである。異なるのはマッピングだけである。たとえば、xとfillを交換してみよう。厳密に言えば棒を並び替えただけなのに、かなり印象が変わってくる。可視化は「伝えたいメッセージを効果的に伝える」ことが重要であり、そのためには試行錯誤が必要だろう。\n\ndf4 %>%\n  ggplot() +\n  geom_bar(aes(x = Continent, y = N, fill = Polity_Type), stat = \"identity\",\n           position = \"dodge\", color = \"white\") +\n  theme_bw() +\n  labs(x = \"Continent\", y = \"Number of Countries\", fill = \"Polity Type\") +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n　最後に次元を追加するもう一つの方法として、ファセット（facet）分割について紹介する。これは色分けを出来る限り抑えたい時に効果的である。特に白黒印刷の場合、識別可能な色は白・グレー・黒の3つくらいだろう。しかし、色の種類は増えると、白黒印刷では識別するのが難しくなる。この場合、プロットの面（=ファセット）を分割することで色の増加が抑制できる。使い方はfacet_wrap(~ 分割の基準となる変数名)のレイヤーを入れるだけだ。df4を使い、政治体制ごとの国家数の棒グラフを作成する。ただし、それぞれの棒グラフは大陸ごとに独立したファセットを持つとする。\n\nbar_plot2 <- df4 %>%\n  ggplot() +\n  geom_bar(aes(x = Polity_Type, y = N), stat = \"identity\") +\n  facet_wrap(~ Continent, ncol = 5) # ncol/nrowで列/行数の指定が可能\n\nbar_plot2\n\n\n\n\n\n\n\n\n　ただし、このbar_plot2は値のラベルが重なっており、非常に読みにくい。この場合、ラベルを回転すると読みやすくなるだろう。横軸の目盛りラベルを修正するためにはtheme()レイヤーを追加し、axis.text.xを指定する必要がある。しかし、theme()レイヤーの中身はかなり複雑であるため、これを覚える必要はない。必要に応じてググれば良いだろう。今後、ラベルの回転が必要な場合は以下のコードからangleだけを修正すれば良い。以下の例は35度回転の例である。\n\nbar_plot3 <- bar_plot2 +\n   labs(x = \"Number of Countries\", y = \"Poltiy Type\") + # ラベル修正\n   theme_minimal() + # テーマを変えてみよう\n   theme(axis.text.x = element_text(angle = 35, vjust = 1, hjust = 1)) # 35度回転\n\nbar_plot3\n\n\n\n\n\n\n\n\n　もう一つの方法としてマッピング交換が考えられる。今の横軸を縦軸にすれば、長い文字列でも問題なく出力できるだろう。\n\nbar_plot4 <- df4 %>%\n  ggplot() +\n  geom_bar(aes(x = N, y = Polity_Type), stat = \"identity\") +\n  labs(x = \"Number of Countries\", y = \"Poltiy Type\") +\n  facet_wrap(~ Continent, ncol = 5) + # 5列のファセット分割\n  theme_minimal(base_size = 12)       # フォントサイズの調整も可能\n\nbar_plot4"
  },
  {
    "objectID": "materials/visualization2.html#図の保存",
    "href": "materials/visualization2.html#図の保存",
    "title": "第13回講義資料",
    "section": "図の保存",
    "text": "図の保存\n　作成した図をファイルとして保存する時には、まずベクトルとビットマップ、どのフォーマットで保存するかを考える必要がある。ベクトル画像（ 図 2 (a) ）の拡張子は.pdf（推奨）、.svgなどがあり、これらのファイルは図をいくら拡大しても図が綺麗なままだという利点がある。また、複雑な図（例えば、点が数百万個ある散布図など）でないなら、ファイルサイズも比較的小さい。ビットマップ画像（ 図 2 (b) ）の拡張子は.png（推奨）、.bmp、.jpg（= .jpeg）などがあり、図がいくら複雑でもファイルサイズが安定するといったメリットがある。しかし、拡大すると図がカクカクする場合がある。高い解像度（DPI）にすると、拡大しても綺麗だが、ファイルサイズに注意する必要がある。基本的にベクトル画像を推奨するが、使用するワードソフトによってはPDFの図の埋め込みができない場合もある。ビートマップ画像はどのソフトでも確実に埋め込める。\n\n\n\n\n\n\n\n(a) ベクトル画像\n\n\n\n\n\n\n\n(b) ビットマップ画像\n\n\n\n\n図 2: ベクトル vs. ビットマップ\n\n\n　ここではbar_plot3を高解像度の.png形式で保存する方法について解説する。{ggplot2}で作図した図の保存にはggsave()関数が便利だ。たとえば、作業フォルダー内のFigsフォルダにFigure1.pngという名でbar_plot3を保存するとしよう。ただし、予め作業フォルダー内にFigsフォルダーを作成しておく必要がある。図のサイズは幅6インチ、高さ3インチとし、解像度（DPI）は400とする。解像度が高いほどファイルサイズは大きくなるため、適切な解像度を選ぶのが重要だ。モニター画面に表示するだけなら最低150、印刷目的なら最低300はほしい。また、図の保存時、文字化けを防いでくれる{ragg}パッケージがあるが、これも予めインストールしておこう（NIIオンライン分析システムでは導入済み）。ggsave()の使い方の例は以下の通りである。\n\nggsave(filename = \"Figs/Figure1.png\", # 保存先とファイル名\n       plot     = bar_plot3,          # 保存する図のオブジェクト名\n       width    = 6,                  # 図の幅 (インチ)\n       height   = 3,                  # 図の高さ (インチ)\n       dpi      = 400,                # 解像度\n       device   = ragg::agg_png)      # 文字化け防止"
  },
  {
    "objectID": "materials/visualization2.html#ヒストグラム",
    "href": "materials/visualization2.html#ヒストグラム",
    "title": "第13回講義資料",
    "section": "ヒストグラム",
    "text": "ヒストグラム\n\n変数の分布\n　ヒストグラムは連続変数（=間隔尺度と比率尺度）の分布を確認する普遍的な可視化方法です。実習用データの例だと、大陸（Continent）列は離散変数（=名目尺度と順序尺度）であり、名目変数の分布は「アジアはXXカ国、アフリカはXXカ国、…」といった形で示され、これまで見てきた棒グラフで可視化する事ができる。一方、変数が連続変数の場合はヒストグラムと箱ひげ図が頻繁に使われる。\n　以上の例はあくまでも一つの変数の分布を確認するものである。変数が2つになると、分布よりも2つの変数間の関係を確認することとなる。これは次回に紹介する散布図（連続変数\\(\\times\\)連続変数）と折れ線グラフ（順序変数\\(\\times\\)連続変数）で可視化することができる1。\n\n\nヒストグラムの作成\n　ヒストグラムの見た目は棒グラフと非常に似ている。棒グラフとヒストグラムの違いは棒と棒の間に隙間があるかないかである。棒グラフの場合は隙間がある。横軸が大陸の棒グラフの場合、アフリカとアジアの間の値というものは存在しない。なぜなら、名目尺度はそもそも数字でないか、数値であってもその数値の値に意味がないからだ。また、順序変数の場合、1位と2位の間の値は存在しない。つまり、1.5位といった順位は存在しない。一方、人間開発指数のような連続変数は0.1と0.2の間には無数の値が存在する。棒を並べるとしたら隙間なく棒を並べる必要があろう。\n\n\n\n\n\n\n\n\n\n　それでも見た目は棒グラフと非常に似ているため、それぞれの棒には棒の横軸上の位置と高さという情報が含まれている。ただし、{ggplot2}を使ったヒストグラムの作成は非常に簡単である。{ggplot2}ではgeom_histogram()を使用するが、ヒストグラムを出力する変数をxにマッピングするだけで、棒の高さは自動的に計算される。つまり、yに対してマッピングを行う必要はなく、xのみで十分である。それではdf内の人間開発指数（HDI_2018）のヒストグラムを作成してみよう。\n\ndf %>%\n  ggplot() +\n  geom_histogram(aes(x = HDI_2018)) # HDI_2018のヒストグラム\n\n\n\n\n\n\n\n\n　ヒストグラムは連続変数の分布を素早く確認することが目的である。たとえば、分布において峰がいくつか、峰がある場合、どの辺が最も度数/密度が高いかを素早く判断できれば良いヒストグラムと言えよう。棒の数を調整する。\n　以下の3つのヒストグラムを比較してみよう。 図 3 (a) はヒストグラムが非常にギザギザしている。峰が10個くらいはありそうだ。一方、 図 3 (b) だと0.5と0.8周辺に大きな2つの峰があるように見える。最後に 図 3 (c) では0.8周辺に1つの峰が確認できる。\n\n\n\n\n\n\n\n(a) 棒の幅が狭いヒストグラム\n\n\n\n\n\n\n\n(b) 棒の幅が中程度のヒストグラム\n\n\n\n\n\n\n\n(c) 棒の幅が広いヒストグラム\n\n\n\n\n図 3: 2つのヒストグラム\n\n\n　この3つの図の中で、良い図はなんだろうか。まず、 図 3 (c) はあまりにも多くの情報が失われている。たとえば、0.5周辺の峰という情報がない。一方、 図 3 (b) は情報が多すぎる。その意味で 図 3 (b) が適切だろう。しかし、これは作図する側の人が決めるものであり、いくつかの図を出して比較してみるのが良いだろう。以上の3つの図は、ヒストグラムの棒の数を調整したものである。棒の数はgeom_histogram()内、aes()の外にbins引数を指定することで変更することができる。たとえば、 図 3 (b) は棒が10本のヒストグラムである2。これを再現するためにはbins = 10を指定すれば良い。ちなみに、デフォルトはbins = 30となっている。\n\ndf %>%\n  ggplot() +\n  geom_histogram(aes(x = HDI_2018), bins = 10) # 棒を10本にする\n\n\n\n\n\n\n\n\n　棒の本数が少ないことは、棒の幅が広いことを意味する。これは棒の数でなく、棒の幅から見た目を調整することもできることを意味し、geom_histogram()内、aes()の外にbinwidth引数を指定することで調整可能である。注意点としてはbinsとbinswidthは片方のみ指定可能で両方指定することは出来ないことだ。\n\ndf %>%\n  ggplot() +\n  geom_histogram(aes(x = HDI_2018), binwidth = 0.05) # 棒の幅を0.05にする\n\n\n\n\n\n\n\n\n　ヒストグラムをより見やすくするコツとして、棒の枠線を追加することも考えられる。データ・インク比の観点から見ると枠線という視覚情報が追加されるので余計なものかも知れないが、枠線を入れるかどうかは作図する側が判断すれば良い。棒の枠線はgeom_histogram()内、aes()の外にcolor引数を指定可能であり、棒の面の色が黒に近いので枠線は白（\"white\"）に指定してみよう。\n\nhist_plot1 <- df %>%\n  ggplot() +\n  geom_histogram(aes(x = HDI_2018), binwidth = 0.05, color = \"white\") +\n  labs(x = \"Human Development Index (2018)\", y = \"Number of Countries\")\n\nhist_plot1\n\n\n\n\n\n\n\n\n　最後に、横軸の目盛りを変更してみよう。今は目盛りが0.4、0.6、0.8、1.0の0.2kあん描くとなっている。この目盛りを調整するレイヤーはX軸の場合はscale_x_*()、Y軸の場合はscale_y_*()を使う。*の箇所には各軸の尺度を指定する。ヒストグラムは横軸も縦軸も連続した値であるので、scale_x_continuous()、scale_y_continuous()を使う。ここではX軸の目盛りを変更するのでscale_x_continuous()を使ってみよう。必要な引数は目盛りの位置を指定するbreaks引数、目盛りのラベルを意味するlabels引数だ。それぞれ長さ1以上のベクトルを指定すれば良いが、breaksとlabelsに使用する実引数（=ベクトル）の長さは同じ長さである必要がある。また、labelsにはcharacter型ベクトルを指定することもできる。\n　先ほど作成したhist_plot1に目盛り変更のレイヤを追加してみよう。目盛りは0.4から1.0まで0.1間隔で付け、目盛りラベルもそれぞれ対応する値を指定する。公差0.1の等差数列ベクトルなのでseq()関数が便利だろう。目盛り調整済みのヒストグラムはhist_plot2として格納、出力してみよう。\n\nhist_plot2 <- hist_plot1 +\n   scale_x_continuous(breaks = seq(0.4, 1.0, by = 0.1),\n                      labels = seq(0.4, 1.0, by = 0.1))\n\nhist_plot2\n\n\n\n\n\n\n\n\n\n\n次元の追加\n　ヒストグラムにもう一つの次元を追加する場合、棒グラフと同じ技が使える。つまり、面の色分け、またはファセット分割である。棒グラフと異なる点は色分けよりもファセット分割の方が圧倒的に推奨される点だ。\n　まずはファセット分割から見よう。hist_plot2のヒストグラムは大陸（Continent）ごとに分ける場合、棒グラフと同様facet_wrap(~Continent)で分割できる。今回は2行3列で出力してみよう。facet_wrap()内にnrow = 2、またはncol = 3を追加するだけだ。\n\nhist_plot2 +\n   facet_wrap(~Continent, nrow = 2)\n\n\n\n\n\n\n\n\n　それでは色分けの例を見てみよう。棒グラフと同様、aes()内にfillを指定すれば良いが、注意すべき点としては棒グラフのようにposition = \"identity\"を追加する必要がある点だ。それではdfのOECDをリコーディング（1なら\"OECD Members\"、それ以外は\"Others\"）し、OECDの値ごとにヒストグラムの色分けをしてみよう。\n\ndf %>%\n   mutate(OECD = if_else(OECD == 1, \"OECD Members\", \"Others\")) %>%\n   ggplot() +\n   geom_histogram(aes(x = HDI_2018, fill = OECD), position = \"identity\",\n                  binwidth = 0.05, color = \"white\") +\n   labs(x = \"Human Development Index (2018)\", y = \"Number of Countries\",\n        fill = \"\")\n\n\n\n\n\n\n\n\n　このヒストグラムには深刻な問題がある。それはOECD加盟国の棒が非加盟国の棒の後ろに存在するため、一部の棒が消えているということだ。これを避けるためには棒をやや透明にする必要がある。透明度の調整はalphaで引数で行う。今回は全ての棒に対して適用するのでaes()の外側にalphaを指定する。alphaが1なら不透明、0なら透明となる。今回はalpha = 0.5程度に調整してみよう。\n\ndf %>%\n   mutate(OECD = if_else(OECD == 1, \"OECD Members\", \"Others\")) %>%\n   ggplot() +\n   geom_histogram(aes(x = HDI_2018, fill = OECD), position = \"identity\",\n                  binwidth = 0.05, color = \"white\", alpha = 0.5) +\n   labs(x = \"Human Development Index (2018)\", y = \"Number of Countries\",\n        fill = \"\")\n\n\n\n\n\n\n\n\n　このように非加盟国の棒の後ろに加盟国の棒が隠されていることが分かる。人によってはこのような色分けヒストグラムでも良いと思うかも知れない。しかし、色分けのヒストグラムはせいぜい2色までが限界である。もし、3色以上ならどうなるだろうか。たとえば、大陸（Continent）の値ごとに色分けをすればどうなるだろうか。\n\ndf %>%\n   ggplot() +\n   geom_histogram(aes(x = HDI_2018, fill = Continent), position = \"identity\",\n                  binwidth = 0.05, color = \"white\", alpha = 0.5) +\n   labs(x = \"Human Development Index (2018)\", y = \"Number of Countries\",\n        fill = \"\")\n\n\n\n\n\n\n\n\n　我々はこのヒストグラムから一体どのような情報が読み取れるだろうか。\n　ちなみに、position = \"identity\"がない場合、一つのヒストグラムのうち、各大陸が占める割合を見せることができる。ただし、これも読みづらい図であることには変わりない。\n\ndf %>%\n   ggplot() +\n   geom_histogram(aes(x = HDI_2018, fill = Continent), \n                  binwidth = 0.05, color = \"white\") +\n   labs(x = \"Human Development Index (2018)\", y = \"Number of Countries\",\n        fill = \"\")"
  },
  {
    "objectID": "materials/visualization1.html",
    "href": "materials/visualization1.html",
    "title": "第12回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/rmarkdown.html",
    "href": "materials/rmarkdown.html",
    "title": "第5回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/rmarkdown.html#rmdファイルの作成",
    "href": "materials/rmarkdown.html#rmdファイルの作成",
    "title": "第5回講義資料",
    "section": "Rmdファイルの作成",
    "text": "Rmdファイルの作成\n手順1: RStudioを起動し、プロジェクトを作成する。\n手順2: File > New > R Markdown…を選択する。\n\n\n\n\n\n\n\n\n\n手順3: OKをクリックする。\n\nこの段階で文書のタイトル（Title:）と作成者名（Author:）を指定することもでKるが、手順4で修正することもできるからここではOKをクリックしても良い。\n\n\n\n\n\n\n\n\n\n\n手順4: タイトル情報などを以下のように修正する。\n変更前\n---\ntitle: \"Untitled\"\noutput: html_document\n---\n変更後\n---\ntitle: \"はじめてのR Markdown\"\nauthor: \"関大花子\"\ndate: \"2022年 5月 12日\"\noutput: html_document\n---\n\n\n\n\n\n\n自動的に日付を付けたい\n\n\n\ndate:の内容をdate: `r Sys.Date()`に修正するとKnitした日付が自動的につけられる。\n\n\n手順5: ファイルを保存する。ファイル名は適宜付けること。\n\nファイルの保存はFile > Saveか、ショートカットキー（macOSだとCmd (⌘) + S、WindowsだとControl (Ctrl) + S）で出来る。\n\n手順6: Sourceペイン上段のKnitをクリックする。\n\nKnitは「ニット」と読む。\n\n\n\n\n\n\n\n\n\n\n手順7: 新しいウィンドウ、またはViewerペインに出力物が表示される。\n\n\n\n\n\n\n出力物が新しいウィンドウに表示されて面倒くさい\n\n\n\n宋が推奨するRStudioの設定だと出力物がRStudioと同じ画面（Viewerペイン）に表示される。具体的にはTools > Global Options… > R Markdownへ移動し、Show output preview in:をWindowからViewer Paneに変更すれば良い。"
  },
  {
    "objectID": "materials/rmarkdown.html#markdown文法の基本",
    "href": "materials/rmarkdown.html#markdown文法の基本",
    "title": "第5回講義資料",
    "section": "Markdown文法の基本",
    "text": "Markdown文法の基本\n　ここでは本講義の課題を遂行するための必要最低限のことのみ解説する。R Markdwonの詳細については教科書の第21章（R Markdown [基礎]）を参照すること。\n\n改行\n　Markdownにおける改行はやや特殊である。特殊といっても難しいことではない。普段よりもう一行改行するだけだ。Markdownの場合、1回の改行は改行として判定されず、同じ行の連続と認識する。たとえば、Inputのように入力するとOutputのように文章1と文章2が繋がってしまう。\nInput:\n文章1\n文章2\nOutput:\n文章1 文章2\n　文章1と文章2を改行するためにはもう一行、改行する必要がある。以下の例を見てみよう。\nInput:\n文章1\n\n文章2\nOutput:\n文章1\n文章2\n　こうすることで段落間の間隔を強制的に入れることとなり、作成者側にも読みやすい文書構造になるといった利点がある1。\n\n\n強調\n　文章の一部を強調する方法として太字、イタリック2、アンダーラインがあり、強調ではないが、ついでに取り消し線についても紹介する。いずれも強調したい箇所を記号で囲むだけだ。\nInput:\n文章の一部を**太字**にしてみましょう。\n\n*イタリック*もいいですね。\n\n~~取り消し線~~はあまり使わないかも。\n\n<u>アンダーライン</u>はHTMLタグを使います。\nOutput:\n文章の一部を太字にしてみましょう。\nイタリックもいいですね。\n取り消し線はあまり使わないかも。\nアンダーラインはHTMLタグを使います。\n\n\n箇条書き\n　箇条書きには順序なしと順序付きがある。順序なしの場合*または-の後に半角スペースを1つ入れるだけである。また、3文字以上の字下げで下位項目を追加することもできる。\nInput:\n- 項目1\n   - 項目1-1\n   - 項目1-2\n      - 項目1-2-1\n         - 項目1-2-1-1\n      - 項目1-2-2\n- 項目2\n- 項目3\nOutput:\n\n項目1\n\n項目1-1\n項目1-2\n\n項目1-2-1\n\n項目1-2-1-1\n\n項目1-2-2\n\n\n項目2\n項目3\n\n　順序付き箇条書きは、これは-（または*）を数字.に換えるだけである。順序なしの場合と違って数字の後にピリオド（.）が付くことに注意すること。また、順序付き箇条書きと順序なし箇条書きは組み合わせて使うことも出来る。\nInput:\n1. 項目1\n   1. 項目1-1\n   2. 項目1-2\n2. 項目2\n   * 項目2-1\n   * 項目2-2\n3. 項目3\nOutput:\n\n項目1\n\n項目1-1\n項目1-2\n\n項目2\n\n項目2-1\n項目2-2\n\n項目3\n\n\n\n見出し\n　章、節、段落のタイトルを付ける際は#を使う。#の数が多いほど文字が小さくなる。章の見出しを##にするなら節は###、小節または段落は####が適切だろう。R Markdownの使用上、見出しは####まで使える。\nInput:\n# 見出し1\n## 見出し2\n### 見出し3\n#### 見出し4\nOutput:\n見出し1\n見出し2\n見出し3\n見出し4\n\n\n区切り線\n　区切り線は---または***を使う。ただし、---または***の前後には必ず改行を行うこと。とりわけ、---の前に空いた行がないと、見出しとして認識されるケースがある。\nInput:\n---\nOutput:\n\n\n\n表\n　Markdownの表は非常にシンプルな書き方をしている。行は改行で、列は|で区切られる。ただ、表の第1行はヘッダー（変数名や列名が表示される行）扱いとなり、ヘッダーと内容の区分は|---|で行う。以下はMarkdownを利用した簡単な表の例である。ここでは可読性のために、適宜スペースを入れたが、スペースの有無は結果に影響を与えない。\nInput:\n|ID   |Name     |Math    |English |Favorite food|\n|:---:|---------|-------:|-------:|-------------|\n|1    |SONG     |15      |10      |Ramen        |\n|2    |Yanai    |100     |100     |Cat food     |\n|3    |Shigemura|80      |50      |Raw chicken  |\n|4    |Wickham  |80      |90      |Lamb         |\nOutput:\n\n\n\nID\nName\nMath\nEnglish\nFavorite food\n\n\n\n\n1\nSONG\n15\n10\nRamen\n\n\n2\nYanai\n100\n100\nCat food\n\n\n3\nShigemura\n80\n50\nRaw chicken\n\n\n4\nWickham\n80\n90\nLamb\n\n\n\n　1行目はヘッダーであり、太字かつ中央揃えになる。2行目以降はデフォルトでは左揃えになるが、|---|をいじることによって当該列の揃えを調整できる。|:---|は左 (デフォルト)、|---:|は右、|:---:|は中央揃えになる。また-の個数は1個以上なら問題なく、|-|も|---|も同じである。\n\n\n画像\n　R Markdownに画像を入れるには![代替テキスト](ファイル名)と入力する。画像ファイル名はパス付きを指定する必要がある。[代替テキスト]は画像を読み込めなかった場合に出力されるテキストを意味する。これは画像が読み込めなかった場合の代替テキストでもあるが、視覚障害者用のウェブブラウザーのためにも使われる。これらのウェブブラウザーはテキストのみ出力されるものが多く、画像の代わりには代替テキストが読み込まれる。また、場合によっては代替テキストが図のタイトル（キャプション）として機能する場合もある（以下の例がそうである）。この代替テキストは必須でないため![](ファイル名)でも画像の添付は出来る。\n　例えば、Figsフォルダー内のfavicon.pngというファイルを読み込む場合、以下のように書く。\nInput:\n![『私たちのR』ロゴ](Figs/favicon.png)\nOutput:\n\n\n\n『私たちのR』ロゴ\n\n\n\n\nリンク\n　ハイパーリンクは[テキスト](URL)のように書く。[]内は実際に表示されるテキストであり、()は飛ばすURLとなる。\nInput:\n毎日1回は[SONGのホームページ](https://www.jaysong.net)へアクセスしましょう。\nOutput:\n毎日1回はSONGのホームページへアクセスしましょう。\n\n\n脚注\n　脚注は[^固有識別子]と[^固有識別子]: 脚注内容の2つの要素が必要だ。まず、文末脚注を入れる箇所に[^xxxx]を挿入する。xxxxは任意の文字列で良い。しかし、同じR Markdown内においてこの識別子は被らないように注意すること（固有識別子だから）。実際の脚注の内容は[^xxxx]: 内容のように入力する。これはどこに位置しても問題ない。文書の途中でも、最後に入れても、脚注の内容は文末に位置する。ただし、脚注を入れる段落のすぐ後の方が作成する側としては読みやすいだろう。\nInput:\nこれは普通の文章です[^foot1]。\n\n[^foot1]: これは普通の脚注です。\nOutput:\nこれは普通の文章です3。\n\n\n数式\n　以下の内容（数式）は少なくとも本講義（ミクロ政治データ分析実習）では使わないため、飛ばしても良い。\n　インライン数式は$数式$で埋め込むことができる。数式は\\(\\LaTeX\\)の書き方とほぼ同じだ。ちなみに、R Markdownの数式はMathJaxによってレンダリングされる。このMathJaxライブラリはHTMLに埋め込まれているのではないため、インターネットに接続せずにHTMLファイルを開くと数式が正しく出力されない可能性がある。\nInput:\nアインシュタインと言えば、$e = mc^2$でしょう。\nOutput:\nアインシュタインと言えば、\\(e = mc^2\\)でしょう。\n　数式を独立した行として出力する場合は、$の代わりに$$を使用する。\nInput:\n独立した数式の書き方\n\n$$\ny_i \\sim \\text{Normal}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma).\n$$\n\nOutput:\n独立した数式の書き方\n\\[\ny_i \\sim \\text{Normal}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma).\n\\]\n　もし数式が複数の行で構成されている場合は$$内にaligned環境（\\begin{aligned} … \\end{aligned}）を使用する。むろん、使い方は\\(\\LaTeX\\)と同じである。\nInput:\n複数の行にわたる数式の書き方\n\n$$\n\\begin{aligned}\n  Y_i      & \\sim \\text{Bernoulli}(\\theta_i), \\\\\n  \\theta_i & = \\text{logit}^{-1}(y_i^*), \\\\\n  y_i^*    & = \\beta_0 + \\beta_1 x_1 + \\beta_2 z_1.\n\\end{aligned}\n$$\n\nOutput:\n複数の行にわたる数式の書き方\n\\[\n\\begin{aligned}\n  Y_i      & \\sim \\text{Bernoulli}(\\theta_i), \\\\\n  \\theta_i & = \\text{logit}^{-1}(y_i^*), \\\\\n  y_i^*    & = \\beta_0 + \\beta_1 x_1 + \\beta_2 z_1.\n\\end{aligned}\n\\]\n　ここまで見れば\\(\\LaTeX\\)ユーザーはお分かりだろうが、$$の中には\\(\\LaTeX\\)コマンドが使える。たとえば、行列を作成する際は以下のように\\begin{bmatrix}環境を使う。\nInput:\n行列の書き方\n\n$$\nX = \\begin{bmatrix}\n  x_{11} & x_{12} \\\\\n  x_{21} & x_{22} \\\\\n  x_{31} & x_{32}\n\\end{bmatrix}.\n$$\n\nOutput:\n行列の書き方\n\\[\nX = \\begin{bmatrix}\n  x_{11} & x_{12} \\\\\n  x_{21} & x_{22} \\\\\n  x_{31} & x_{32}\n\\end{bmatrix}.\n\\]\n\n\n引用\n　引用の際は文章の最初に>を入れるだけだ。>の後に半角のスペースを1つ入れること。\nInput:\n「政治とは何か」についてイーストンは以下のように定義しました。\n\n> [A] political system can be designated as those interactions through which values are authoritatively allocated for a society.\nOutput:\n「政治とは何か」についてイーストンは以下のように定義しました。\n\n[A] political system can be designated as those interactions through which values are authoritatively allocated for a society.\n\n\n\nコメント\n　R Markdownにもコメントを付けることができる。とりあえず書いたが要らなくなった段落や文章があって、消すことがもったいない場合はコメントアウトするのも1つの方法だろう。ただし、Rのコメントアウトの方法は#だったが、これはR Markdownでは見出しの記号である。R Markdownのコメントは<!--と-->で囲む必要がある。\nInput:\n文章1\n\n<!--\nここはコメントです。\n-->\n\n文章2\nOutput:\n文章1\n\n文章2"
  },
  {
    "objectID": "materials/rmarkdown.html#rコード",
    "href": "materials/rmarkdown.html#rコード",
    "title": "第5回講義資料",
    "section": "Rコード",
    "text": "Rコード\n\nRコードの入れ方\n　以上の内容まで抑えると、R Markdownを使って、簡単な文法のみで構造化された文書が作成できる。しかし、R Markdownの意義は文章とコード、結果が統合されることだろう。それでは文書内にRコードとその実行結果を入れる方法を紹介する。\n　コードは```{r}と```の間に入力するだけだ。これでコードと結果が同時に出力される。たとえば、print(\"Hello World!\")を走らせるコードを入れてみよう。\n\n\n\n\n\n\n`はどこにありますか。\n\n\n\nこれは使用するキーボードの配列によって異なる。日本語配列キーボードの場合、「@」と同じ所に位置するケースが多い。ただ、日本語配列は世界標準からかなりずれている配列を採用しており、日本語以外の配列では主に「〜」と同じ所に位置する。たとえば、宋はUNIX配列（HHKB）を使っているため、キーボードの右上に位置するが、左上に位置するケースも多い。ちなみに単一引用符（'; 「シングル・クォーテーション」とも呼ばれる）とは別の記号であることに注意すること。\n\n\nInput:\n\"Hello World!\"を出力するコード\n\n```{r, error=TRUE}\nprint(\"Hello World!\")\n```\nOutput:\n“Hello World!”を出力するコード\n\nprint(\"Hello World!\")\n\n[1] \"Hello World!\"\n\n\n　```{r}と```で囲まれた範囲をR Markdownではチャンク（Chunk）と呼ぶ。このチャンク内ではRと全く同じことが出来る。パッケージやデータの読み込み、オブジェクトの生成、データハンドリング、可視化など、全てが出来る。可視化の方法については第12回講義以降の講義で解説するが、ここでは例として紹介する。\nInput: 　\n```{r}\n# パッケージの読み込み\nlibrary(tidyverse)\n# R内蔵データセットのirisを使った可視化\niris %>%\n  mutate(Species2 = recode(Species,\n                           \"setosa\"     = \"セトナ\",\n                           \"versicolor\" = \"バーシクル\",\n                           \"virginica\"  = \"バージニカ\")) %>%\n  ggplot() +\n  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +\n  labs(x = \"萼片の長さ (cm)\", y = \"萼片の幅 (cm)\", color = \"品種\") +\n  theme_minimal(base_size = 12)\n```\nOutput:\n\n# パッケージの読み込み\nlibrary(tidyverse)\n# R内蔵データセットのirisを使った可視化\niris %>%\n  mutate(Species2 = recode(Species,\n                           \"setosa\"     = \"セトナ\",\n                           \"versicolor\" = \"バーシクル\",\n                           \"virginica\"  = \"バージニカ\")) %>%\n  ggplot() +\n  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +\n  labs(x = \"萼片の長さ (cm)\", y = \"萼片の幅 (cm)\", color = \"品種\") +\n  theme_minimal(base_size = 12)\n\n\n\n\n\n\n\n\n\n\nインラインコード\n　他にも文中にRコードを埋め込むこともできる（これをinline codeと呼ぶ）。例えば、ベクトルX <- c(2, 3, 5, 7, 12)があり、この平均値を文中で示したいとする。むろん、文中に「5.8」と書いても問題なし。しかし、実はXの入力ミスが見つかり、実はc(2, 3, 5, 7, 11)になったらどうなるだろうか。この「5.8」と書いた箇所を見つけて5.6と修正したいといけない。これは非常に面倒な作業であり、ミスも起こりやすい。文中にRコードを入れるためには`r Rコード`のように入力する。\nInput:\n```{r}\nX <- c(2, 3, 5, 7, 11)\n```\n\n変数`X`の平均値は`r mean(X)`です。\nOutput:\n\nX <- c(2, 3, 5, 7, 11)\n\n変数Xの平均値は5.6です。\n　ここで`X`だが、単に`で囲まれただけだとコードのように表示してくれるものの、そのコードは実行されない。これは主に文中に短いコードのみを入れたり、変数名、関数名を示す際に使う機能である。\n\n\nコードの非表示\n　既に説明した通り、R MakrdownはR + Markdownである。Rはチャンク、Markdownはチャンク外の部分に相当し、それぞれのカスタマイズができる。分析のコードと結果はチャンクにオプションを付けることで修正できる。ここではチャンクのオプションについて解説する。\n　チャンクは```{r}で始まるが、実は{r}の箇所にオプションを追加することができる。具体的には{r チャンク名, オプション1, オプション2, ...}といった形だが、ここでは2つのオプションを紹介する。\n　まずはコードを表示せず、結果のみを表示させる方法である。R Markdownでレポートや論文を執筆する場合、最終的に提出するものにコードは不要であろう4。R Markdownではコードと結果が同時に表示されるが、片方（あるいは両方）を非表示にすることができる。{r}の内部にecho = FALSEを指定すれば、コードは表示されず、結果のみ表示される。\nInput:\n```{r, echo = FALSE}\nprint(\"Rは楽しい!\")\n```\nOutput:\n\n\n[1] \"Rは楽しい!\"\n\n\n\n\n結果の非表示\n　一方、{r}の内部にeval = FALSEを指定すれば、結果は表示されず、コードのみ表示される。本ページのようにマニュアルや技術書を書く際、時々使われる。\nInput:\n```{r, eval = FALSE}\nprint(\"Rは楽しい!\")\n```\nOutput:\n\nprint(\"Rは楽しい!\")\n\n　このようにコードのみ表示され、結果は表示されない。チャンクには他にも様々なオプションを付けることができる。出力される図の大きさ、位置、解像度、コードの非常時、結果の非表示、チャンク間の依存関係などが指定できるが、これらについては教科書の第21章（R Markdown [基礎]）を参照すること。\n　また、R Markdownでは様々な形式の文書（以外のものも）が作成可能である。たとえば、宋のホームページ5や本講義の教科書6、本講義のスライド7もR Markdownで作成されたものであり、本サポートページもR Markdownに類似するQuartoで作成されている。他にも履歴書（{vitae}、{pagedown}パッケージ）、ポスター・名刺（{pagedown}パッケージ）、Rパッケージの開発（{fusen}パッケージ）、Webアプリケーション（{shiny}パッケージ）、Rのチュートリアル（{learnr}パッケージ）などもR Markdownで作成可能である。"
  },
  {
    "objectID": "materials/rmarkdown.html#教科書",
    "href": "materials/rmarkdown.html#教科書",
    "title": "第5回講義資料",
    "section": "教科書",
    "text": "教科書\n\n『私たちのR: ベストプラクティスの探求』の第21章: R Markdown [基礎]"
  },
  {
    "objectID": "materials/install.html",
    "href": "materials/install.html",
    "title": "第2回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/handling2.html",
    "href": "materials/handling2.html",
    "title": "第10回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/handling2.html#記述統計量",
    "href": "materials/handling2.html#記述統計量",
    "title": "第10回講義資料",
    "section": "記述統計量",
    "text": "記述統計量\n　記述統計量（descriptive statistics）とはある変数が持つ情報を要約した数値である。例えば、10人の学生の数学成績が格納されている以下のようなnumeric型ベクトルがあるとしよう。7番目の学生は試験を受けたものの、ポンコツな教師が解答用紙を紛失して欠損値となっている。\n\nMathScore <- c(82, 45, 69, 94, 88, 73, NA, 51, 90, 63)\nMathScore\n\n [1] 82 45 69 94 88 73 NA 51 90 63\n\n\n　このクラスの数学成績について語る時、「うちのクラスの数学成績は82、45、69、94、…、63点ですよ」という人はいないだろう。数人のクラスならまだしも、数十人のクラスならあり得ない。我々は普段、「うちのクラスの数学成績はだいたいYY点ですよ」とか、「真ん中の成績はXX点ですよ」と言うだろう。また、クラス内の成績の格差/ばらつきを語るときも標準偏差や範囲（「できる子とできない子の点差は49点ですよ」）を言うのが普通である。このように元の長い情報を一つの数値として要約したものが記述統計量である。\n　たとえば、MathScoreを代表する値（=代表値）としては平均値（mean）、中央値（median）、最頻値（mode）などがある。\n\n# 平均値\nmean(MathScore, na.rm = TRUE) \n\n[1] 72.77778\n\n# 中央値\nmedian(MathScore, na.rm = TRUE)\n\n[1] 73\n\n\n　また、MathScoreの格差、ばらつきの具合としては分散（variance）、標準偏差（standard deviation）、四分位範囲（interquartile range）、範囲（range）がある。\n\n# 不偏分散\nvar(MathScore, na.rm = TRUE)\n\n[1] 302.4444\n\n# 不偏標準偏差\nsd(MathScore, na.rm = TRUE)\n\n[1] 17.39093\n\n# 四分位範囲\nIQR(MathScore, na.rm = TRUE)\n\n[1] 25\n\n# 範囲\nmax(MathScore, na.rm = TRUE) - min(MathScore, na.rm = TRUE)\n\n[1] 49\n\n\n　今回は{dplyr}パッケージを用いて変数の記述統計量を計算する方法を紹介する。まず、今回の実習用データを読み込む。第9回に使用したデータと同じデータを使う。\n\n\n\n　記述統計を計算する関数はsummarise()である。使い方は以下の通りである。\n\nデータフレーム %>%\n  summarise(記述統計の関数(変数名, ...))\n\n　たとえば、Population列の平均値を計算する場合は、\n\ndf %>%\n  summarise(mean(Population))\n\n# A tibble: 1 × 1\n  `mean(Population)`\n               <dbl>\n1          41737773.\n\n\nと入力する。HDI_2018のように欠損値が含まれている変数ならna.rm = TRUEを忘れないようにしよう。\n\ndf %>%\n  summarise(mean(HDI_2018, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  `mean(HDI_2018, na.rm = TRUE)`\n                           <dbl>\n1                          0.713\n\n\n　平均値を計算するmean()以外にも様々な変数が使える。ここでは代表的な記述統計量の関数を紹介する。他にも様々な記述統計量があるが、詳細は教科書第13.1.2章を参照されたい。\n\nmean(): 平均値\nmedian(): 中央値\nsd(): 不偏標準偏差\nvar(): 不偏分散\nIQR(): 四分位範囲\nmin()、max(): 最小値と最大値\n\n　summarise()内には一つの変数、あるいは一つの記述統計量のみ書く必要はない。()内にいくらでも書ける。たとえば、dfのPopulationとAreaの平均値（mean()）と標準偏差（sd()）を計算する場合、計4つの記述統計量を計算することとなる。\n\ndf %>%\n  summarise(mean(Population), # Populationの平均値\n            sd(Population),   # Populationの不偏標準偏差\n            mean(Area),       # Areaの平均値\n            sd(Area))         # Areaの不偏標準偏差\n\n# A tibble: 1 × 4\n  `mean(Population)` `sd(Population)` `mean(Area)` `sd(Area)`\n               <dbl>            <dbl>        <dbl>      <dbl>\n1          41737773.       151270298.      696069.   1872412.\n\n\n　出力結果はデータフレーム（tibble）形式で表示されるが、列名が長く、非常に読みにくい。この列名を修正するためにはsummarise()の後にrename()を使うことで修正することもできるが、summarise()内で指定することもできる。たとえば、dfのPopulationとAreaの平均値（mean()）と標準偏差（sd()）を計算し、結果の列名をMean_Pop、SD_Popなどとする。\n\ndf %>%\n  summarise(Mean_Pop  = mean(Population),\n            SD_Pop    = sd(Population),\n            Mean_Area = mean(Area),\n            SD_Area   = sd(Area))\n\n# A tibble: 1 × 4\n   Mean_Pop     SD_Pop Mean_Area  SD_Area\n      <dbl>      <dbl>     <dbl>    <dbl>\n1 41737773. 151270298.   696069. 1872412.\n\n\n　出力される列名 = 記述統計の関数()を指定することで、このように出力結果が読みやすくなる。"
  },
  {
    "objectID": "materials/handling2.html#グルーピング",
    "href": "materials/handling2.html#グルーピング",
    "title": "第10回講義資料",
    "section": "グルーピング",
    "text": "グルーピング\n　特定の変数の記述統計量を計算する場合はmean()やsd()などの関数のみを使った方が効率的なケースが多い。しかし、グループごとに記述統計量を計算する場合は、{dplyr}パッケージが大変便利である。{dplyr}を使わずに大陸ごとのPPP_per_capitaの平均値を計算するとしよう。たとえば、Continentの値が\"Africa\"である国のPPP_per_capitaの平均値を計算する場合は以下のように書く。\n\n# PPP_per_capitaは欠損値が含まれているため、na.rm = TRUEを指定\n#（指定しないと、結果はNAとなる）\nmean(df$PPP_per_capita[df$Continent == \"Africa\"], na.rm = TRUE)\n\n[1] 5667.087\n\n\n　これを全ての大陸に対して同じ計算を行う場合、以下のようなコードになる。\n\nmean(df$PPP_per_capita[df$Continent == \"Africa\"], na.rm = TRUE)\n\n[1] 5667.087\n\nmean(df$PPP_per_capita[df$Continent == \"America\"], na.rm = TRUE)\n\n[1] 18100.29\n\nmean(df$PPP_per_capita[df$Continent == \"Asia\"], na.rm = TRUE)\n\n[1] 22728.13\n\nmean(df$PPP_per_capita[df$Continent == \"Europe\"], na.rm = TRUE)\n\n[1] 37782.59\n\nmean(df$PPP_per_capita[df$Continent == \"Oceania\"], na.rm = TRUE)\n\n[1] 27572.65\n\n\n　たった5行のコードであるが、一行一行がかなり長く、可読性も優れているとは言えない。ここで{dplyr}のgroup_by()関数が力を発揮する。\n\nデータフレーム名 %>%\n  group_by(グループ化する変数名) %>%\n  summarise(...)\n\n　たとえば、dfのContinentでデータをグループ化し、PPP_per_capitaの平均値を計算する場合、summarise()の前にgroup_by(Continent)を使いしてパイプをつなぐことでContinentの値ごとにPPP_per_capitaの平均値が計算される。\n\n# PPP_per_capitaが欠損している国もあるので、na.rm = TRUEを追加\ndf %>%\n  group_by(Continent) %>%\n  summarise(Mean_PPP = mean(PPP_per_capita, na.rm = TRUE))\n\n# A tibble: 5 × 2\n  Continent Mean_PPP\n  <chr>        <dbl>\n1 Africa       5667.\n2 America     18100.\n3 Asia        22728.\n4 Europe      37783.\n5 Oceania     27573.\n\n\n　コードが3行になっただけではなく、可読性も大きく改善されていることが分かる。group_by()関数は二つ以上の変数でグルーピングすることもできる。たとえば、dfのContinentとG20でデータをグループ化し、HDI_2018の平均値を計算してみよう。\n\ndf %>%\n  group_by(Continent, G20) %>%\n  summarise(Mean_HDI = mean(HDI_2018, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Continent'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 10 × 3\n# Groups:   Continent [5]\n   Continent   G20 Mean_HDI\n   <chr>     <dbl>    <dbl>\n 1 Africa        0    0.550\n 2 Africa        1    0.705\n 3 America       0    0.727\n 4 America       1    0.84 \n 5 Asia          0    0.710\n 6 Asia          1    0.798\n 7 Europe        0    0.859\n 8 Europe        1    0.877\n 9 Oceania       0    0.729\n10 Oceania       1    0.938\n\n\n　Continentの値は5種類、G20の値は2種類であるため、計10個のグループができる。ちなみにこれを{dplyr}を使わず行うなら以下のようなコードになる。\n\nmean(df$HDI_2018[df$Continent == \"Africa\" & df$G20 == 0], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"Africa\" & df$G20 == 1], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"America\" & df$G20 == 0], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"America\" & df$G20 == 1], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"Asia\" & df$G20 == 0], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"Asia\" & df$G20 == 1], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"Europe\" & df$G20 == 0], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"Europe\" & df$G20 == 1], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"Oceania\" & df$G20 == 0], na.rm = TRUE)\nmean(df$HDI_2018[df$Continent == \"Oceania\" & df$G20 == 1], na.rm = TRUE)\n\n　{dplyr}の素晴らしさが分かるだろう。次の内容に進む前に、以下のような謎のメッセージが出力されたのではないだろうか。\n## `summarise()` has grouped output by 'Continent'. You can override using \nthe `.groups` argument.\n　このメッセージの理由は教科書第13.2章に譲るが、この気持ち悪いメッセージをなくすためには、とりあえず、group_by()の後にsummarise()を使う場合、summarise()の最後に.groups = \"drop\"を追加する。\n\ndf %>%\n  group_by(Continent, G20) %>%\n  summarise(Mean_HDI = mean(HDI_2018, na.rm = TRUE),\n            .groups  = \"drop\")\n\n# A tibble: 10 × 3\n   Continent   G20 Mean_HDI\n   <chr>     <dbl>    <dbl>\n 1 Africa        0    0.550\n 2 Africa        1    0.705\n 3 America       0    0.727\n 4 America       1    0.84 \n 5 Asia          0    0.710\n 6 Asia          1    0.798\n 7 Europe        0    0.859\n 8 Europe        1    0.877\n 9 Oceania       0    0.729\n10 Oceania       1    0.938\n\n\n　これで謎のメッセージが出力されなくなっただろう。\n　グルーピングを行う場合、各グループに属するケース数を調べたい場合もあろう。たとえば、大陸ごとにPPP_per_capitaの平均値と標準偏差を出すだけでなく、各大陸に属する国数も表示したいとする。この時に使う関数がn()である。()内に別途の引数は不要である。\n\ndf %>%\n  group_by(Continent) %>%\n  summarise(Mean_PPP = mean(PPP_per_capita, na.rm = TRUE),\n            SD_PPP   = sd(PPP_per_capita, na.rm = TRUE),\n            Cases    = n())\n\n# A tibble: 5 × 4\n  Continent Mean_PPP SD_PPP Cases\n  <chr>        <dbl>  <dbl> <int>\n1 Africa       5667.  6015.    54\n2 America     18100. 12601.    36\n3 Asia        22728. 24067.    42\n4 Europe      37783. 21276.    50\n5 Oceania     27573. 21984.     4\n\n\n　最後に、詳細は解説しないが、across()関数を利用することで、複数の変数に対して複数の記述統計量をより短いコードで計算することができる。たとえば、dfのPopulationからPPP列まで平均値と標準偏差を計算し、結果の変数名は元の変数名_Mean、元の変数名_SDとするコードを書いてみよう。\n\ndf %>%\n  summarise(Population_Mean = mean(Population, na.rm = TRUE),\n            Population_SD   = sd(Population, na.rm = TRUE),\n            Area_Mean       = mean(Area, na.rm = TRUE),\n            Area_SD         = sd(Area, na.rm = TRUE),\n            GDP_Mean        = mean(GDP, na.rm = TRUE),\n            GDP_SD          = sd(GDP, na.rm = TRUE),\n            PPP_Mean        = mean(PPP, na.rm = TRUE),\n            PPP_SD          = sd(PPP, na.rm = TRUE),)\n\n# A tibble: 1 × 8\n  Population_Mean Population_SD Area_Mean  Area_SD GDP_Mean   GDP_SD PPP_Mean\n            <dbl>         <dbl>     <dbl>    <dbl>    <dbl>    <dbl>    <dbl>\n1       41737773.    151270298.   696069. 1872412.  473031. 1999504.  717953.\n# … with 1 more variable: PPP_SD <dbl>\n\n\n　以上の作業は、across()関数を使う場合、以下のようにたった4行でできる。\n\ndf %>%\n  summarise(across(Population:PPP,\n                   .fns = list(Mean = ~mean(.x, na.rm = TRUE),\n                               SD   = ~mean(.x, na.rm = TRUE))))\n\n# A tibble: 1 × 8\n  Population_Mean Population_SD Area_Mean Area_SD GDP_Mean  GDP_SD PPP_Mean\n            <dbl>         <dbl>     <dbl>   <dbl>    <dbl>   <dbl>    <dbl>\n1       41737773.     41737773.   696069. 696069.  473031. 473031.  717953.\n# … with 1 more variable: PPP_SD <dbl>\n\n\n　across()関数の詳細については教科書第13.1章を参照されたい。ただし、無名関数（ラムダ式）の知識が必要である（そこまで難しいものではない）。"
  },
  {
    "objectID": "materials/handling2.html#変数の計算",
    "href": "materials/handling2.html#変数の計算",
    "title": "第10回講義資料",
    "section": "変数の計算",
    "text": "変数の計算\n　以下ではmutate()関数を利用して、データフレームの変数を用いた計算を行い、新しい列として追加する方法を紹介する。mutate()関数の使い方は以下の通りである。\n\nデータフレーム名 %>%\n  mutate(新しい列名 = 計算式)\n\n　ここで、新しい列名が既に存在するの列名である場合、既存の列が上書きされる。一方、データフレームに存在しない列名の場合、新しい列が最後の列として追加される1。\n　ここでは、dfのPopulationをAreaで割り（=人口密度）、Densityという名の列として追加してみよう。{dplyr}を使わずにこの処理を行う場合、以下のようなコードとなる。\n\ndf$Density <- df$Population / df$Area\n\n　一方、{dplyr}のmutate()関数を使用する場合、以下のようなコードになる。\n\ndf %>%\n  mutate(Density = Population / Area)\n\n# A tibble: 186 × 19\n   Country  Population   Area    GDP     PPP GDP_per_capita PPP_per_capita    G7\n   <chr>         <dbl>  <dbl>  <dbl>   <dbl>          <dbl>          <dbl> <dbl>\n 1 Afghani…   38928346 6.53e5 1.91e4  8.27e4           491.          2125.     0\n 2 Albania     2877797 2.74e4 1.53e4  3.97e4          5309.         13781.     0\n 3 Algeria    43851044 2.38e6 1.70e5  4.97e5          3876.         11324.     0\n 4 Andorra       77265 4.7 e2 3.15e3 NA              40821.            NA      0\n 5 Angola     32866272 1.25e6 9.46e4  2.19e5          2879.          6649.     0\n 6 Antigua…      97929 4.4 e2 1.73e3  2.08e3         17643.         21267.     0\n 7 Argenti…   45195774 2.74e6 4.50e5  1.04e6          9949.         22938.     0\n 8 Armenia     2963243 2.85e4 1.37e4  3.84e4          4614.         12974.     0\n 9 Austral…   25499884 7.68e6 1.39e6  1.28e6         54615.         50001.     0\n10 Austria     9006398 8.24e4 4.46e5  5.03e5         49555.         55824.     0\n# … with 176 more rows, and 11 more variables: G20 <dbl>, OECD <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>,\n#   Density <dbl>\n\n\n　出力される画面にDensity列が見当たらない。これは新しく追加されたDensity列が最後の列であり、画面に収まらないからである。むろん、Density列は問題なく追加されており、出力画面の下段に省略されている変数名に含まれていることが分かる。\n　もし、新しく追加される列の順番を指定したい場合はrelocate() 同様、.after、または.beforeを指定すればよい。以下のコードはDensity列をArea列の後に追加するコードである。\n\ndf %>%\n  mutate(Density = Population / Area, \n         .after  = Area)\n\n# A tibble: 186 × 19\n   Country             Population    Area Density     GDP     PPP GDP_per_capita\n   <chr>                    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>          <dbl>\n 1 Afghanistan           38928346  652860   59.6   1.91e4  8.27e4           491.\n 2 Albania                2877797   27400  105.    1.53e4  3.97e4          5309.\n 3 Algeria               43851044 2381740   18.4   1.70e5  4.97e5          3876.\n 4 Andorra                  77265     470  164.    3.15e3 NA              40821.\n 5 Angola                32866272 1246700   26.4   9.46e4  2.19e5          2879.\n 6 Antigua and Barbuda      97929     440  223.    1.73e3  2.08e3         17643.\n 7 Argentina             45195774 2736690   16.5   4.50e5  1.04e6          9949.\n 8 Armenia                2963243   28470  104.    1.37e4  3.84e4          4614.\n 9 Australia             25499884 7682300    3.32  1.39e6  1.28e6         54615.\n10 Austria                9006398   82409  109.    4.46e5  5.03e5         49555.\n# … with 176 more rows, and 12 more variables: PPP_per_capita <dbl>, G7 <dbl>,\n#   G20 <dbl>, OECD <dbl>, HDI_2018 <dbl>, Polity_Score <dbl>,\n#   Polity_Type <chr>, FH_PR <dbl>, FH_CL <dbl>, FH_Total <dbl>,\n#   FH_Status <chr>, Continent <chr>"
  },
  {
    "objectID": "materials/handling2.html#応用",
    "href": "materials/handling2.html#応用",
    "title": "第10回講義資料",
    "section": "応用",
    "text": "応用\n　それでは前回と今回の内容を復習してみよう。最初の問題は「各国が世界人口に占める割合を計算し、降順で出力する」ことである。この問題を解くためには以下のような手順でデータをハンドリングする必要がある。\n\ndfのPopulationの合計をTotal_Popという列として追加する。\n\nmutate()使用\n\nPopulationをTotal_Popで割り、100を掛ける。結果はShare_Popという名の列としてPopulation後に追加する。\n\nmutate()使用\n\nCountryからShare_Popまでの列のみ残すが、Total_Pop列は除外する。\n\nselect()使用\n\nShare_Popが大きい順で行を並び替える\n\narrange()使用\n\n\n　以上の計算仮定の内、1と2は一つのmutate()関数内にまとめることができる。したがって、データ %>% mutate() %>% select() %>% arrange()の順番でコードを書く必要がある。\n\ndf %>% \n  mutate(Total_Pop = sum(Population),              # 手順1\n         Share_Pop = Population / Total_Pop * 100, # 手順2\n         .after    = Population) %>%               # 手順2\n  select(Country:Share_Pop, -Total_Pop) %>%        # 手順3\n  arrange(desc(Share_Pop))                         # 手順4\n\n# A tibble: 186 × 3\n   Country       Population Share_Pop\n   <chr>              <dbl>     <dbl>\n 1 China         1447470092     18.6 \n 2 India         1380004385     17.8 \n 3 United States  334308644      4.31\n 4 Indonesia      273523615      3.52\n 5 Pakistan       220892340      2.85\n 6 Brazil         212559417      2.74\n 7 Nigeria        206139589      2.66\n 8 Bangladesh     164689383      2.12\n 9 Russia         145934462      1.88\n10 Mexico         128932753      1.66\n# … with 176 more rows\n\n\n　次の問題は「G7、G20、OECDのいずれかに加盟している国を\"先進国\"、それ以外は\"その他\"とし、二つのグループの人口密度、人間開発指数、民主主義度の平均値を出力する」ことである。\n\ndfのDevelopedという列を追加し、G7、G20、OECDのいずれかに加盟した国なら\"先進国\"、それ以外なら\"その他\"とする。\n\nmutate()使用\n\n人口密度をDensityという名の列として追加する。\n\nmutate()使用\n\nHDI_2018とPolity_Scoreのいずれかが欠損した行を除外する。\n\nfilter()使用\n\nDeveloped変数でデータをグルーピングする。\n\ngroup_by()使用\n\nHDI_2018、Polity_Score、Densityの平均値を求める。\n\nsummarise()使用\n\ndf2という名前のオブジェクトとして作業環境内に格納する。\n\n代入演算子（<-）使用\n\ndf2を出力する。\n\n　今回も手順1と2は同じmuate()関数を使用するため、新しいオブジェクト名 <- データ %>% mutate() %>% filter() %>% group_by() %>% summarise()の順番でコードを各必要がある。\n\ndf2 <- df %>%\n  mutate(Developed = G7 + G20 + OECD,\n         Developed = if_else(Developed > 1, \"先進国\", \"その他\"), # 上書き\n         Density   = Population / Area) %>%\n  filter(!is.na(HDI_2018), !is.na(Polity_Score)) %>%\n  group_by(Developed) %>%\n  summarise(Density = mean(Density),\n            HDI     = mean(HDI_2018),\n            Polity  = mean(Polity_Score))\n\ndf2\n\n# A tibble: 2 × 4\n  Developed Density   HDI Polity\n  <chr>       <dbl> <dbl>  <dbl>\n1 その他       197. 0.695   3.92\n2 先進国       174. 0.892   7.91\n\n\n　いきなり出てきたif_else()関数だが、これは何だろう。これから解説する。"
  },
  {
    "objectID": "materials/handling2.html#名目変数の扱い方",
    "href": "materials/handling2.html#名目変数の扱い方",
    "title": "第10回講義資料",
    "section": "名目変数の扱い方",
    "text": "名目変数の扱い方\n　先ほどのdf2だが、出力順番が\"その他\" \\(\\rightarrow\\) \"先進国\"になっている。これを\"先進国\" \\(\\rightarrow\\) \"その他\"の順番にするならどうすれば良いだろうか。summarise()を行う場合、グルーピング変数のアルファベット順で表示される。ただし、これはアルファベットや数字に限定される話であり、日本語の場合、50音順になるとは限らない。ひらがな、カタカナなら50音順になるが、漢字はそうではない。そもそも読み方が複数あるので、どの基準にすればもよく分からない。しかも、漢字は日本だけが使う文字でもないため、読み方も国によって異なるだろう。この場合、summarise()を使う前にグルーピング変数をfactor型に変換する必要がある。\n　ある変数をfactor型に変換する場合はfactor()関数を使う。第一引数は元となる変数名であり、levels =に順番を指定する。スペルミスに注意すること。\n\ndf %>%\n  mutate(Developed = G7 + G20 + OECD,\n         Developed = if_else(Developed > 1, \"先進国\", \"その他\"),\n         Developed = factor(Developed, levels = c(\"先進国\", \"その他\")),\n         Density   = Population / Area) %>%\n  filter(!is.na(HDI_2018), !is.na(Polity_Score)) %>%\n  group_by(Developed) %>%\n  summarise(Density = mean(Density),\n            HDI     = mean(HDI_2018),\n            Polity  = mean(Polity_Score))\n\n# A tibble: 2 × 4\n  Developed Density   HDI Polity\n  <fct>       <dbl> <dbl>  <dbl>\n1 先進国       174. 0.892   7.91\n2 その他       197. 0.695   3.92\n\n\n　それではこれまで放置してきたif_else()について解説しよう。if_else()は後ほど解説するcase_when()やrecode()のように変数のリコーディング（re-coding）に使う関数である。if_else()関数の使い方は以下の通りである。\n\nif_else(条件式, TRUEの場合の戻り値, FALSEの場合の戻り値)\n\n　たとえば、dfのOECDが1なら\"OECD加盟国\"、それ以外なら\"OECD非加盟国\"に変換し、OECD_Jという列として追加する場合、以下のコードになる。リコーディングの場合、既存の変数を上書きするより、新しい列として追加することを推奨する。\n\ndf <- df %>%\n  mutate(OECD_J = if_else(OECD == 1, \"OECD加盟国\", \"OECD非加盟国\"))\n\ndf\n\n# A tibble: 186 × 19\n   Country  Population   Area    GDP     PPP GDP_per_capita PPP_per_capita    G7\n   <chr>         <dbl>  <dbl>  <dbl>   <dbl>          <dbl>          <dbl> <dbl>\n 1 Afghani…   38928346 6.53e5 1.91e4  8.27e4           491.          2125.     0\n 2 Albania     2877797 2.74e4 1.53e4  3.97e4          5309.         13781.     0\n 3 Algeria    43851044 2.38e6 1.70e5  4.97e5          3876.         11324.     0\n 4 Andorra       77265 4.7 e2 3.15e3 NA              40821.            NA      0\n 5 Angola     32866272 1.25e6 9.46e4  2.19e5          2879.          6649.     0\n 6 Antigua…      97929 4.4 e2 1.73e3  2.08e3         17643.         21267.     0\n 7 Argenti…   45195774 2.74e6 4.50e5  1.04e6          9949.         22938.     0\n 8 Armenia     2963243 2.85e4 1.37e4  3.84e4          4614.         12974.     0\n 9 Austral…   25499884 7.68e6 1.39e6  1.28e6         54615.         50001.     0\n10 Austria     9006398 8.24e4 4.46e5  5.03e5         49555.         55824.     0\n# … with 176 more rows, and 11 more variables: G20 <dbl>, OECD <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>, OECD_J <chr>\n\n\n　それではまず、OECD変数でデータをグルーピングし、HDI_2018とFH_Totalの平均値を計算してみよう。\n\ndf %>%\n  group_by(OECD) %>%\n  summarise(HDI = mean(HDI_2018, na.rm = TRUE),\n            FH  = mean(FH_Total, na.rm = TRUE))\n\n# A tibble: 2 × 3\n   OECD   HDI    FH\n  <dbl> <dbl> <dbl>\n1     0 0.667  49.9\n2     1 0.894  89.1\n\n\n　続いて、OECDでなく、先ほど作成したOECD_J列でグルーピングしてみよう。\n\ndf %>%\n  group_by(OECD_J) %>%\n  summarise(PPP = mean(PPP_per_capita, na.rm = TRUE),\n            HDI = mean(HDI_2018, na.rm = TRUE),\n            FH  = mean(FH_Total, na.rm = TRUE))\n\n# A tibble: 2 × 4\n  OECD_J          PPP   HDI    FH\n  <chr>         <dbl> <dbl> <dbl>\n1 OECD加盟国   46000. 0.894  89.1\n2 OECD非加盟国 14229. 0.667  49.9\n\n\n　出力される結果の第1列がOECD_Jになっているが、これをOECDに変更したい場合はgroup_by(OECD_J)をgroup_by(OECD = OECD_J)に変更すれば良い。\n　if_else()は条件が一つのみの場合に使用する関数である。もし、条件式を複数使いたい場合はどうすれば良いだろうか。ここではまず、mutate()内にcase_when()を使用する方法から紹介する。\n\nデータフレーム名 %>%\n  mutate(新しい変数名 = case_when(条件1 ~ 新しい値,\n                                条件2 ~ 新しい値,\n                                ...\n                                TRUE ~ 新しい値))\n\n　TRUE ~ 新しい値は「上記の条件全てが満たされない場合の値」を意味する。ここではdfのContinent列を日本語にし、Continent_Jとして追加してみよう。\n\ndf %>%\n  mutate(Continent_J = case_when(Continent == \"Africa\"  ~ \"アフリカ\",\n                                 Continent == \"America\" ~ \"アメリカ\",\n                                 Continent == \"Asia\"    ~ \"アジア\",\n                                 Continent == \"Europe\"  ~ \"ヨーロッパ\",\n                                 TRUE                   ~ \"オセアニア\")) %>%\n  group_by(大陸 = Continent_J) %>%\n  # 日本語は非推奨だが、一応使える（_と.を除く特殊記号不可）\n  summarise(OECD加盟国比率 = mean(OECD),\n            国家数         = n())\n\n# A tibble: 5 × 3\n  大陸       OECD加盟国比率 国家数\n  <chr>               <dbl>  <int>\n1 アジア             0.0714     42\n2 アフリカ           0          54\n3 アメリカ           0.139      36\n4 オセアニア         0.5         4\n5 ヨーロッパ         0.54       50\n\n\n　この「新しい値」は条件の数だけ存在する必要はない。たとえば、Continent列の値が\"Asia\"か\"Oceania\"、\"America\"なら\"Asia-Pafific\"に、それ以外は\"Others\"に変更し、その結果をAPという名の新しい列として追加するとしよう。\n\ndf %>%\n  mutate(AP = case_when(Continent == \"Africa\"  ~ \"Others\",\n                        Continent == \"America\" ~ \"Asia-Pacific\",\n                        Continent == \"Asia\"    ~ \"Asia-Pacific\",\n                        Continent == \"Europe\"  ~ \"Others\",\n                        TRUE                   ~ \"Asia-Pacific\")) %>%\n  group_by(Continent = AP) %>%\n  summarise(Population = mean(Population),\n            Countries  = n())\n\n# A tibble: 2 × 3\n  Continent    Population Countries\n  <chr>             <dbl>     <int>\n1 Asia-Pacific  68064598.        82\n2 Others        20980085.       104\n\n\n　以上の例は戻り値が2種類、つまり、\"Asia-Pacific\"か\"Others\"のみである。実はこの場合、if_else()関数を使うこともできる。ここで便利な演算子が%in%演算子である。これは左側の値が右側のベクトルに含まれていればTRUE、含まれていなければFALSEが返ってくる関数である。たとえば、dfのContinent列が\"Asia\"か\"Oceania\"、\"America\"のいずれかに該当するか確認してみよう。\n\ndf$Continent %in% c(\"Asia\", \"Oceania\", \"America\")\n\n  [1]  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE\n [13]  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE\n [25]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE\n [37]  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE\n [49] FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE\n [73]  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n [85] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE\n [97]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE\n[109] FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE\n[121] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n[133]  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE\n[145] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n[169] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[181]  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\n　これをif_else()関数の条件式として使用する。\n\ndf %>%\n  mutate(AP = if_else(Continent %in% c(\"Asia\", \"America\", \"Oceania\"), \"Asia-Pacific\", \"Others\")) %>%\n  group_by(Continent = AP) %>%\n  summarise(Population = mean(Population),\n            Countries  = n())\n\n# A tibble: 2 × 3\n  Continent    Population Countries\n  <chr>             <dbl>     <int>\n1 Asia-Pacific  68064598.        82\n2 Others        20980085.       104\n\n\n　最後にrecode()関数について解説する。これまで紹介したif_else()とcase_when()は条件式を使うため、==、!=、%in%以外にも>や<=なども使える。ただし、書き方がやや複雑である。recode()は使う条件式が==のみの場合、if_else()やcase_when()を代替可能な関数である。ここでは例だけ紹介しよう。\n\ndf %>%\n  mutate(AP = recode(Continent,\n                     \"Asia\"    = \"Asia-Pacific\",\n                     \"America\" = \"Asia-Pacific\",\n                     \"Oceania\" = \"Asia-Pacific\",\n                     .default  = \"Others\")) %>%\n  group_by(Continent = AP) %>%\n  summarise(Population = mean(Population),\n            Countries  = n())\n\n# A tibble: 2 × 3\n  Continent    Population Countries\n  <chr>             <dbl>     <int>\n1 Asia-Pacific  68064598.        82\n2 Others        20980085.       104\n\n\n　recode()の第一引数はリコーディングする変数名であり、.defaultはいずれの条件にも該当しない場合の値を意味する。"
  },
  {
    "objectID": "materials/handling2.html#欠損値の扱い方",
    "href": "materials/handling2.html#欠損値の扱い方",
    "title": "第10回講義資料",
    "section": "欠損値の扱い方",
    "text": "欠損値の扱い方\n　世論調査などの場合、欠損値がNAでなく、9や99、\"\"などの場合がある。たとえば、以下のようなmy_dataというデータがあるとしよう。\n\nmy_data <- tibble(ID       = 1:10,\n                  Age      = c(32, 35, 57, 999, 74, 66, 999, 49, 78, 67),\n                  HighEduc = c(1, 0, 0, 1, 0, 9, 1, 1, 9, 9))\nmy_data\n\n# A tibble: 10 × 3\n      ID   Age HighEduc\n   <int> <dbl>    <dbl>\n 1     1    32        1\n 2     2    35        0\n 3     3    57        0\n 4     4   999        1\n 5     5    74        0\n 6     6    66        9\n 7     7   999        1\n 8     8    49        1\n 9     9    78        9\n10    10    67        9\n\n\n　IDは回答者の識別番号、Ageは回答者の年齢、HighEducは回答者が大卒以上なら1、それ以外は0を意味する。そして、年齢を回答しなかった回答者の年齢は999、学歴については9となっている。ここで回答者の年齢と学歴の平均値を出せばどうなるだろうか。\n\nmean(my_data$Age)\n\n[1] 245.6\n\nmean(my_data$HighEduc)\n\n[1] 3.1\n\n\n　回答者の平均年齢は245.6歳（!!）、学歴の平均値は3.1となっている。医学の発展によって人間の寿命が伸びたとしても、最大値が1のはずのHighEducの平均値が3.1ということはナンセンスである。データ分析の前に欠損値の確認と処理は必須であり、これを怠ると研究結果に大きな歪みな生じかねない。とりわけ、欠損値がNAでなく、9や999、\"\"などになっているケースはより注意が必要である。今回の実習データは既に欠損値の処理済み、つまり、欠損している値はNAになっている。ここでは上のmy_dataの使って考えてみよう。\n　まず、YoungAge変数を作成し、Ageが39以下なら1、それ以外は0にする。ただし、999ならNAとする。続いて、HighEduc2変数を作成し、HighEducが1なら\"大卒以上\"、それ以外は\"大卒未満\"にする。ただし、9ならNAとする。この作業を行うにはmutate()内にcase_when()を使えば良いだろう。\n\nmy_data %>%\n  mutate(YoungAge  = case_when(Age == 999 ~ NA,\n                               Age <=  39 ~ 1,\n                               TRUE       ~ 0),\n         HighEduc2 = case_when(HighEduc == 9 ~ NA,\n                               HighEduc == 1 ~ \"大卒以上\",\n                               TRUE          ~ \"大卒未満\"))\n\nError in `mutate()`:\n! Problem while computing `YoungAge = case_when(Age == 999 ~ NA, Age <=\n  39 ~ 1, TRUE ~ 0)`.\nCaused by error in `` names(message) <- `*vtmp*` ``:\n! 'names' attribute [1] must be the same length as the vector [0]\n\n\n　エラーが返ってきた。なぜだろう。問題はNAである。確かにRにおいて欠損値はNAのみである。しかし、{tidyverse}の世界は、同じNAでもnumeric型のNAとcharcter型のNAは区別される。上のコードの場合、YoungAgeはnumeric型、HighEduc2はcharacter型変数になるだろう。case_when()はif_else()などを使う場合、NAでなく、生成される列のデータ型に応じてNA_real_（numeric型）、またはNA_character_（character型）を使用（logical型ならNAのままでOK）する必要がある。\n\nmy_data %>%\n  mutate(YoungAge  = case_when(Age == 999 ~ NA_real_,\n                               Age <=  39 ~ 1,\n                               TRUE       ~ 0),\n         HighEduc2 = case_when(HighEduc == 9 ~ NA_character_,\n                               HighEduc == 1 ~ \"大卒以上\",\n                               TRUE          ~ \"大卒未満\"))\n\n# A tibble: 10 × 5\n      ID   Age HighEduc YoungAge HighEduc2\n   <int> <dbl>    <dbl>    <dbl> <chr>    \n 1     1    32        1        1 大卒以上 \n 2     2    35        0        1 大卒未満 \n 3     3    57        0        0 大卒未満 \n 4     4   999        1       NA 大卒以上 \n 5     5    74        0        0 大卒未満 \n 6     6    66        9        0 <NA>     \n 7     7   999        1       NA 大卒以上 \n 8     8    49        1        0 大卒以上 \n 9     9    78        9        0 <NA>     \n10    10    67        9        0 <NA>     \n\n\n　もう一つの例として特定の値を欠損値とし、それ以外の値は元も値にする場合を考えよう。つまり、AgeとHighEduc列においてそれぞれ999、9をNAにし、そのまま上書きするものである。例えばAgeはAgeの値が999なら（Age == 999）、NA_real_を返し、それ以外の場合は既存のAgeの値を取る。この作業は以下のコードで実行できる。\n\nmy_data %>%\n  mutate(Age      = if_else(Age == 999, NA_real_, Age),\n         HighEduc = if_else(HighEduc == 9, NA_real_, HighEduc))\n\n# A tibble: 10 × 3\n      ID   Age HighEduc\n   <int> <dbl>    <dbl>\n 1     1    32        1\n 2     2    35        0\n 3     3    57        0\n 4     4    NA        1\n 5     5    74        0\n 6     6    66       NA\n 7     7    NA        1\n 8     8    49        1\n 9     9    78       NA\n10    10    67       NA\n\n\n　欠損を意味する値が複数の場合もある。my_dataのAgeは999のみが欠損値であるが、世論調査によっては888、999、-1のように複数の欠損値が存在するケースがある。この場合はcase_when()を使うか、if_else()関数内にOR演算子（| / %in%）を使えば良い。\n　最後に欠損値処理に特化した{naniar}パッケージのreplace_with_na()関数を紹介する。引数はリスト型オブジェクトであり、リストの各要素は変数名 = 欠損値の値となる。たとえば、Ageの欠損値は999だからAge = 999である。これは条件式ではないため、==でなく、=を使う。欠損値の値が複数ある場合は、変数名 = c(値1, 値2, ...)のように書く。\n\nlibrary(naniar) # 事前に install.package(naniar) でインストール\nmy_data %>%\n  # Ageは999、HighEducは9が欠損値\n  replace_with_na(list(Age = 999, HighEduc = 9))\n\n# A tibble: 10 × 3\n      ID   Age HighEduc\n   <int> <dbl>    <dbl>\n 1     1    32        1\n 2     2    35        0\n 3     3    57        0\n 4     4    NA        1\n 5     5    74        0\n 6     6    66       NA\n 7     7    NA        1\n 8     8    49        1\n 9     9    78       NA\n10    10    67       NA\n\n\n　他にも似たような関数として{expss}のna_if()関数などがあるが、自分が使いやすいものを使えば良い。"
  },
  {
    "objectID": "materials/handling2.html#教科書",
    "href": "materials/handling2.html#教科書",
    "title": "第10回講義資料",
    "section": "教科書",
    "text": "教科書\n\nデータのグルーピングと要約: 教科書第13.1章と第13.2章\n変数の計算: 教科書第13.3章と第13.4章\nFactor型変数の扱い: 教科書第14章\n\nFactor型については可視化の時にも解説する。詳しい内容は教科書を参照すること"
  },
  {
    "objectID": "materials/programming.html",
    "href": "materials/programming.html",
    "title": "第4回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/handling3.html",
    "href": "materials/handling3.html",
    "title": "第11回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/handling3.html#データの結合",
    "href": "materials/handling3.html#データの結合",
    "title": "第11回講義資料",
    "section": "データの結合",
    "text": "データの結合\n\n行の結合\n　複数のdata.frameを縦に結合する場合は、bind_rows()を利用する。たとえば、以下のような2つのdata.frameがあるとする。\n\nData1 <- data.frame(ID    = 1:3, \n                    Name  = c(\"Aさん\", \"Bさん\", \"Cさん\"),\n                    Score = c(77, 89, 41))\nData2 <- data.frame(ID    = 4:5, \n                    Name  = c(\"Xさん\", \"Yさん\"),\n                    Score = c(98, 78))\n\n\n\n\nData1\n\n  ID  Name Score\n1  1 Aさん    77\n2  2 Bさん    89\n3  3 Cさん    41\n\n\n\n\n\n\nData2\n\n  ID  Name Score\n1  4 Xさん    98\n2  5 Yさん    78\n\n\n\n\n　2つのdata.frameは同じ変数名を共有しているため、縦に積み重ねることができる。このようにデータを縦に結合する時にはそれぞれのdata.frameの変数名が一致する必要がある。今回の例では以下の例はいずれのdata.frameもID、Name、Scoreで構成されている。ただし、ID、Name、Scoreの順番は一致しなくても良いが、上のdata.frameの順番に調整される。bind_rows()の使い方は簡単である。bind_rows()の中に結合するdata.frameのオブジェクト名を入れるだけだ。\n\nbind_rows(Data1, Data2)\n\n  ID  Name Score\n1  1 Aさん    77\n2  2 Bさん    89\n3  3 Cさん    41\n4  4 Xさん    98\n5  5 Yさん    78\n\n\n　このData1とData2がそれぞれ1組と2組の学生データだとしよう。結合後はどの生徒がどの組に所属しているかが分からない。結合と同時に各data.frameの識別変数を追加するためには結合するデータをlist()でまとめ、.id引数を追加する。ただし、list()の内部では以下のように\"識別変数の値\" = 結合するデータと定義する必要がある。\n\nbind_rows(list(\"1組\" = Data1, \"2組\" = Data2),\n          .id = \"Class\")\n\n  Class ID  Name Score\n1   1組  1 Aさん    77\n2   1組  2 Bさん    89\n3   1組  3 Cさん    41\n4   2組  4 Xさん    98\n5   2組  5 Yさん    78\n\n\n　.idで指定した名前の変数が第1列として追加され、それぞれどの組のデータであるかが分かるようになる。\n\n\n列の結合\n一方、データを横に結合することはいくつかのバリエーションがある。これらの作業は*_join()関数を使用する。ここで重要なのは結合に使う識別用の変数（キー変数）が必要ということであり、以下の例ではCityはキー変数である。\n\nData1 <- data.frame(City  = c(\"Tokyo\", \"Osaka\", \"Kochi\"),\n                    Pop   = c(927, 148, 76),\n                    Area  = c(2194, 828, 7104))\n\nData2 <- data.frame(City  = c(\"Kochi\", \"Osaka\", \"Tokyo\"),\n                    Food  = c(\"Katsuo\", \"Takoyaki\", \"Ramen\"))\n\n\n\n\nData1\n\n   City Pop Area\n1 Tokyo 927 2194\n2 Osaka 148  828\n3 Kochi  76 7104\n\n\n\n\n\n\nData2\n\n   City     Food\n1 Kochi   Katsuo\n2 Osaka Takoyaki\n3 Tokyo    Ramen\n\n\n\n\n　この2つのデータを結合する時にはleft_join()、right_join()、inner_join()、full_join()などを使用するが、いずれも使い方は同じである。まず、結合する2つのdata.frameのオブジェクト名を入力し、by = \"キー変数名\"の引数を追加する。\n\nleft_join(Data1, Data2, by = \"City\")\n\n   City Pop Area     Food\n1 Tokyo 927 2194    Ramen\n2 Osaka 148  828 Takoyaki\n3 Kochi  76 7104   Katsuo\n\n\n　ただし、キー変数は両データに含まれているが、一致しないケースがある。たとえば、以下の例ではCityとToshiがキー変数である。\n\nData1 <- data.frame(City  = c(\"Tokyo\", \"Osaka\", \"Kochi\"),\n                    Pop   = c(927, 148, 76),\n                    Area  = c(2194, 828, 7104))\n\nData2 <- data.frame(Toshi    = c(\"Kochi\", \"Osaka\", \"Tokyo\"),\n                    Tabemono = c(\"Katsuo\", \"Takoyaki\", \"Ramen\"))\n\n\n\n\nData1\n\n   City Pop Area\n1 Tokyo 927 2194\n2 Osaka 148  828\n3 Kochi  76 7104\n\n\n\n\n\n\nData2\n\n  Toshi Tabemono\n1 Kochi   Katsuo\n2 Osaka Takoyaki\n3 Tokyo    Ramen\n\n\n\n\n　この場合、by = c(\"データ1のキー変数名\" = \"データ2のキー変数名\")と指定する必要がある。\n\nleft_join(Data1, Data2, by = c(\"City\" = \"Toshi\"))\n\n   City Pop Area Tabemono\n1 Tokyo 927 2194    Ramen\n2 Osaka 148  828 Takoyaki\n3 Kochi  76 7104   Katsuo\n\n\n　それでは4種類の*_join()関数についてそれぞれの特徴を見てみよう。\n　まず、left_join()はデータ1を温存させる関数である。たとえば、上の例だと、データ1には東京、大阪、高知が、データ2には高知、大阪、京都のデータが含まれている。大阪と高知は問題なく結合できるが、余っているデータ1の東京、データ2の京都はどうなるだろうか。left_join()を使う場合、データ1の東京が温存される。ただし、データ2に東京のデータがないため、東京のTabemonoは欠損値（NA）で埋められる。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n　一方、right_join()はデータ2が温存される。つまり、京都の行が残り、京都のPopとAreaは欠損値となる。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n　inner_join()は両データに同時に存在する行のみが結合対象となるため、大阪と高知の行のみが結合される。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n　最後に、full_join()はデータ1とデータ2すべてを温存させ、欠損しているセルは欠損値（NA）で埋められる。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nそれでは以下のデータで実際に比較してみよう。\n\ndf1 <- tibble(Pref  = c(\"東京\", \"大阪\", \"京都\"),\n              Score = c(3.5, 4, 4.2))\ndf2 <- tibble(Pref  = c(\"東京\", \"大阪\", \"高知\"),\n              N     = c(3220, 1325, 111))\n\n\n\n\ndf1\n\n# A tibble: 3 × 2\n  Pref  Score\n  <chr> <dbl>\n1 東京    3.5\n2 大阪    4  \n3 京都    4.2\n\n\n\n\n\n\ndf2\n\n# A tibble: 3 × 2\n  Pref      N\n  <chr> <dbl>\n1 東京   3220\n2 大阪   1325\n3 高知    111\n\n\n\n\n\n\n\nleft_join(df1, df2, by = \"Pref\")\n\n# A tibble: 3 × 3\n  Pref  Score     N\n  <chr> <dbl> <dbl>\n1 東京    3.5  3220\n2 大阪    4    1325\n3 京都    4.2    NA\n\nright_join(df1, df2, by = \"Pref\")\n\n# A tibble: 3 × 3\n  Pref  Score     N\n  <chr> <dbl> <dbl>\n1 東京    3.5  3220\n2 大阪    4    1325\n3 高知   NA     111\n\n\n\n\n\n\ninner_join(df1, df2, by = \"Pref\")\n\n# A tibble: 2 × 3\n  Pref  Score     N\n  <chr> <dbl> <dbl>\n1 東京    3.5  3220\n2 大阪    4    1325\n\nfull_join(df1, df2, by = \"Pref\")\n\n# A tibble: 4 × 3\n  Pref  Score     N\n  <chr> <dbl> <dbl>\n1 東京    3.5  3220\n2 大阪    4    1325\n3 京都    4.2    NA\n4 高知   NA     111\n\n\n\n\n　キー変数が複数あることもある。たとえば、以下のように分析の単位（=行）が地域\\(\\times\\)年度である可能性もあろう。\n\n\n\ndf3 <- tibble(Country = c(\"A\", \"A\", \"A\", \n                          \"B\", \"B\", \"B\",\n                          \"C\", \"C\", \"C\"),\n              Year    = c(2020, 2021, 2022, \n                          2020, 2021, 2022,\n                          2020, 2021, 2022),\n              GDP     = c(100, 150, 200,\n                          100, 120, 120,\n                          200, 180, 90))\n\ndf3\n\n# A tibble: 9 × 3\n  Country  Year   GDP\n  <chr>   <dbl> <dbl>\n1 A        2020   100\n2 A        2021   150\n3 A        2022   200\n4 B        2020   100\n5 B        2021   120\n6 B        2022   120\n7 C        2020   200\n8 C        2021   180\n9 C        2022    90\n\n\n\n\n\n\ndf4 <- tibble(Country = c(\"A\", \"B\", \"C\", \n                          \"A\", \"B\", \"C\",\n                          \"A\", \"B\", \"C\"),\n              Year    = c(2020, 2020, 2020, \n                          2021, 2021, 2021,\n                          2022, 2022, 2022),\n              Pop     = c(1000, 8000, 5000,\n                          1100, 7000, 6000,\n                          1100, 8000, 7800))\n\ndf4\n\n# A tibble: 9 × 3\n  Country  Year   Pop\n  <chr>   <dbl> <dbl>\n1 A        2020  1000\n2 B        2020  8000\n3 C        2020  5000\n4 A        2021  1100\n5 B        2021  7000\n6 C        2021  6000\n7 A        2022  1100\n8 B        2022  8000\n9 C        2022  7800\n\n\n\n\n　この場合、Country、またはYearのみをキー変数として使うのではなく、両方をキー変数として使う必要がある。複数のキー変数を指定するときにはby = c(\"キー変数1\", \"キー変数2\")のように指定する。\n\nleft_join(df3, df4, by = c(\"Country\", \"Year\"))\n\n# A tibble: 9 × 4\n  Country  Year   GDP   Pop\n  <chr>   <dbl> <dbl> <dbl>\n1 A        2020   100  1000\n2 A        2021   150  1100\n3 A        2022   200  1100\n4 B        2020   100  8000\n5 B        2021   120  7000\n6 B        2022   120  8000\n7 C        2020   200  5000\n8 C        2021   180  6000\n9 C        2022    90  7800"
  },
  {
    "objectID": "materials/handling3.html#整然データ構造",
    "href": "materials/handling3.html#整然データ構造",
    "title": "第11回講義資料",
    "section": "整然データ構造",
    "text": "整然データ構造\n　Tidy dataとはHadley Wickhamが提唱したデータ分析に適したデータ構造であり、日本語では整然データ、または簡潔データとも訳される。整然データはパソコンにとって読みやすいデータであり、Rにおける多くの分析はこの整然データを基づいて行われる。ただし、パソコンにとって読みやすいデータが必ずしも人間にとって読みやすいデータであることを意味するわけではない。2つが一致する場合もあれば、一致しない場合もある。{tidyr}パッケージは整然ではないデータ（=雑然データ）を整然データへ変形するパッケージであり、次回紹介する{ggplot2}は整然データを前提として開発されたパッケージである。\n\n4つの原則\n　整然データには4つの原則がある。\n\n1つの列は、1つの変数を表す\n1つの行は、1つの観測を表す\n1つのセルは、1つの値を表す\n1つの表は、1つの観測単位をもつ\n\n　以下ではそれぞれの原則について解説する。\n原則1: 1列1変数\n　これは1つの列は1つの変数を意味するといった、一見当たり前のように見える原則であるが、実は雑然データのほとんどは、この原則1を満たしていない。たとえば、以下のようなデータを考えてみよう。これは3人の被験者に対し、薬を飲む前後の数学成績を測定したデータである。このデータを構成する変数は、被験者名、処置の前後、数学成績の3つである。薬を飲む前の数学関席はControl列、薬を飲んだ後の数学成績がTreatment列である。\n\n\n\n\n\n\n\n\n\n　このデータの問題は「数学成績」といった一つの変数が2列に分かれていることである。実はこのデータは以下の原則2も満たしてない。原則2を満たしていないデータはほとんど原則1を満たしていないケースが多い。\n原則2: 1行1観察\n　1行に1つの観察が入るということも当たり前のように思える。しかし、「1つの観察 = 1つの値」を意味するわけではない。先ほどのデータもそれぞれのセルには1つの値のみ入っている。ここでの「観察」とは観察単位ごとに測定された値の集合であり、観察単位は人、企業、国、時間などがある。このデータの観察単位は「人」ではない。今回のデータにおける観察単位は「人 \\(\\times\\) 時間」である。たとえば、「投薬前のXさんの数学成績」が一つの観察である。しかし、以下の左側のデータは一つの行にある学生の投薬前の数学成績と投薬後の数学成績、つまり2つの観察が混じっていることとなる。\n\n\n\n\n\n\n\n\n\n原則3: 1セル1値\n　1つのセルに1つの値のみが含まれるといった原則3は、これに反するケースは多くない。以下のように「Hadleyさんは投薬前後で数学成績が変わらないから、一つのセルにまとめよう」といったことはめったにないだろう。\n\n\n\n\n\n\n\n\n\n　しかし、一部の例外も存在する。たとえば、1つのセルに2020/8/24という値があるとしよう。このセルには「年」と「月」、「日」といった3つの値が含まれている。分析の目的によっては年月日を全て異なるセルに割り当てる必要もあるが、このままで問題とならないケースもある。分析単位が日であれば、このままで問題ないが、分析単位が「年\\(\\times\\)月\\(\\times\\)日」であれば、3つのセルに分ける必要があろう。\n原則4: 1表1単位\n　最後の原則4は1つの表は1単位を表すことである。実は1つの表に複数の分析単位が含まれるケースがかなり多い。以下の図は政府統計の例であるが、1つの表に「国」、「都道府県」、「市区町村」、「行政区」の単位が混在していることが分かる。\n\n\n\n\n\n\n\n\n\n　また、最後の行に「合計」や「平均」が入るケースも多い。最後の行以外は個人が単位であるが、最後の行のみクラスになっている。「1表1単位」原則を満たさない場合、filter()関数等で、異なる単位の行を除外することができる。\n\n\n\n\n\n\n\n\n\n\n\n{tidyr}パッケージ\n\n\n\n\n\n\n\n\n\n　{tidyr}パッケージは雑然データから整然データへ変形をサポートするパッケージである。主に使う関数は以下の3つである。\n\npivot_longer(): Wide型データ\\(\\rightarrow\\)Long型データ\npivot_wider(): Long型データ\\(\\rightarrow\\)Wide型データ\nseparate(): セルの分割（例:「年月日」から「年」、「月」、「日」へ）\n\n　それでは、サポートページの「データ州」実習用データ（Micro11.csv）をダウンロードし、読み込んでみよう。このデータは中国、日本、韓国、モンゴル、台湾（アルファベット順）の5日間COVID-19新規感染者数データであり、Johns Hopkins University Center for Systems Science and Engineeringから入手したものである。\n\nCOVID_df <- read_csv(\"Data/Micro11.csv\")\nCOVID_df\n\n# A tibble: 5 × 7\n  Country  Population `2022/06/09` `2022/06/10` `2022/06/11` `2022/06/12`\n  <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n1 China    1447470092          819          848         1114          990\n2 Japan     126476461        16788        15584        15338        13381\n3 Korea      51269185         9304         8428         7382         3828\n4 Mongolia    3278290            0            0            0            0\n5 Taiwan     23816775        72846        68293        79616        50567\n# … with 1 more variable: `2022/06/13` <dbl>\n\n\n　このデータは整然データだろうか、あるいは雑然データだろうか。まずは、本データの観察単位を明らかにする必要がある。これらのデータは「時点XにおけるY地域の新規感染者数と人口」を測定したものである。したがって、このデータの観察単位は「地域\\(\\times\\)時間」であり、測定されたものは新規感染者数と人口である。したがって、整然データであるためには、「地域名」、「時間」、「人口」、「新規感染者数」の4つの変数で構成される必要がある。一方、現在のデータでは新規感染者数が5列に渡って格納されており、計7列のデータである。\n　このデータを整然データに変えるには、7列のデータを4列のデータに変形する必要がある。2つのデータが同じ情報を持つのであれば、列が多いデータは行が少なく、行が多いデータは列が少なくなるはずである。ここで相対的な横長のデータをwide型、縦長のデータをlong型と呼ぶ。今回の場合はwide型データをlong型データへ変換する必要があり、多くの雑然データの扱いはwide型\\(\\rightarrow\\)long型の整形が必要となる。\n　ここで使う関数がpivot_longer()関数である。使い方は以下の通りである。\n\nデータ %>%\n  pivot_longer(cols      = 変数が格納されている列,\n               names_to  = \"元の列名が入る変数名\",\n               values_to = \"変数の値が入る変数名\")\n\n　我々がやりたい作業は2022/06/09列から2022/06/13列までの5列を1つの列としてまとめることである。まとめる列はcols引数で指定する。そして、これまで変数名だったもの（たとえば、2022/06/11など）が入る新しい列名と、値が入る新しい列名を、それぞれnames_toとvalues_toで指定する。ここでは時点はDate、新規感染者数はNew_Casesという列として格納するとしよう。注意すべき点としては、これらの新しい変数名は\"で囲むことである。\n　ただし、colsの場合、\"で囲んでも、囲まなくても良い。ただし、列名に記号が入っていたり、数字で始まる列名は\"で囲む必要がある。また、colsでは隣接した列を選択する:やstarts_with()なども使用可能である。\n\nCOVID_Long <- COVID_df %>% \n  # cols = starts_with(\"2022\") でも良い\n  pivot_longer(cols      = \"2022/06/09\":\"2022/06/13\",\n               names_to  = \"Date\",\n               values_to = \"New_Cases\")\nCOVID_Long\n\n# A tibble: 25 × 4\n   Country Population Date       New_Cases\n   <chr>        <dbl> <chr>          <dbl>\n 1 China   1447470092 2022/06/09       819\n 2 China   1447470092 2022/06/10       848\n 3 China   1447470092 2022/06/11      1114\n 4 China   1447470092 2022/06/12       990\n 5 China   1447470092 2022/06/13       957\n 6 Japan    126476461 2022/06/09     16788\n 7 Japan    126476461 2022/06/10     15584\n 8 Japan    126476461 2022/06/11     15338\n 9 Japan    126476461 2022/06/12     13381\n10 Japan    126476461 2022/06/13      7942\n# … with 15 more rows\n\n\n逆に、long型データをwide型データへ整形する際はpivot_wider()を使用する。雑然データはwide型データが多いとは既に説明したが、雑然データの方が人間にとっては読みやすい場合もある。上の新型コロナのデータもwide型の方が読みやすい人もいるだろう。データ分析に適したデータは整然データであるが、報告に適したデータとしては必ずしもこの関係は成立しない。図表を作成する際は常に読む側の立場から考える必要があろう。\n　このpivot_wider()関数の使い方はpivot_longer()の類似している。names_toとvalues_toがそれぞれnaems_fromとvalues_fromに変わっただけである。\n\nCOVID_Long %>%\n  pivot_wider(names_from  = \"Date\",\n              values_from = \"New_Cases\")\n\n# A tibble: 5 × 7\n  Country  Population `2022/06/09` `2022/06/10` `2022/06/11` `2022/06/12`\n  <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n1 China    1447470092          819          848         1114          990\n2 Japan     126476461        16788        15584        15338        13381\n3 Korea      51269185         9304         8428         7382         3828\n4 Mongolia    3278290            0            0            0            0\n5 Taiwan     23816775        72846        68293        79616        50567\n# … with 1 more variable: `2022/06/13` <dbl>\n\n\n　最後にセルの値を分割するseparate()関数について解説する。たとえば、月や曜日ごとの新規感染者数をまとめようとした場合、時点の列が「YYYY年MM月DD日」になっていては困る。これらの年、月、日に分割する必要があろう。先ほど作成したCOVID_LongのDate列をYear、Month、Dayに分けてみよう。\n　colは分割する列の名前を、intoには分割後の列名を、sepは分割の区切りとなる記号などを指定する。\n\nデータ %>%\n  separate(col  = \"分割する列名\",\n           into = c(\"分割後の列名1\", \"分割後の列名2\", ...),\n           sep  = \"分割する基準\")\n\n　\"2022/10/08\"の場合、\"/\"で分ければ、\"2022\"、\"10\"、\"08\"に分割されるだろう。これあらをそれぞれ、Year、Month、Dayといった3つの列に分割してみよう。\n\nCOVID_Long %>%\n  separate(col  = \"Date\",\n           into = c(\"Year\", \"Month\", \"Day\"),\n           sep  = \"/\")\n\n# A tibble: 25 × 6\n   Country Population Year  Month Day   New_Cases\n   <chr>        <dbl> <chr> <chr> <chr>     <dbl>\n 1 China   1447470092 2022  06    09          819\n 2 China   1447470092 2022  06    10          848\n 3 China   1447470092 2022  06    11         1114\n 4 China   1447470092 2022  06    12          990\n 5 China   1447470092 2022  06    13          957\n 6 Japan    126476461 2022  06    09        16788\n 7 Japan    126476461 2022  06    10        15584\n 8 Japan    126476461 2022  06    11        15338\n 9 Japan    126476461 2022  06    12        13381\n10 Japan    126476461 2022  06    13         7942\n# … with 15 more rows\n\n\n　もし、区切りとなる記号が存在しない場合は、正則表現（regular expression）の知識が必要となる。テキスト分析に興味があるなら必須の知識であるが、本講義の射程外である。ここでは都道府県と市区町村を分けるサンプルコードのみ紹介する。\n\nCity_Data <- tibble(City = c(\"北海道音威子府村\",\n                             \"大阪府高槻市\",\n                             \"広島県府中市\",\n                             \"鹿児島県指宿市\"),\n                    Pop  = c(693, 347424, 36471, 38207))\n\nCity_Data\n\n# A tibble: 4 × 2\n  City                Pop\n  <chr>             <dbl>\n1 北海道音威子府村    693\n2 大阪府高槻市     347424\n3 広島県府中市      36471\n4 鹿児島県指宿市    38207\n\nCity_Data %>%\n   # 任意の2文字の後に「都道府県」のいずれかが来るか、\n   # 任意の3文字の後に「県」が来たら、そこまでをブロック1、残りをブロック2とする\n   # Cityの値を「ブロック1-ブロック2」に置換する\n   mutate(City = str_replace(City, \"^(.{2}[都道府県]|.{3}県)(.+)\", \n                             \"\\\\1-\\\\2\")) %>%\n   # 「-」を基準に列を分割\n   separate(col  = \"City\", into = c(\"Pref\", \"City\"), sep  = \"-\")\n\n# A tibble: 4 × 3\n  Pref     City          Pop\n  <chr>    <chr>       <dbl>\n1 北海道   音威子府村    693\n2 大阪府   高槻市     347424\n3 広島県   府中市      36471\n4 鹿児島県 指宿市      38207\n\n\n\n\n{tidyr}と{dplyr}\n　これまでの例で見てきたように、{tidyr}の各関数を通して得られた結果はいずれもdata.frame（厳密にはtibble）構造である。また、{tidyr}の各関数の第一引数はdata.frameである。これは{tidyr}と{dplyr}を組み合わせることが可能であることを意味する。つまり、{tidyr}の関数から{dplyr}の関数、またがその逆の方向でパイプ演算子を使うこともできる。たとえば、今回の実習データをlong型へ整形し、100万人当たりの新規感染者数をNew_Case_per_1Mという列として格納し、国・地域（Country）ごとにNew_Case_per_1Mの平均とを計算する作業を、全てパイプで繋ぐこともできる。\n\nCOVID_df %>% \n  # Wide to Long\n  pivot_longer(cols      = \"2022/06/09\":\"2022/06/13\",\n               names_to  = \"Date\",\n               values_to = \"New_Cases\") %>%\n  # 新規感染者数を人口であり、100万をかける\n  mutate(New_Case_per_1M = New_Cases / Population * 1000000) %>%\n  # Countryでグルーピング\n  group_by(Country) %>%\n  # New_Case_per_1Mの平均値を計算\n  summarise(New_Case_per_1M = mean(New_Case_per_1M))\n\n# A tibble: 5 × 2\n  Country  New_Case_per_1M\n  <chr>              <dbl>\n1 China              0.653\n2 Japan            109.   \n3 Korea            151.   \n4 Mongolia          64.4  \n5 Taiwan          2657."
  },
  {
    "objectID": "materials/handling3.html#教科書",
    "href": "materials/handling3.html#教科書",
    "title": "第11回講義資料",
    "section": "教科書",
    "text": "教科書\n\nデータの結合: 『私たちのR: ベストプラクティスの探求』第13.5章\n整然データ構造: 『私たちのR: ベストプラクティスの探求』第15章"
  },
  {
    "objectID": "materials/handling1.html",
    "href": "materials/handling1.html",
    "title": "第9回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/handling1.html#tidyverseとパイプ演算子",
    "href": "materials/handling1.html#tidyverseとパイプ演算子",
    "title": "第9回講義資料",
    "section": "Tidyverseとパイプ演算子",
    "text": "Tidyverseとパイプ演算子\n\nTidyverseとは\n\n\n\n\n\n\n\n\n\n　Tidyverse（たいでぃばーす）とはデータサイエンスのために考案された、強い信念と思想に基づいたRパッケージの集合である。具体的には{dplyr}、{tidyr}、{readr}、{ggplot2}など数十パッケージで構成されており、Tidyverseに属するパッケージは思想、文法およびデータ構造（tidy data; 整然データ）を共有しる。また、ベクトルやデータフレーム、関数などのオブジェクトをパイプ演算子 (%>%)で繋ぐという点が特徴である。これらのパッケージ群は{tidyverse}をインストールすることで導入可能であり、NIIオンライン分析システムでは既に導入済みである。\n　2010年代中盤以降、Rの書き方はtidyverseな書き方が的着しているため、Rのコードを作成する際はlibrary(tidyverse)から始めよう。\n\n\nパイプ演算子\n　Tidyverseにおいてオブジェクトはパイプ演算子（%>%）で繋がっている。なぜパイプ演算子を使うのだろうか。一般的なプログラミング言語に共通する書き方は書き方と読み方が逆という特徴を持つ。たとえば、「ベクトルXの和を出力する」コードはprint(sum(X))であり、print、sum、Xの順で書く。このコードの読み方には二通りがある。\n\n読み方1: Xをsum()し、print()する。\n読み方2: print()する内容はsum()で、sum()はXに対して行う。\n\n　1は人間にとって自然な読み方であるが、書き方と逆である。一方、2は書き方と順番は一致するものの、直感的ではない。しかし、Tidyverseな書き方、つまりパイプ演算子を用いた書き方は書き方と読み方が一致するメリットがある。たとえば、先ほどのコードはパイプ演算子を使うとX %>% sum() %>% print()と書く。\n　このパイプ演算子、実はごく簡単な仕組みである。%>%の左側のオブジェクトを右側オブジェクトの最初の引数として渡すだけであり、X %>% 関数(Y)は関数(X, Y)と同じだ。つまり、X %>% sum(na.rm = TRUE)はsum(X, na.rm = TRUE)と同じコードである。\n\n\n\n既存の書き方\n\nX <- c(2, 3, 5, NA, 11)\nprint(sum(X, na.rm = TRUE))\n\n[1] 21\n\n\n\n\n\n\n\nTidyverseな書き方\n\nlibrary(tidyverse)\nX %>%\n    sum(na.rm = TRUE) %>%\n    print()\n\n[1] 21\n\n\n\n\n\n　%>%演算子はパイプ左側オブジェクトを右側オブジェクトの最初の引数として渡すと説明したたが、第二、三、…引数として渡すことも可能である。ただし、この場合はパイプ左側のオブジェクトが入る箇所に.と記入する必要がある。詳細は割愛するが、線形回帰分析の関数lm()は最初の引数が数式（formula型）であるため、データフレームをlm()に渡すためには、lm()内にdata = .と書く必要がある。これは.の箇所にパイプ左側のオブジェクトが入ることを意味する。\n\nmy_data %>%\n    lm(y ~ x1 + x2 + x3, data = .)\n\n　このパイプ演算子、実はRデフォルトで提供されているものでなく、{magrittr}というパッケージが提供する演算子である。しかし、2021年5月リリースされたR 4.1以降、R内蔵演算子としてパイプ演算子（|>）が追加されるようになった1。使い方は%>%と同じである。ただし、第一引数以外に使う位置指定子（place holder）が異なる。%>%の位置指定子は.であり、|>の位置指定子は_である2。本講義ではパイプ演算子として%>%を使用するが、|>を使っても同じ結果が得られる。"
  },
  {
    "objectID": "materials/handling1.html#dplyrとは",
    "href": "materials/handling1.html#dplyrとは",
    "title": "第9回講義資料",
    "section": "{dplyr}とは",
    "text": "{dplyr}とは\n\n\n\n\n\n\n\n\n\n　{dplyr}はTidyverseパッケージ群のコア・パッケージの一つである、表形式データ (データフレームやtibble)を操作するパッケージである。{dplyr}を使えば、第8回の講義で解説した行・列の抽出も簡単に可能となる。{dplyr}を使うためには別途library(dplyr)を実行する必要はなく、{tidyverse}を読み込む際に自動的に読み込まれる。\n　まずは本講義に使用するデータを読み込んでみよう。サポートページからMicro09.csvをダウンロードし、プロジェクト・フォルダーにアップロードする。宋はプロジェクト・フォルダー内にDataという名のフォルダーを作成し、そこにデータをアップロードした。\n\nlibrary(tidyverse)  # tidyverseの読み込み\n# Dataフォルダー内のMicro09.csvを読み込み、dfという名のオブジェクトとして作業環境に格納\ndf <- read_csv(\"Data/Micro09.csv\")\n\n　読み込んだデータを出力してみよう。\n\ndf\n\n# A tibble: 186 × 18\n   Country  Population   Area    GDP     PPP GDP_per_capita PPP_per_capita    G7\n   <chr>         <dbl>  <dbl>  <dbl>   <dbl>          <dbl>          <dbl> <dbl>\n 1 Afghani…   38928346 6.53e5 1.91e4  8.27e4           491.          2125.     0\n 2 Albania     2877797 2.74e4 1.53e4  3.97e4          5309.         13781.     0\n 3 Algeria    43851044 2.38e6 1.70e5  4.97e5          3876.         11324.     0\n 4 Andorra       77265 4.7 e2 3.15e3 NA              40821.            NA      0\n 5 Angola     32866272 1.25e6 9.46e4  2.19e5          2879.          6649.     0\n 6 Antigua…      97929 4.4 e2 1.73e3  2.08e3         17643.         21267.     0\n 7 Argenti…   45195774 2.74e6 4.50e5  1.04e6          9949.         22938.     0\n 8 Armenia     2963243 2.85e4 1.37e4  3.84e4          4614.         12974.     0\n 9 Austral…   25499884 7.68e6 1.39e6  1.28e6         54615.         50001.     0\n10 Austria     9006398 8.24e4 4.46e5  5.03e5         49555.         55824.     0\n# … with 176 more rows, and 10 more variables: G20 <dbl>, OECD <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>\n\n\n　dim()関数を使うとdfは186行、18列のデータであることが分かる。\n\ndim(df)\n\n[1] 186  18\n\n\n　また、18個の変数名のみを出力するためにはnames()関数を使う。\n\nnames(df)\n\n [1] \"Country\"        \"Population\"     \"Area\"           \"GDP\"           \n [5] \"PPP\"            \"GDP_per_capita\" \"PPP_per_capita\" \"G7\"            \n [9] \"G20\"            \"OECD\"           \"HDI_2018\"       \"Polity_Score\"  \n[13] \"Polity_Type\"    \"FH_PR\"          \"FH_CL\"          \"FH_Total\"      \n[17] \"FH_Status\"      \"Continent\"     \n\n\n　この実習用データは186カ国の社会経済・政治体制のデータであり、18個の変数で構成されている。詳細は以下の通りである。\n\n\n\n変数名\n説明\n\n変数名\n説明\n\n\n\n\nCountry\n国名\n\nOECD\nOECD加盟有無\n\n\nPopulation\n人口\n\nHDI_2018\n人間開発指数 (2018年)\n\n\nArea\n面積( \\(\\text{km}^2\\) )\n\nPolity_Score\n政治体制のスコア\n\n\nGDP\n国内総生産（ドル）\n\nPolity_Type\n政治体制\n\n\nPPP\n購買力平価国内総生産\n\nFH_PR\n政治的自由\n\n\nGDP_per_capita\n一人当たりGDP\n\nFH_CL\n市民的自由\n\n\nPPP_per_capita\n一人当たりPPP\n\nFH_Total\nFH_PR + FH_CL\n\n\nG7\nG7加盟有無\n\nFH_Status\n自由の状態\n\n\nG20\nG20加盟有無\n\nContinent\n大陸"
  },
  {
    "objectID": "materials/handling1.html#列の抽出",
    "href": "materials/handling1.html#列の抽出",
    "title": "第9回講義資料",
    "section": "列の抽出",
    "text": "列の抽出\n　データフレームから特定の列（column）を抽出する際はselect()関数を使用する。select()関数の第一引数はデータフレームのオブジェクト名であり、第二引数以降では抽出する列名を記入する。第一引数がデータフレームであるため、パイプ演算子を使うことが可能である。\n\n\n\nパイプを使わない書き方\nselect(データ, 変数名1, 変数名2, ...)\n\n\n\n\n\nパイプを使う書き方\nデータ %>%\n  select(変数名1, 変数名2, ...)\n\n\n\n\n\n\n\n\n\n注意: select()関数は複数ある!\n\n\n\nselect()関数は{dplyr}だけでなく、{MASS}からも提供されるが、別の関数である。\n\n{MASS}もデータ分析において頻繁に使われるパッケージであるため、select()だけだと、どのパッケージのselect()か分からなくなる場合がある。\nエラーが生じる場合は、dplyr::select()など、パッケージ名を指定すること\n\n\n\n　それではいくつかの例を紹介しよう。まずはdfからCountry、Population、HDI_2018列を抽出してみよう。\n\ndf %>%                                  # dfから\n  select(Country, Population, HDI_2018) # Country, Population, HDI_2018のみ抽出する\n\n# A tibble: 186 × 3\n   Country             Population HDI_2018\n   <chr>                    <dbl>    <dbl>\n 1 Afghanistan           38928346    0.496\n 2 Albania                2877797    0.791\n 3 Algeria               43851044    0.759\n 4 Andorra                  77265    0.857\n 5 Angola                32866272    0.574\n 6 Antigua and Barbuda      97929    0.776\n 7 Argentina             45195774    0.83 \n 8 Armenia                2963243    0.76 \n 9 Australia             25499884    0.938\n10 Austria                9006398    0.914\n# … with 176 more rows\n\n\n　この操作を第8回で紹介した方法で行う場合、以下のようなコードとなる。どちらの方が可読性が良いかは一目瞭然だろう。\n\n\n\n既存の書き方\n\ndf[, c(\"Country\", \"Population\", \"HDI_2018\")]\n\n# A tibble: 186 × 3\n   Country             Population HDI_2018\n   <chr>                    <dbl>    <dbl>\n 1 Afghanistan           38928346    0.496\n 2 Albania                2877797    0.791\n 3 Algeria               43851044    0.759\n 4 Andorra                  77265    0.857\n 5 Angola                32866272    0.574\n 6 Antigua and Barbuda      97929    0.776\n 7 Argentina             45195774    0.83 \n 8 Armenia                2963243    0.76 \n 9 Australia             25499884    0.938\n10 Austria                9006398    0.914\n# … with 176 more rows\n\n\n\n\n\n\n\nTidyverseな書き方\n\ndf %>%\n    select(Country, Population, HDI_2018)\n\n# A tibble: 186 × 3\n   Country             Population HDI_2018\n   <chr>                    <dbl>    <dbl>\n 1 Afghanistan           38928346    0.496\n 2 Albania                2877797    0.791\n 3 Algeria               43851044    0.759\n 4 Andorra                  77265    0.857\n 5 Angola                32866272    0.574\n 6 Antigua and Barbuda      97929    0.776\n 7 Argentina             45195774    0.83 \n 8 Armenia                2963243    0.76 \n 9 Australia             25499884    0.938\n10 Austria                9006398    0.914\n# … with 176 more rows\n\n\n\n\n\n　注意すべき点として、この時点では抽出・出力されただけだということだ。抽出したデータを引き続き使うためには、代入演算子（<-）を使って、抽出した結果を別途のオブジェクトとして格納する必要がある3。たとえば、dfから3つの変数を抽出したものをdf2という名で作業環境内に格納するためには以下のように入力する。\ndf2 <- df %>%\n  select(Country, Population, HDI_2018)\n\n\n\n\n\n\n課題では格納が必要な場合もある\n\n\n\n課題の問題には「出力せよ」だけでなく、「格納した上で出力せよ」といった形式もある。加工したデータを引き続き使うためには格納が必須であるため、問題文を注意深く読むこと。\n\n\n　select()関数のもう一つの特徴は、変数名の変更と抽出を同時に行えることだ。抽出する際、新しい変数名 = 既存の変数名と記入すれば、抽出と同時に変数名も変更できる。たとえば、dfからCountry、Population、HDI_2018を抽出し、HDI_2018の変数名をHDIに変更したい場合は以下のように書く。\n\ndf %>%\n    select(Country, Population, HDI = HDI_2018)\n\n# A tibble: 186 × 3\n   Country             Population   HDI\n   <chr>                    <dbl> <dbl>\n 1 Afghanistan           38928346 0.496\n 2 Albania                2877797 0.791\n 3 Algeria               43851044 0.759\n 4 Andorra                  77265 0.857\n 5 Angola                32866272 0.574\n 6 Antigua and Barbuda      97929 0.776\n 7 Argentina             45195774 0.83 \n 8 Armenia                2963243 0.76 \n 9 Australia             25499884 0.938\n10 Austria                9006398 0.914\n# … with 176 more rows\n\n\n　抽出は行わず、変数名のみを変更したい場合はrename()関数を使用する。使い方はselect()関数と同じである。たとえば、dfのPopulationをJinkoに、AreaをMensekiに変更し、18列は温存する場合は以下のように書く。\n\ndf %>%\n    rename(Jinko = Population, Menseki = Area)\n\n# A tibble: 186 × 18\n   Country      Jinko Menseki    GDP     PPP GDP_per_capita PPP_per_capita    G7\n   <chr>        <dbl>   <dbl>  <dbl>   <dbl>          <dbl>          <dbl> <dbl>\n 1 Afghanistan 3.89e7  652860 1.91e4  8.27e4           491.          2125.     0\n 2 Albania     2.88e6   27400 1.53e4  3.97e4          5309.         13781.     0\n 3 Algeria     4.39e7 2381740 1.70e5  4.97e5          3876.         11324.     0\n 4 Andorra     7.73e4     470 3.15e3 NA              40821.            NA      0\n 5 Angola      3.29e7 1246700 9.46e4  2.19e5          2879.          6649.     0\n 6 Antigua an… 9.79e4     440 1.73e3  2.08e3         17643.         21267.     0\n 7 Argentina   4.52e7 2736690 4.50e5  1.04e6          9949.         22938.     0\n 8 Armenia     2.96e6   28470 1.37e4  3.84e4          4614.         12974.     0\n 9 Australia   2.55e7 7682300 1.39e6  1.28e6         54615.         50001.     0\n10 Austria     9.01e6   82409 4.46e5  5.03e5         49555.         55824.     0\n# … with 176 more rows, and 10 more variables: G20 <dbl>, OECD <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>\n\n\n　18の変数の中から17個を抽出したい場合はselect()内に17つの変数名を入れれば良いが、これは非効率的である。select()関数は変数名の前に! (推奨)、または-を付けることで、特定の列を除外することができる。また、2つ以上の変数を除外する場合、変数名をc()や、後述する:でまとめることもできる。。\n　たとえば、dfからPopulationとArea、GDP、PPP列を除外するコードは以下の通りである。\n\ndf %>%\n    select(!c(Population, Area, GDP, PPP))\n\n# A tibble: 186 × 14\n   Country GDP_per_capita PPP_per_capita    G7   G20  OECD HDI_2018 Polity_Score\n   <chr>            <dbl>          <dbl> <dbl> <dbl> <dbl>    <dbl>        <dbl>\n 1 Afghan…           491.          2125.     0     0     0    0.496           -1\n 2 Albania          5309.         13781.     0     0     0    0.791            9\n 3 Algeria          3876.         11324.     0     0     0    0.759            2\n 4 Andorra         40821.            NA      0     0     0    0.857           NA\n 5 Angola           2879.          6649.     0     0     0    0.574           -2\n 6 Antigu…         17643.         21267.     0     0     0    0.776           NA\n 7 Argent…          9949.         22938.     0     1     0    0.83             9\n 8 Armenia          4614.         12974.     0     0     0    0.76             7\n 9 Austra…         54615.         50001.     0     1     1    0.938           10\n10 Austria         49555.         55824.     0     0     1    0.914           10\n# … with 176 more rows, and 6 more variables: Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>\n\n\n　以上の例だと、PopulationからPPPは連続して位置する変数であるが、{dplyr}では:演算子を使うと、XXからYYまでといった選択ができる。たとえば、「PopulationからPPPまで」は「Population:PPP」と表記する。つまり、上記のコードは以下のように書くこともできる。\n\ndf %>%\n    select(!c(Population:PPP))\n\n# A tibble: 186 × 14\n   Country GDP_per_capita PPP_per_capita    G7   G20  OECD HDI_2018 Polity_Score\n   <chr>            <dbl>          <dbl> <dbl> <dbl> <dbl>    <dbl>        <dbl>\n 1 Afghan…           491.          2125.     0     0     0    0.496           -1\n 2 Albania          5309.         13781.     0     0     0    0.791            9\n 3 Algeria          3876.         11324.     0     0     0    0.759            2\n 4 Andorra         40821.            NA      0     0     0    0.857           NA\n 5 Angola           2879.          6649.     0     0     0    0.574           -2\n 6 Antigu…         17643.         21267.     0     0     0    0.776           NA\n 7 Argent…          9949.         22938.     0     1     0    0.83             9\n 8 Armenia          4614.         12974.     0     0     0    0.76             7\n 9 Austra…         54615.         50001.     0     1     1    0.938           10\n10 Austria         49555.         55824.     0     0     1    0.914           10\n# … with 176 more rows, and 6 more variables: Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>\n\n\n　むろん、:は否定演算子じゃなくても使える。dfのCountry〜PPP, HDI_2018列を抽出するコードは以下の通りである。\n\ndf %>%\n    select(Country:PPP, HDI_2018)\n\n# A tibble: 186 × 6\n   Country             Population    Area      GDP      PPP HDI_2018\n   <chr>                    <dbl>   <dbl>    <dbl>    <dbl>    <dbl>\n 1 Afghanistan           38928346  652860   19101.   82737.    0.496\n 2 Albania                2877797   27400   15278.   39658.    0.791\n 3 Algeria               43851044 2381740  169988.  496572.    0.759\n 4 Andorra                  77265     470    3154.      NA     0.857\n 5 Angola                32866272 1246700   94635.  218533.    0.574\n 6 Antigua and Barbuda      97929     440    1728.    2083.    0.776\n 7 Argentina             45195774 2736690  449663. 1036721.    0.83 \n 8 Armenia                2963243   28470   13673.   38446.    0.76 \n 9 Australia             25499884 7682300 1392681. 1275027.    0.938\n10 Austria                9006398   82409  446315.  502771.    0.914\n# … with 176 more rows\n\n\n　以下では変数を選択するより洗練された方法について解説する。変数名が特定の文字列で始まる列を選択する関数としてstarts_with()がある。たとえば、dfからCountry, \"FH\"で始まる列を抽出する場合は以下のように書く。\n\ndf %>%\n    select(Country, starts_with(\"FH\"))\n\n# A tibble: 186 × 5\n   Country             FH_PR FH_CL FH_Total FH_Status\n   <chr>               <dbl> <dbl>    <dbl> <chr>    \n 1 Afghanistan            13    14       27 NF       \n 2 Albania                27    40       67 PF       \n 3 Algeria                10    24       34 NF       \n 4 Andorra                39    55       94 F        \n 5 Angola                 11    21       32 NF       \n 6 Antigua and Barbuda    33    52       85 F        \n 7 Argentina              35    50       85 F        \n 8 Armenia                21    32       53 PF       \n 9 Australia              40    57       97 F        \n10 Austria                37    56       93 F        \n# … with 176 more rows\n\n\n　starts_with()の前に!を付けると該当する列が除外される。たとえば、\"GDP\"と\"PPP\"で始まる列を除外する場合はstarts_with()内にcharacter型ベクトルを入れる。\n\ndf %>%\n    select(!starts_with(c(\"GDP\", \"PPP\")))\n\n# A tibble: 186 × 14\n   Country Population   Area    G7   G20  OECD HDI_2018 Polity_Score Polity_Type\n   <chr>        <dbl>  <dbl> <dbl> <dbl> <dbl>    <dbl>        <dbl> <chr>      \n 1 Afghan…   38928346 6.53e5     0     0     0    0.496           -1 Closed Ano…\n 2 Albania    2877797 2.74e4     0     0     0    0.791            9 Democracy  \n 3 Algeria   43851044 2.38e6     0     0     0    0.759            2 Open Anocr…\n 4 Andorra      77265 4.7 e2     0     0     0    0.857           NA <NA>       \n 5 Angola    32866272 1.25e6     0     0     0    0.574           -2 Closed Ano…\n 6 Antigu…      97929 4.4 e2     0     0     0    0.776           NA <NA>       \n 7 Argent…   45195774 2.74e6     0     1     0    0.83             9 Democracy  \n 8 Armenia    2963243 2.85e4     0     0     0    0.76             7 Democracy  \n 9 Austra…   25499884 7.68e6     0     1     1    0.938           10 Full Democ…\n10 Austria    9006398 8.24e4     0     0     1    0.914           10 Full Democ…\n# … with 176 more rows, and 5 more variables: FH_PR <dbl>, FH_CL <dbl>,\n#   FH_Total <dbl>, FH_Status <chr>, Continent <chr>\n\n\n　starts_with()に似たような機能をする関数として特定の文字列で終わる列を選択するends_with()と特定の文字列を含む列を選択するcontains()がある。これらの使い方はstarts_with()と同じだ。\n　続いて、列の順番を変更する方法を紹介する。実はselect()関数は書かれた順番で列を抽出する。たとえば、G7からOECD列をCountryとPopulationの間へ移動する場合は以下のように書く。\n\ndf %>%\n    select(Country, G7:OECD, Population:PPP_per_capita, HDI_2018:Continent)\n\n# A tibble: 186 × 18\n   Country        G7   G20  OECD Population   Area    GDP     PPP GDP_per_capita\n   <chr>       <dbl> <dbl> <dbl>      <dbl>  <dbl>  <dbl>   <dbl>          <dbl>\n 1 Afghanistan     0     0     0   38928346 6.53e5 1.91e4  8.27e4           491.\n 2 Albania         0     0     0    2877797 2.74e4 1.53e4  3.97e4          5309.\n 3 Algeria         0     0     0   43851044 2.38e6 1.70e5  4.97e5          3876.\n 4 Andorra         0     0     0      77265 4.7 e2 3.15e3 NA              40821.\n 5 Angola          0     0     0   32866272 1.25e6 9.46e4  2.19e5          2879.\n 6 Antigua an…     0     0     0      97929 4.4 e2 1.73e3  2.08e3         17643.\n 7 Argentina       0     1     0   45195774 2.74e6 4.50e5  1.04e6          9949.\n 8 Armenia         0     0     0    2963243 2.85e4 1.37e4  3.84e4          4614.\n 9 Australia       0     1     1   25499884 7.68e6 1.39e6  1.28e6         54615.\n10 Austria         0     0     1    9006398 8.24e4 4.46e5  5.03e5         49555.\n# … with 176 more rows, and 9 more variables: PPP_per_capita <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>\n\n\n　しかし、いくら:演算子があるとはいえ、全ての変数名を書く必要がある。抽出と同時に順番を変更するならselect()が便利だが、順番のみを変更するならrelocate()関数がおすすめである。relocate()関数は移動する変数を指定し、.afterまたは.beforeで移動先を指定する必要がある。\n\n# 特定の変数の後ろへ移動\nデータ %>%\n    relocate(移動したい変数名, .after = 変更先)\n# 特定の変数の前へ移動\nデータ %>%\n    relocate(移動したい変数名, .before = 変更先)\n\n　たとえば、G7からOECD列をCountryの後ろへ移動させる場合は以下のように書く。\n\ndf %>%\n    relocate(G7:OECD, .after = Country)  # .before = PopulationもOK\n\n# A tibble: 186 × 18\n   Country        G7   G20  OECD Population   Area    GDP     PPP GDP_per_capita\n   <chr>       <dbl> <dbl> <dbl>      <dbl>  <dbl>  <dbl>   <dbl>          <dbl>\n 1 Afghanistan     0     0     0   38928346 6.53e5 1.91e4  8.27e4           491.\n 2 Albania         0     0     0    2877797 2.74e4 1.53e4  3.97e4          5309.\n 3 Algeria         0     0     0   43851044 2.38e6 1.70e5  4.97e5          3876.\n 4 Andorra         0     0     0      77265 4.7 e2 3.15e3 NA              40821.\n 5 Angola          0     0     0   32866272 1.25e6 9.46e4  2.19e5          2879.\n 6 Antigua an…     0     0     0      97929 4.4 e2 1.73e3  2.08e3         17643.\n 7 Argentina       0     1     0   45195774 2.74e6 4.50e5  1.04e6          9949.\n 8 Armenia         0     0     0    2963243 2.85e4 1.37e4  3.84e4          4614.\n 9 Australia       0     1     1   25499884 7.68e6 1.39e6  1.28e6         54615.\n10 Austria         0     0     1    9006398 8.24e4 4.46e5  5.03e5         49555.\n# … with 176 more rows, and 9 more variables: PPP_per_capita <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>"
  },
  {
    "objectID": "materials/handling1.html#行の抽出",
    "href": "materials/handling1.html#行の抽出",
    "title": "第9回講義資料",
    "section": "行の抽出",
    "text": "行の抽出\n　列の抽出はselect()関数を使うが、行の抽出にはfilter()関数を使う。行の抽出は基本的に、指定された条件に合致する行を抽出することを意味する。したがって、filter()関数を使うためには論理演算子（==、>、&など）の理解が必須だ。\n　filter()関数の使い方は以下の通りである。パイプを使わずデータオブジェクト名をfilter()の第一引数として使っても良い。\n\nデータ %>%\n    filter(条件1, 条件2, ...)\n\n　たとえば、dfからContinentの値が\"Europe\"である行を抽出し、Country〜PPP, HDI_2018列を抽出し、HDI_2018はHDIに変更するコードは以下の通りである。行の抽出と列の抽出を同時に行っているため、filter()関数とselect()関数を組み合わせる必要がある。\n\ndf %>%\n    filter(Continent == \"Oceania\") %>%\n    select(Country:PPP, HDI = HDI_2018)\n\n# A tibble: 4 × 6\n  Country          Population    Area      GDP      PPP   HDI\n  <chr>                 <dbl>   <dbl>    <dbl>    <dbl> <dbl>\n1 Australia          25499884 7682300 1392681. 1275027. 0.938\n2 Fiji                 896445   18270    5536.   12496. 0.724\n3 New Zealand         4842780  263820  206929.  204260. 0.921\n4 Papua New Guinea    8947024  452860   24970.   37319. 0.543\n\n\n　ただし、filter()とselect()の順番に注意しよう。filter()が3行目、select()が2行目に位置する場合、以下のコードは走らない。なぜなら、select()関数を通すことでContinent列が除外されるからだ。\n　filter()内の条件式は二つ以上でも使える。たとえば、二つの条件を同時に満たす行を抽出するとしよう。この場合はAND演算子（&）を使う。たとえば、dfからContinentが\"Asia\" (条件1)、HDI_2018が0.8以上 (条件2)の行を抽出し、CountryとHDI_2018列を抽出する場合、以下のように書く。\n\ndf %>%\n    filter(Continent == \"Asia\" & HDI_2018 >= 0.8) %>%\n    select(Country, HDI_2018)\n\n# A tibble: 13 × 2\n   Country              HDI_2018\n   <chr>                   <dbl>\n 1 Bahrain                 0.838\n 2 Brunei                  0.845\n 3 Israel                  0.906\n 4 Japan                   0.915\n 5 Kazakhstan              0.817\n 6 South Korea             0.906\n 7 Kuwait                  0.808\n 8 Malaysia                0.804\n 9 Oman                    0.834\n10 Qatar                   0.848\n11 Saudi Arabia            0.857\n12 Singapore               0.935\n13 United Arab Emirates    0.866\n\n\n　二つの条件式を&で繋いだことに注意されたい。filter()関数で複数の条件式を使う場合は,、&、|のいずれかを使うが、,と&は同じ（=AND演算子）である。混乱を避けるために&の使用を推奨するが、,を使っても良い。\n　もう一つの演算子はOR演算子（|）である。これは2つ以上の条件のうち、一つ以上の条件を満たす行を抽出することを意味する。たとえば、dfからContinentが\"Asia\"（条件1）か\"Oceania\"（条件2）の行を抽出し、CountryとHDI_2018、Continent列を抽出する場合、以下のように書く。\n\ndf %>%\n    filter(Continent == \"Asia\" | Continent == \"Oceania\") %>%\n    select(Country, HDI_2018, Continent)\n\n# A tibble: 46 × 3\n   Country     HDI_2018 Continent\n   <chr>          <dbl> <chr>    \n 1 Afghanistan    0.496 Asia     \n 2 Australia      0.938 Oceania  \n 3 Bahrain        0.838 Asia     \n 4 Bangladesh     0.614 Asia     \n 5 Bhutan         0.617 Asia     \n 6 Brunei         0.845 Asia     \n 7 Burma          0.584 Asia     \n 8 Cambodia       0.581 Asia     \n 9 China          0.758 Asia     \n10 Fiji           0.724 Oceania  \n# … with 36 more rows\n\n\n　AND演算子とOR演算子は同時に使うこともできる。たとえば、dfからContinentが\"Asia\"（条件1）か\"Oceania\"（条件2）でありながら、HDI_2018が0.9以上 (条件3)の行を抽出し、CountryとHDI_2018、Continent列を抽出する場合は以下のようになる。ただし、AND演算子とOR演算子を同時に使用する場合は適切な箇所にカッコ（()）を付ける必要がある。\n\ndf %>%\n    filter((Continent == \"Asia\" | Continent == \"Oceania\"), HDI_2018 >= 0.9) %>%\n    select(Country, HDI_2018, Continent)\n\n# A tibble: 6 × 3\n  Country     HDI_2018 Continent\n  <chr>          <dbl> <chr>    \n1 Australia      0.938 Oceania  \n2 Israel         0.906 Asia     \n3 Japan          0.915 Asia     \n4 South Korea    0.906 Asia     \n5 New Zealand    0.921 Oceania  \n6 Singapore      0.935 Asia     \n\n\n　実は上記のコード、もう少し効率化することもできる。そのためには%in%演算子を使う必要があるが、==を用いる複数の条件式がOR演算子で繋がっている場合、大変便利な演算子である。たとえば、Continentの値がc(\"Asia\", \"Oceainia\")のいずれかに該当するかどうかを判定する場合は、これまで(Continent == \"Asia\" | Continent == \"Oceania\")と書いたが、これはContinent %in% c(\"Asia\", \"Oceania\")と同じコードである。したがって、上記のコードは以下のように簡素化することもできる。\n\ndf %>%\n    filter(Continent %in% c(\"Asia\", \"Oceania\"), HDI_2018 >= 0.9) %>%\n    select(Country, HDI_2018, Continent)\n\n# A tibble: 6 × 3\n  Country     HDI_2018 Continent\n  <chr>          <dbl> <chr>    \n1 Australia      0.938 Oceania  \n2 Israel         0.906 Asia     \n3 Japan          0.915 Asia     \n4 South Korea    0.906 Asia     \n5 New Zealand    0.921 Oceania  \n6 Singapore      0.935 Asia"
  },
  {
    "objectID": "materials/handling1.html#欠損値の扱い",
    "href": "materials/handling1.html#欠損値の扱い",
    "title": "第9回講義資料",
    "section": "欠損値の扱い",
    "text": "欠損値の扱い\n　データには欠損値が含まれていることが多く、Rでは欠損値をNAと表記する。欠損値が含まれている場合、多重代入法（multiple imputation）などの処理を施すことも可能だが、これはかなり高度の知識を要する。多重代入法を使わない場合は、欠損値を含むケースを除外することが有効である。なぜなら欠損値を含まれている場合、関数が使えないケースも多いからだ4。たとえば、一人あたり購買力平価GDP（PPP_per_capita）には欠損値が含まれている。この場合、平均値を計算するmean()関数はそのまま使えない。\n\nmean(df$PPP_per_capita)\n\n[1] NA\n\n\n　この場合、mean()関数内にna.rm = TRUEを付けて欠損していない値の平均値を求めるように指定するか、予め欠損値が含まれているケースを除外する必要がある。ここでは後者について説明する。\n　まず、dfのPPPが欠損している行を抽出し、CountryからPPP列まで出力してみよう。PPPが欠損している場合はNAの値を取るため、filter()内にPPP == NAと条件式を書けば動くかも知れない。\n\ndf %>%\n    filter(PPP == NA) %>%\n    select(Country:PPP)\n\n# A tibble: 0 × 5\n# … with 5 variables: Country <chr>, Population <dbl>, Area <dbl>, GDP <dbl>,\n#   PPP <dbl>\n\n\n　いや、そうでもなかった。実はある値がNAか否かを判定するために==演算子は使えない。代わりにis.na()関数を使用する。\n\ndf %>%\n    filter(is.na(PPP)) %>%\n    select(Country:PPP)\n\n# A tibble: 8 × 5\n  Country        Population   Area     GDP   PPP\n  <chr>               <dbl>  <dbl>   <dbl> <dbl>\n1 Andorra             77265    470   3154.    NA\n2 Cuba             11326616 106440 100023     NA\n3 Holy See              801      0     NA     NA\n4 Liechtenstein       38128    160   6553.    NA\n5 Monaco              39242      1   7188.    NA\n6 Somalia          15893222 627340    917.    NA\n7 Syria            17500658 183630  40405.    NA\n8 Western Sahara     597339 266000    909.    NA\n\n\n　しかし、我々が本当にやりたいことはPPPが欠損している行のみ抽出するのではなく、 PPPが欠損している行を除外することだ。ここでも否定を意味する!が使える。\n\ndf %>%\n    filter(!is.na(PPP)) %>%\n    select(Country:PPP)\n\n# A tibble: 178 × 5\n   Country             Population    Area      GDP      PPP\n   <chr>                    <dbl>   <dbl>    <dbl>    <dbl>\n 1 Afghanistan           38928346  652860   19101.   82737.\n 2 Albania                2877797   27400   15278.   39658.\n 3 Algeria               43851044 2381740  169988.  496572.\n 4 Angola                32866272 1246700   94635.  218533.\n 5 Antigua and Barbuda      97929     440    1728.    2083.\n 6 Argentina             45195774 2736690  449663. 1036721.\n 7 Armenia                2963243   28470   13673.   38446.\n 8 Australia             25499884 7682300 1392681. 1275027.\n 9 Austria                9006398   82409  446315.  502771.\n10 Azerbaijan            10139177   82658   48048.  144556.\n# … with 168 more rows\n\n\n　このようにPPPが欠損していない行だけが抽出された。また、より簡単な方法としてdrop_na()関数を使うこともできる。これは()内で指定した変数が欠損している行をすべて除外する関数であり、複数の変数を同時に指定できるので便利である。たとえば、dfからPPPとPolity_Scoreが欠損していない行だけを抽出し、CountryからPPP、そしてPolity_Score列を残してみよう。\n\ndf %>%\n    drop_na(PPP, Polity_Score) %>%\n    select(Country:PPP, Polity_Score)\n\n# A tibble: 155 × 6\n   Country     Population    Area      GDP      PPP Polity_Score\n   <chr>            <dbl>   <dbl>    <dbl>    <dbl>        <dbl>\n 1 Afghanistan   38928346  652860   19101.   82737.           -1\n 2 Albania        2877797   27400   15278.   39658.            9\n 3 Algeria       43851044 2381740  169988.  496572.            2\n 4 Angola        32866272 1246700   94635.  218533.           -2\n 5 Argentina     45195774 2736690  449663. 1036721.            9\n 6 Armenia        2963243   28470   13673.   38446.            7\n 7 Australia     25499884 7682300 1392681. 1275027.           10\n 8 Austria        9006398   82409  446315.  502771.           10\n 9 Azerbaijan    10139177   82658   48048.  144556.           -7\n10 Bahrain        1701575     760   38574.   74230.          -10\n# … with 145 more rows"
  },
  {
    "objectID": "materials/handling1.html#行のソート",
    "href": "materials/handling1.html#行のソート",
    "title": "第9回講義資料",
    "section": "行のソート",
    "text": "行のソート\n　最後に行のソート（並び替え）について解説する。行のソートにはarrange()関数を使用する。第一引数はデータフレームのオブジェクトであり、第二引数以降は並び替えの基準となる変数名である。ソートは基本的には昇順、つまり値が小さい行が上に表示される。\n　たとえば、dfからContinentの値が\"Africa\"の行のみを抽出し、Polity_Scoreが小さい国5を上位にする。そして、CountryとPPP_per_capita、Polity_Score列のみ残すコードは以下の通りである。\n\ndf %>%\n    filter(Continent == \"Africa\") %>%\n    arrange(Polity_Score) %>%\n    select(Country, PPP_per_capita, Polity_Score)\n\n# A tibble: 54 × 3\n   Country             PPP_per_capita Polity_Score\n   <chr>                        <dbl>        <dbl>\n 1 Eswatini                     8634.           -9\n 2 Eritrea                      1860.           -7\n 3 Equatorial Guinea           19458.           -6\n 4 Cameroon                     3506.           -4\n 5 Congo (Brazzaville)          3191.           -4\n 6 Egypt                       11198.           -4\n 7 Morocco                      7554.           -4\n 8 Sudan                        4063.           -4\n 9 Comoros                      3007.           -3\n10 Congo (Kinshasa)             1043.           -3\n# … with 44 more rows\n\n\n　もし、Polity_Scoreが高い国を上位にしたい場合は、変数名をdesc()関数で囲む。\n\ndf %>%\n    filter(Continent == \"Africa\") %>%\n    arrange(desc(Polity_Score)) %>%\n    select(Country, PPP_per_capita, Polity_Score)\n\n# A tibble: 54 × 3\n   Country      PPP_per_capita Polity_Score\n   <chr>                 <dbl>        <dbl>\n 1 Mauritius            22637.           10\n 2 Kenya                 4105.            9\n 3 South Africa         12605.            9\n 4 Botswana             17311.            8\n 5 Ghana                 5097.            8\n 6 Lesotho               3019.            8\n 7 Benin                 3067.            7\n 8 Liberia               1461.            7\n 9 Nigeria               5018.            7\n10 Senegal               3248.            7\n# … with 44 more rows\n\n\n　しかし、Polity_Scoreが同点の場合はどうなるだろうか。この場合、第2の基準となる変数を指定すると、第1基準が同点の場合、第2基準変数の値に応じてソートされる。以下は、Polity_Scoreが高い国を上位にし、同点の場合はPPP_per_capitaが高い国を上位にするコード（さらに、変数名も変更）である。\n\ndf %>%\n    filter(Continent == \"Africa\") %>%\n    arrange(desc(Polity_Score), desc(PPP_per_capita)) %>%\n    select(Country, PPP = PPP_per_capita, Polity = Polity_Score)\n\n# A tibble: 54 × 3\n   Country         PPP Polity\n   <chr>         <dbl>  <dbl>\n 1 Mauritius    22637.     10\n 2 South Africa 12605.      9\n 3 Kenya         4105.      9\n 4 Botswana     17311.      8\n 5 Ghana         5097.      8\n 6 Lesotho       3019.      8\n 7 Tunisia      10773.      7\n 8 Nigeria       5018.      7\n 9 Senegal       3248.      7\n10 Benin         3067.      7\n# … with 44 more rows"
  },
  {
    "objectID": "materials/handling1.html#教科書",
    "href": "materials/handling1.html#教科書",
    "title": "第9回講義資料",
    "section": "教科書",
    "text": "教科書\n\nパイプ演算子: 教科書第12.2章\n列の抽出: 教科書第12.3章\n行の抽出: 教科書第12.4章\n行のソート: 教科書第12.5章"
  },
  {
    "objectID": "materials/datatype.html",
    "href": "materials/datatype.html",
    "title": "第7回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/datatype.html#データ型とは",
    "href": "materials/datatype.html#データ型とは",
    "title": "第7回講義資料",
    "section": "データ型とは",
    "text": "データ型とは\n　ベクトル（vector）はデータ構造（data structure）であり、ベクトル内の一つ一つの要素は数値や、文字など様々なデータ型（data type）の値を取り得る。\n\nobj1 <- c(1, 3, 5, 7, 9, 11)\nobj2 <- c(\"Kansai\", \"Kwansei Gakuin\", \"Doshisha\", \"Ritsumeikan\")\nobj3 <- c(TRUE, FALSE, FALSE)\nobj4 <- \"R\"\n\n\nobj1: 長さ6の数値型ベクトル\nobj2: 長さ4の文字型ベクトル\nobj3: 長さ3の論理型ベクトル\nobj4: 長さ1の文字型ベクトル\n\n長さ1のベクトルは原子ベクトル（atomic vector）とも呼ばれる\n\n\n\n\n\n\n\n\nベクトルの長さが知りたい\n\n\n\nベクトルの長さはlength(オブジェクト名)で計算できる。たとえば、Object2の長さは4である。\n\nlength(obj2)\n\n[1] 4\n\n\n\n\n　他にもRには様々なデータ型が使える。以下のリストはRが提供するデータ型の一部であり、太字は本講義で紹介するデータ型である。ここでは説明を割愛するが日付型（Date型）もよく使われるデータ型であり、それそれの詳細は教科書第8章を参照されたい。\n\nLogical\nNumeric\nComplex\nCharacter\nFactor\nDate\nNA\nNULL\nNaN\nInf\nその他"
  },
  {
    "objectID": "materials/datatype.html#データ型の確認",
    "href": "materials/datatype.html#データ型の確認",
    "title": "第7回講義資料",
    "section": "データ型の確認",
    "text": "データ型の確認\n　ベクトル内の要素は全て同じデータ型を取るが、そのデータ型を確認するためには、class(ベクトル・オブジェクト名)関数を使用する。先ほど作成した4つのベクトルのデータ型を確認してみよう。\n\nclass(obj1) # 数値型 (numeric)\n\n[1] \"numeric\"\n\nclass(obj2) # 文字型 (character)\n\n[1] \"character\"\n\nclass(obj3) # 論理型 (logical)\n\n[1] \"logical\"\n\nclass(obj4) # 文字型 (character)\n\n[1] \"character\""
  },
  {
    "objectID": "materials/datatype.html#logical型",
    "href": "materials/datatype.html#logical型",
    "title": "第7回講義資料",
    "section": "Logical型",
    "text": "Logical型\n　論理型（logical型）とはTRUEとFALSEのみで構成されるデータ型である。論理演算子の計算結果は必ず以下のように論理型の結果が返される。\n\n(2 + 3) == (4 + 1)\n\n[1] TRUE\n\n\n　この結果を代入演算子（<-）を使って、オブジェクトに格納するとlogical型ベクトルが作業環境内に格納される。\n\nlogi_vec1 <- (2 + 3) == (2 * 3)\nlogi_vec1\n\n[1] FALSE\n\nclass(logi_vec1)\n\n[1] \"logical\"\n\n\nあるオブジェクトがlogical型か否かを判定するにはis.logical()を使用する。\n\nis.logical(FALSE)\n\n[1] TRUE\n\n\n\n作成\n　Logical型ベクトルを作成するためには、通常のベクトルと同様、c()関数で作成する。\n\nlogi_vec2 <- c(TRUE, FALSE, TRUE, TRUE, FALSE)\nlogi_vec2\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n\n　ここでのTRUEはT、FALSEはFと略すことが出来るが、推奨しない。必ずTRUEとFALSEで表記すること。\n\nlogi_vec3 <- c(T, F, T, T, F)\nlogi_vec3\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n\n\n\n注意点\n　Logical型の値であるTRUEとFALSEを\"で囲んではいけない。もし、一つでも\"で囲んでしまうと、そのベクトルlogical型でなく、後ほど紹介するcharacter型へ変換される。\n\n# 2つ目のFALSEを\"で囲むと...\nlogi_vec4 <- c(TRUE, \"FALSE\", TRUE, TRUE, FALSE)\nlogi_vec4\n\n[1] \"TRUE\"  \"FALSE\" \"TRUE\"  \"TRUE\"  \"FALSE\"\n\nclass(logi_vec4)\n\n[1] \"character\"\n\n\n\n\n使い方\n　直接TRUEやFALSEが格納されたベクトルを使う場面はほとんどない。つまり、ほとんどのlogical型ベクトルは何らかの論理演算子から返されたものである。以下の例は、my_vec1から奇数の要素のみを抽出するために、logi_vec5というベクトルを作成する例である。\n\nmy_vec1  <- c(89, 28, 93, 64, 6)\nlogi_vec5 <- my_vec1 %% 2 == 1 # my_vec1を2で割ったら余りが1か\nlogi_vec5\n\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\nclass(logi_vec5)\n\n[1] \"logical\"\n\nmy_vec1[logi_vec5] # my_vec1から奇数のみ抽出\n\n[1] 89 93\n\nmy_vec1[my_vec1 %% 2 == 0] # 直接式を入れてもOK\n\n[1] 28 64  6"
  },
  {
    "objectID": "materials/datatype.html#numeric型",
    "href": "materials/datatype.html#numeric型",
    "title": "第7回講義資料",
    "section": "Numeric型",
    "text": "Numeric型\n\nnum_vec1 <- c(2, 0, 0, 1, 3)\nnum_vec1\n\n[1] 2 0 0 1 3\n\n# num_vec1のデータ型\nclass(num_vec1)\n\n[1] \"numeric\"\n\n# num_vec1がnumeric型か否かを判定\nis.numeric(num_vec1)\n\n[1] TRUE\n\n\n\nNumeric型の演算\n　以下ではnumeric型ベクトル同士の演算について解説する。Numeric型ベクトル同士は常に可能であるが、ベクトルの長さによって動きがやや異なる（ベクトル・リサイクル）。ベクトル・リサイクルは第3回にて解説したが、ここで改めて解説する。\nケース1: 同じ長さのベクトル同士の演算\n　2つのベクトルの長さが同じ場合、同じ位置の要素同士の演算となる。したがって、返ってくる結果（ベクトル）の長さは元のベクトルの長さと同じとなる。たとえば、長さ5の2つのベクトル同士の演算を考えてみよう。\n\nnum_vec2 <- c(1, 2, 3, 4, 5)  # 長さ5のnumeric型ベクトル\nnum_vec3 <- c(11, 7, 5, 3, 2) # 長さ5のnumeric型ベクトル\n\nnum_vec2 + num_vec3 # c(1+11, 2+7, 3+5, 4+3, 5+2)\n\n[1] 12  9  8  7  7\n\n\n　この場合、num_vec2の1番目の要素（1）とnum_vec3の1番目の要素（11）の足し算、num_vec2の2番目の要素（2）とnum_vec3の2番目の要素（7）の足し算、…が行われる。\nケース2: 長さ2以上 (A)と長さ1 (B)同士の演算\n　この場合、(A)のそれぞれ要素と(B)の要素同士で演算を行う。長さ5のベクトルに対し、たとえば長さ1のベクトルがc(10)であれば、自動的にc(10, 10, 10, 10, 10)へ変換されたと考えても良いだろう。\n\nnum_vec4 <- 10 # 長さ1の場合、c()はなくてもOK\n\nnum_vec3 / num_vec4 # c(11/10, 7/10, 5/10, 3/10, 2/10)\n\n[1] 1.1 0.7 0.5 0.3 0.2\n\n\nケース3: 長さ2以上と長さ2以上で長さが異なる場合\n　この場合、より短いの要素がリサイクルされる。長さ5のベクトルに対し、たとえば長さ3のベクトルがc(1, 2, 3)であれば、自動的にc(1, 2, 3, 1, 2)へ変換されたと考えても良いだろう。これをRでは「ベクトル・リサイクル」（vector recycle）と呼ぶ。ちなみに、この場合、警告が表示される場合もある。これは長い方のベクトルの長さが短い方の長さの倍数になっていない場合に出力される。しかし、計算そのものには問題がない。\n\nnum_vec5 <- c(1, 2, 3)\n\nnum_vec3 * num_vec5 # c(11*1, 7*2, 5*3, 3*1, 2*2)\n\nWarning in num_vec3 * num_vec5: longer object length is not a multiple of\nshorter object length\n\n\n[1] 11 14 15  3  4\n\n\n\n\n注意点\n　Logical型と同じ理由でnumeric型の値を\"で囲んではいけない。一つでも\"で囲むとNumeric型でなく、Character型へ変換されてしまう。\n\n# 4つ目のFALSEを\"で囲むと...\nnum_vec6 <- c(38, 29, 10, \"94\", 51)\nnum_vec6\n\n[1] \"38\" \"29\" \"10\" \"94\" \"51\"\n\nclass(num_vec6)\n\n[1] \"character\""
  },
  {
    "objectID": "materials/datatype.html#character型",
    "href": "materials/datatype.html#character型",
    "title": "第7回講義資料",
    "section": "Character型",
    "text": "Character型\n　Character型（文字型）は要素が\"で囲まれたデータ型である。\n\nchar_vec1 <- c(\"Kansai\", \"Kwansei-gakuin\", \"Doshisha\", \"Ritsmeikan\")\nchar_vec1\n\n[1] \"Kansai\"         \"Kwansei-gakuin\" \"Doshisha\"       \"Ritsmeikan\"    \n\nclass(char_vec1)\n\n[1] \"character\"\n\nis.character(char_vec1) # char_vec1がcharacter型であればTRUE\n\n[1] TRUE\n\n\n\n文字列の長さ\n　文字列ベクトルの長さを求める場合はlength()関数を使用する。\n\nlength(char_vec1)\n\n[1] 4\n\n\n　ただし、length()関数はベクトルの長さを求める関数であって、各要素の文字数を求める関数ではない。各要素の文字数を求める場合はnchar()関数を使用する。\n\nnchar(char_vec1)\n\n[1]  6 14  8 10\n\n\n\n\n文字の結合\n　本講義では使うことはほとんどないものの、頻繁に使う関数としてpaste()関数（またはpaste0()関数）がある。これは2つの文字列を結合する関数であり、使い方はpaste(Character型ベクトル, Character型ベクトル)である。\nケース1: char_vec1の全要素の後に\"University\"を付ける。\n\nchar_vec2 <- paste(char_vec1, \"University\")\nchar_vec2 # \"University\"の前に自動的にスペースが入る\n\n[1] \"Kansai University\"         \"Kwansei-gakuin University\"\n[3] \"Doshisha University\"       \"Ritsmeikan University\"    \n\n\n　この場合、大学名（たとえば、\"Kansai\"）と\"University\"の間には自動的にスペースが入る。スペースを無くしたい場合は、paste()内にsep = \"\"を追加するか、paste0()関数を使用する。このsep引数は結合される2つの文字列の間に入る文字を意味し、デフォルトはスペース（\" \"）である。\n\npaste(char_vec1, \"University\", sep = \"\")\n\n[1] \"KansaiUniversity\"         \"Kwansei-gakuinUniversity\"\n[3] \"DoshishaUniversity\"       \"RitsmeikanUniversity\"    \n\npaste0(char_vec1, \"University\")\n\n[1] \"KansaiUniversity\"         \"Kwansei-gakuinUniversity\"\n[3] \"DoshishaUniversity\"       \"RitsmeikanUniversity\"    \n\npaste(char_vec1, \"University\", sep = \"-\")\n\n[1] \"Kansai-University\"         \"Kwansei-gakuin-University\"\n[3] \"Doshisha-University\"       \"Ritsmeikan-University\"    \n\n\nケース2: char_vec2の全要素の前に1、2、…を付け、数字と大学名は\".\"で結合\n　結合する2つのベクトルの長さがいずれも2以上の場合、同じ位置の要素同士の結合となる。\n\nchar_vec3 <- paste(1:4, char_vec2, sep = \".\")\nchar_vec3\n\n[1] \"1.Kansai University\"         \"2.Kwansei-gakuin University\"\n[3] \"3.Doshisha University\"       \"4.Ritsmeikan University\""
  },
  {
    "objectID": "materials/datatype.html#factor型",
    "href": "materials/datatype.html#factor型",
    "title": "第7回講義資料",
    "section": "Factor型",
    "text": "Factor型\n　Factor型は見た目上はcharacter型と同じであるが要素に順番（順位）が付いている点で異なる。つまり、factor型は順序付きcharacter型とも言えよう。\n　以下の2つの表形式データの内容は全く同じものである。しかし、左の表の場合大学名列のデータ型はcharacter型（列名の下に<chr>と表示される）、右の表の場合はfactor型（列名の下に<fct>と表示される）である。Factor型変数は要素の順番（順位）が決まっていて、ここでは\"Kansai\" > \"Kwansei-gakuin\" > \"Doshisha\" > \"Ritsumeikan\"の順番で設定してある。\n\n\n大学名がcharacter型の場合\n\n\n# A tibble: 4 × 2\n  大学名         学生数\n  <chr>           <dbl>\n1 Kansai          27736\n2 Kwansei-gakuin  23671\n3 Doshisha        25974\n4 Ritsumeikan     32467\n\n\n\n\n\n大学名がfactor型の場合\n\n\n# A tibble: 4 × 2\n  大学名         学生数\n  <fct>           <dbl>\n1 Kansai          27736\n2 Kwansei-gakuin  23671\n3 Doshisha        25974\n4 Ritsumeikan     32467\n\n\n\n\n　この見た目上は全く同じの2つのデータを使って、大学別学生数の棒グラフを作成した例が以下の図である。\n\n\n\n\n\n\n\n大学名がcharacter型の場合\n\n\n\n\n\n\n\n\n\n\n\n\n大学名がfactor型の場合\n\n\n\n\n\n\n　このようにcharacter型だと、作図の際、大学がアルファベット順で並ぶものの、factor型であれば、予め決めておいた順番で並ぶ。Factor型は図表を作成する際に重宝されるデータ型である。\n\nFactor型の作成\n　ここでは、既存のcharacter型ベクトルをfactor型に変換する方法について紹介する。以下のchar_vec4は関関同立の名前をアルファベット順で格納した長さ4のcharacter型ベクトルである。\n\nchar_vec4 <- c(\"Doshisha\", \"Kansai\", \"Kwansei-gakuin\", \"Ritsumeikan\")\nclass(char_vec4)\n\n[1] \"character\"\n\nchar_vec4\n\n[1] \"Doshisha\"       \"Kansai\"         \"Kwansei-gakuin\" \"Ritsumeikan\"   \n\n\n　Factor型ベクトルはfactor()関数で作成する。第一引数は元となるcharacter型ベクトルであり、levels引数に要素の順位を付ける。\n\nfct_vec1 <- factor(char_vec4,\n                   levels = c(\"Kansai\", \"Kwansei-gakuin\", \"Doshisha\", \"Ritsumeikan\"))\nclass(fct_vec1)\n\n[1] \"factor\"\n\nfct_vec1\n\n[1] Doshisha       Kansai         Kwansei-gakuin Ritsumeikan   \nLevels: Kansai Kwansei-gakuin Doshisha Ritsumeikan\n\n\n　このようにfactor型ベクトルを出力した場合、ベクトルの中身に加え、下段に要素の順位が表示され、図表を作成する際はこの順番で自動的にソートされる。\n\n\nFactor型の詳細\n　このfactor型は非常に重要なデータ型であり、図表を作成する際には必ず考えなくてはならないものである。先ほどの例のように、文字列をfactor化しないと要素はアルファベット順になる。図表において順番が思い通りにならない原因は、factor化していない、またはfactor化が間違っているのがほとんどである。factor型については今後データハンドリング、可視化の講義で改めて解説する。"
  },
  {
    "objectID": "materials/datatype.html#欠損値",
    "href": "materials/datatype.html#欠損値",
    "title": "第7回講義資料",
    "section": "欠損値",
    "text": "欠損値\n　データ分析において頻繁に遭遇するのはNAであるが、これは欠損値（missing value）を意味する。欠損値は何らかの値があるはずであるものの、観察されていない値である。例えば、国連開発機構が毎年発表している「人間開発指数（Human Development Index; HDI）」では世界各国のデータが含まれている。しかし、世界における全ての国のデータが入っているわけではなく、たとえば台湾や北朝鮮のデータは含まれていない。これらの国/地域に人間開発という概念がないわけではなく、なんらかの理由（今回は政治的な理由）で値が欠損しているだけである。\n　自分でデータセットを構築しようとする時に、特定のケースに欠損が生じるケースは多々あり、世論調査でも例外ではない。たとえば答えづらい質問に対して「わからない」や「答えたくない」を選んだ場合、その回答者における当該質問は欠損となる。このように多くのデータには欠損値が含まれているため、欠損値処理は非常に重要である。欠損値の処理には様々な方法があるが、本講義では欠損値が含まれたケースを除外した分析を行う予定である。\n　他にも計算上、何らかの問題を生じさせうるものはあるが、以下では簡単にその例を紹介する。ただし、NaNとInfのベクトルを作ることは可能であるが、使う機会はほとんどなく、何かの計算の結果によって返ってくるケースが多いので、その意味さえ把握しておけば良い。\n\nNA: 何らかの値があるはずだが、欠損している状態\nNULL: そもそも存在しない\nNaN: 計算不可（例: 0 \\(\\div\\) 0）\nInf: 無限大（例: 10 \\(\\div\\) 0）\n\n\nNAとNULLの違い\n　値がないという点でNAとNULLは似ているように見えるが、実は全く異なる概念である。NAは要素としてカウントされるが、NULLはカウントされない。以下の例を見てみよう。\n\nNA_vec   <- c(1, 2, 3, NA, 5, NA, 7)\nNULL_vec <- c(1, 2, 3, NULL, 5, NULL, 7)\nlength(NA_vec)\n\n[1] 7\n\nlength(NULL_vec)\n\n[1] 5\n\nNA_vec\n\n[1]  1  2  3 NA  5 NA  7\n\nNULL_vec\n\n[1] 1 2 3 5 7\n\n\n　このようにNULLはそもそも存在しないことを意味する。NAが入居者がいない空き部屋であれば、NULLはそもそも部屋が存在しないことを意味する。ここまでの話だとNULLの存在意義が疑われるだろうが、中級者以上になるといずれ使う機会があろう。\n\n\n欠損値を含むベクトルの計算\n　ベクトルに欠損値が含まれている場合、平均値（mean()）、標準偏差（sd()）などの計算ができず、以下のように結果としてNAが返ってくる。\n\nmean(NA_vec)\n\n[1] NA\n\n\n　ここで欠損値を以外の要素のみを使って計算する方法としては以下の2つの方法がある1。\n方法1: データから欠損値を除外する。\n\n!演算子は否定を意味する（第3回参照）\nちなみに、NA_vec == NA、NA_vec != NAは使用不可\n\n\nis.na(NA_vec) # 各要素がNAか否かを判定\n\n[1] FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n!is.na(NA_vec) # 各要素がNAか否かの判定を反転\n\n[1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n\nNA_vec[!is.na(NA_vec)] # 欠損値でない要素のみ抽出\n\n[1] 1 2 3 5 7\n\nmean(NA_vec[!is.na(NA_vec)])\n\n[1] 3.6\n\n\n方法2: 関数内にna.rm = TRUEを追加する。\n　mean()関数の場合、na.rmという引数が用意されており、これをTRUEにすると、欠損値を除外した平均値が求められる（既定値はFALSE）。通常、関数には様々な引数が用意されている。Rコンソール上で?関数名を入力するとヘルプが読める（mean()関数のヘルプは?meanで読める）。\n\nmean(NA_vec, na.rm = TRUE)\n\n[1] 3.6"
  },
  {
    "objectID": "materials/datatype.html#ベクトル操作続",
    "href": "materials/datatype.html#ベクトル操作続",
    "title": "第7回講義資料",
    "section": "ベクトル操作（続）",
    "text": "ベクトル操作（続）\n　今回はデータ型が主な内容であったが、ベクトル操作はこれからも必要となるため、以下では第3回に続き、ベクトルの操作方法について解説する。練習用のベクトルとしてmy_vec2を用意する。\n\nmy_vec2 <- c(4, 3, 2, 1)\nmy_vec2\n\n[1] 4 3 2 1\n\n\n\n要素の追加\n　ベクトルに新しい要素を追加するためにはベクトル名[追加したい位置] <- 追加する値と入力する。たとえば、my_vec2の5番目の要素として0を追加する場合は以下のように入力する。\n\nmy_vec2[5] <- 0\nmy_vec2\n\n[1] 4 3 2 1 0\n\n\n　複数の要素を入れることができる。my_vec2の6、7、8番目の要素として、-1、-2、-3を追加する場合、以下のように入力する。\n\n# 6:8の代わりにc(6, 7, 8)もOK\nmy_vec2[6:8] <- c(-1, -2, -3)\nmy_vec2\n\n[1]  4  3  2  1  0 -1 -2 -3\n\n\n　今、my_vec2の長さは8である。もし、このmy_vec2の11番目の要素としてに10を入れたらどうなるだろうか。\n\nmy_vec2[11] <- 10\nmy_vec2\n\n [1]  4  3  2  1  0 -1 -2 -3 NA NA 10\n\n\n　このように11番目に10が追加され、9、10番目の要素は欠損値（NA）になる。\n\n\n要素の置換\n　要素の置換は要素の追加と同じである。つまり、ベクトル名[置換したい位置] <- 置換する値と入力する。my_vec2の11番目の要素は10であったが、これを-6に置換する。\n\nmy_vec2[11] <- -6\nmy_vec2\n\n [1]  4  3  2  1  0 -1 -2 -3 NA NA -6\n\n\n　要素の追加と同様、複数の要素を置換することもできる。ここではmy_vec2の9、10番目の要素（NAとNA）を-4、-5に置換してみよう。\n\nmy_vec2[9:10] <- c(-4, -5)\nmy_vec2\n\n [1]  4  3  2  1  0 -1 -2 -3 -4 -5 -6\n\n\n　置換する位置を指定する[]内に論理演算子を使えば、条件に合致する要素のみ置換することができる。たとえば、my_vec2の要素の中で、0より小さい要素に-1を掛けて置換する場合、以下のように入力する。\n\nmy_vec2[my_vec2 < 0] <- my_vec2[my_vec2 < 0] * -1\nmy_vec2\n\n [1] 4 3 2 1 0 1 2 3 4 5 6"
  },
  {
    "objectID": "materials/datatype.html#教科書",
    "href": "materials/datatype.html#教科書",
    "title": "第7回講義資料",
    "section": "教科書",
    "text": "教科書\n\n『私たちのR: ベストプラクティスの探求』第8章: データ型"
  },
  {
    "objectID": "materials/introduction.html",
    "href": "materials/introduction.html",
    "title": "第1回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/basic.html",
    "href": "materials/basic.html",
    "title": "第3回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/basic.html#電卓としてのr",
    "href": "materials/basic.html#電卓としてのr",
    "title": "第3回講義資料",
    "section": "電卓としてのR",
    "text": "電卓としてのR\n手順1: File > New File > R Scriptをクリックする。\n\n\n\n\n\n\n\n\n\n手順2: Sourceペインのペイン最大化ポタンをクリックし、Sourceペインの大きさ最大化する。\n\n\n\n\n\n\n\n\n\n手順3: Sourceペインに以下の内容を入力する。\n\n1 + 1\n\n手順4: コードの行にカーソルをおいたままCmd + Return（Windowsの場合、Control (Ctrl) + Enter）を入力する。これはカーソルが位置する行のコードを実行するコマンドである。\n\n\n\n\n\n\nカーソルって…?\n\n\n\nカーソル (cursor)とは文字の入力位置を意味する。RStudioのテーマによって色は異なるが、Sourceペイン、またはConsoleペインなど、何らかの文字が入力できる箇所において点滅する「|」がカーソルです。\n\n\n手順5: Consoleペインに結果が表示される。\n\n\n[1] 2\n\n\n　これくらいの計算はConsoleペインで直接打ち込んでも良いが、自分がこれまで書いたコードを残すという意味でSourceペインに入力することを推奨する。R Scriptを保存しておけばいつでも開いて前回のコードを再現できる。"
  },
  {
    "objectID": "materials/basic.html#コメント",
    "href": "materials/basic.html#コメント",
    "title": "第3回講義資料",
    "section": "コメント",
    "text": "コメント\n　Rのスクリプトを作成する際、何かのメモを書いておきたいケースが多々ある。コードが長くなったり、複雑になったりすると、自分が書いたコードでも意味がよく分からないケースも多く発生する。これはデータ分析のプロでも例外でなく、宋も同じである。この場合、スクリプト内にこまめにメモを書いておくと、このコードが何のためのコードかなどが素早く把握できる。\n　Rにおけるコメントは#を使用する。同じ行における#以降の内容は処理に影響を与えない。たとえば、以下のコードだと# 12345と12345の積は処理に影響を与えない\n\n# 12345と12345の積\n12345 * 12345\n\n[1] 152399025\n\n\n　また、コードと同じ行にコメントを書くこともできる。\n\n12345 * 12345 # 12345と12345の積\n\n[1] 152399025\n\n\n　コードにこまめにコメントを書くのは意外と面倒な作業であるが、コメントに「書きすぎ」は存在しない。書けば書くほど未来の自分から感謝されるだろう。"
  },
  {
    "objectID": "materials/basic.html#算術演算子",
    "href": "materials/basic.html#算術演算子",
    "title": "第3回講義資料",
    "section": "算術演算子",
    "text": "算術演算子\n　算術演算子は数字と数字の間に入力し、結果として何らかの数字が返される演算子である。先ほどの+や*も算術演算子（足し算と掛け算）である。ここでは良く使う算術演算子7つを紹介する。\n\n\n\n演算子\n意味\n例\n結果\n\n\n\n\n+\n和\n2 + 5\n7\n\n\n-\n差\n2 - 8\n-6\n\n\n*\n積\n7 * 3\n21\n\n\n/\n商\n16 / 5\n3.2\n\n\n^、**\n累乗（べき乗）\n2^3または2 ** 3\n8\n\n\n%%\n剰余 (モジュロ)\n18 %% 7\n4\n\n\n%/%\n整数商\n18 %/% 7\n2\n\n\n\n　例を見てみよう。\n\n1 + 5  # 足し算\n\n[1] 6\n\n3 - 10 # 引き算\n\n[1] -7\n\n19 * 2 # 掛け算\n\n[1] 38\n\n13 / 7 # 割り算\n\n[1] 1.857143\n\n5^3    # 5の3乗\n\n[1] 125\n\n\n　これは義務ではないがないが、累乗（^）を除き、演算子の前後にはスペースを入れるのがRの流儀であり、コードが読みやすくなる。以下のコードを比べてみよう。\n\n# 読みにくい例\n(((3+5)*4)+((5%%2)+3))^2\n\n[1] 1296\n\n# 読みやすい例\n(((3 + 5) * 4) + ((5 %% 2) + 3))^2\n\n[1] 1296\n\n\n　結果は同じだが、後者の方が読みやすいだろう。これから紹介する論理演算子でも共通する内容であるが、「累乗（^）を除き、演算子の前後にはスペースを入れる」ことを覚えておこう。ちなみにカッコ（(と)）は演算子ではないため、スペースは不要である。"
  },
  {
    "objectID": "materials/basic.html#論理演算子",
    "href": "materials/basic.html#論理演算子",
    "title": "第3回講義資料",
    "section": "論理演算子",
    "text": "論理演算子\n　算術演算子は結果として数値が返ってくるが、論理演算子は真（TRUE）か偽（FALSE）のいずれかの値を返す演算子である。ここではまず、大小関係を判定する論理演算子を紹介する。\n\n\n\n\n\n\n\n\n\n演算子\n意味\n例\n結果\n\n\n\n\nx < y\nxはyより小さい\n3 < 1\nFALSE\n\n\nx <= y\nxはyと等しいか、小さい\n2 <= 2\nTRUE\n\n\nx > y\nxはyより大きい\n6 > 5\nTRUE\n\n\nx >= y\nxはyと等しいか、大きい\n4 >= 5\nFALSE\n\n\nx == y\nxとyは等しい\n(2 + 3) == (4 + 1)\nTRUE\n\n\nx != y\nxとyは等しくない\n((2 * 3) + 1) != (2 * (3 + 1))\nTRUE\n\n\n\n　一つ注意すべき点は「等しい」を意味する論理演算子は=でなく、==だということだ1。\n\n3 > 2 # 3は2より大きいの?\n\n[1] TRUE\n\n5 <= 10 # 5は10と同じか小さいの?\n\n[1] TRUE\n\n2 + 3 == 1 # 2と3の和は1なの?\n\n[1] FALSE\n\n2 + 2 != 2 * 2 # 2と2の和は2と2の積と同じなの?\n\n[1] FALSE\n\n\n　算術演算子は一行に何回も使えるが、通常、論理演算子は一行に一つしか使えない。複数の論理演算子を使うためには、&（AND演算子）と|（OR演算子）を使う必要がある。\n　AND演算子&は、&を挟む左右の両側がTRUEの場合のみTRUEを返す演算子である。\n\n(2 + 3 == 5) & (2 * 3 == 5) # TRUE and FALSEだから... FALSE!\n\n[1] FALSE\n\n(2 + 3 == 5) & (2 * 3 == 6) # TRUE and TRUEだから... TRUE!\n\n[1] TRUE\n\n\n　OR演算子|は、|を挟む左右の片側、あるいは両側がTRUEの場合のみTRUEを返す論理演算子である。\n\n(2 + 3 == 5) & (2 * 3 == 5) # TRUE or FALSEだから... TRUE!\n\n[1] FALSE\n\n(2 + 3 == 5) & (2 * 3 == 6) # TRUE or TRUEだから... TRUE!\n\n[1] TRUE\n\n(2 + 3 == 6) & (2 * 3 == 5) # FALSE or FALSEだから... FALSE!\n\n[1] FALSE\n\n\n　論理演算子には他にもいくつかあるが、説明は割愛する。\n\n!: 否定演算子（TRUEならFALSE、FALSEならTRUEが返ってくる。意外と良く使う）\n&&: &と同じ\n||: |と同じ\nxor(): 排他的論理和（xor(FALSE, TRUE)とxor(TRUE, FALSE)の場合のみTRUEが返ってくる。論理回路に興味あれば重要な演算子だが、実際に使うケースはあまりない。）\n\n　論理演算子が活躍するのはデータ加工（データハンドリング）の時である。何かの条件を指定して、その行件に合致するケースのみを抽出する場合は、これらの論理演算子の使用が必須である。\n\n\n\n\n\n\nマッチング演算子: %in%\n\n\n\nもう一つ便利な論理演算子としてマッチング演算子%in%がある。これについてはデータハンドリングの講義で解説する。"
  },
  {
    "objectID": "materials/basic.html#代入とベクトル",
    "href": "materials/basic.html#代入とベクトル",
    "title": "第3回講義資料",
    "section": "代入とベクトル",
    "text": "代入とベクトル\n　まず、以下のような例を考えてみよう。\n\n123454321 \\(\\times\\) 2を計算してみよう\n123454321 \\(\\times\\) 3を計算してみよう\n123454321 \\(\\times\\) 4を計算してみよう\n…\n123454321 \\(\\times\\) 200を計算してみよう\n\n123454321 * 2\n123454321 * 3\n123454321 * 4\n\n(省略)\n\n123454321 * 198\n123454321 * 199\n123454321 * 200\n　このように199行のコードを書く必要がある。もう少し効率的な方法はないだろうか。まず、この123454321を書く手間をなんとかしてみよう。\n\n方法1: 123454321をコピーし貼り付けながら計算を繰り返す\n方法2: 123454321にxという名前を付けて、x * 1のように表記する（ここが重要）\n\n　いずれも有効な方法であるが、方法1には致命的なデメリットがある。それは修正が面倒だという点である。もし「あ、ごめん！123454321じゃなくて、23235211だったわ！コード直してもらえる？」と言われたら、199行のコードをすべて修正する必要がある。一方、方法2を使えば、「123454321にxという名前を付ける」コードのみを修正すれば良い。このように何かの数字、文字列などに名前を付けて後から使えるようにする作業を代入（assignment）と呼ぶ。\n\nベクトル\n　代入の話をする前にRにおけるデータ構造の一種であるベクトル（vector）の話をしなければならない。ベクトルはRにけるデータの最小単位である。Rには様々なデータ構造があるが、これらはすべてベクトルの集合と言っても過言ではない。このベクトルには以下のような特徴がある。\nベクトルの特徴\n\nベクトルの長さは1以上である。\n\n1や\"Cat\"は長さ1のベクトル\n長さ1のベクトルは原子ベクトル（atomic vector）とも呼ばれる。\n\n一つのベクトル同じデータ型（数値、文字列など）で構成される。\n\n数値と文字列が混在するベクトルは作成できない。\n\n\n\n\n\n\n\n\nデータ型? データ構造?\n\n\n\nデータ型とデータ構造については今後の講義で解説する。\n\n\n　まずはこの2つだけ覚えておけば問題ない。重要なのはベクトルの作り方であるが、長さ1のベクトルであれば、1、\"Cat\"などで十分である。もし、ながさ2以上のベクトルを作る場合はc()関数を使う。()内にコンマ区切りの要素 (element)を入れるだけである。\n\n19861008 # 長さ1の数値型ベクトル\n\n[1] 19861008\n\nc(1986, 10, 8) # 長さ3の数値型ベクトル\n\n[1] 1986   10    8\n\n\n\n\n\n\n\n\n,の後にはスペースを入れよう！\n\n\n\nコードの可読性の観点から見ると、c(1986,10,8)よりc(1986, 10, 8)の方が読みやすい。\n\n\n\n\nベクトル同士の計算\n　それでは、（原子ベクトルを含む）ベクトルに名前を付ける方法について紹介する。それは代入演算子<-である。x <- 123454321はxという器に123454321という数字を入れることを意味する。ここでいう「器」のことをオブジェクト（object）と呼ぶ。オブジェクトに関する説明は今後の講義で解説する。オブジェクトの内容を確認するためにはオブジェクトの名前のみを入力する。\n\nx <- 123454321 # xに123454321を代入\nx\n\n[1] 123454321\n\n\n　先ほどの作業は以下のように簡略化することができる。\nx <- 123454321 # xに123454321を代入\nx * 2\nx * 3\nx * 4\n\n(省略)\n\nx * 198\nx * 199\nx * 200\n　これを使えば、もし修正要請があったとしてもx <- 123454321の部分だけ修正すれば良いだろう。ただ、それでも200行のコード（代入で1行、計算で199行）を書くことには代わりがない。これをなんとか出来ないだろうか。以上のコードは1〜3行にまとめることができる。そのためにベクトル同士の計算について考える必要がある。同じ長さのベクトル同士の計算の場合、同じ位置の要素同士の計算が行われる。以下の例を考えてみよう。\n\nmy_vec1 <- c(1, 2, 3, 4, 5, 6)\nmy_vec2 <- c(0, 1, 2, 0, 1, 2)\nmy_vec1 * my_vec2\n\n[1]  0  2  6  0  5 12\n\n\n　上記のコードは以下のように表すことができる。\n\n\n\nベクトル/位置\n1番目\n2番目\n3番目\n4番目\n5番目\n6番目\n\n\n\n\nmy_vec1\n1\n2\n3\n4\n5\n6\n\n\n\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\n\nmy_vec2\n0\n1\n2\n0\n1\n2\n\n\n結果\n0\n2\n6\n0\n5\n12\n\n\n\n　もし、ベクトルの長さが一致しない場合はどうなるだろうか。この場合、短い方のベクトルが繰り返されることとなり、これをベクトル・リサイクル（vector recycle）と呼ぶ。以下の例ではmy_vec4の方が短いため、3 * 2までの計算が終わったあと、もう一回my_vec4の1番目の要素、0が使われることになる。\n\nmy_vec3 <- c(1, 2, 3, 4, 5, 6)\nmy_vec4 <- c(0, 1, 2)\nmy_vec3 * my_vec4\n\n[1]  0  2  6  0  5 12\n\n\n　このベクトル・リサイクルを利用すれば簡単に199行のコードを簡略化できよう。ただし、2から200まで格納されている長さ199のベクトルを作るのが面倒かも知れない。2, 3, 4, …, 199, 200は公差1の等差数列であり、Rではseq()関数を使うことで等差数列を簡単に作ることができる。たとえば、2から10までの公差1の等差数列であれば、以下のように作れる。\n\nseq(2, 10, by = 1) # 2から10までの公差1の等差数列\n\n[1]  2  3  4  5  6  7  8  9 10\n\n\n　公差1でなく公差2であれば、by = 1をby = 2に修正する。\n\nseq(2, 10, by = 2) # 2から10までの公差2の等差数列\n\n[1]  2  4  6  8 10\n\n\n　また、公差1の等差数列であれば、:演算子を使うこともできる。\n\n2:10 # 2から10までの公差1の等差数列\n\n[1]  2  3  4  5  6  7  8  9 10\n\n\n　これで199行のコードを簡略化する準備は整った。まずは3行に簡略化した例を見てみよう。\n\n# 3行の例\nx <- 123454321\ny <- 2:200 # または、y <- seq(2, 200, by = 1)\nx * y\n\n  [1]   246908642   370362963   493817284   617271605   740725926   864180247\n  [7]   987634568  1111088889  1234543210  1357997531  1481451852  1604906173\n [13]  1728360494  1851814815  1975269136  2098723457  2222177778  2345632099\n [19]  2469086420  2592540741  2715995062  2839449383  2962903704  3086358025\n [25]  3209812346  3333266667  3456720988  3580175309  3703629630  3827083951\n [31]  3950538272  4073992593  4197446914  4320901235  4444355556  4567809877\n [37]  4691264198  4814718519  4938172840  5061627161  5185081482  5308535803\n [43]  5431990124  5555444445  5678898766  5802353087  5925807408  6049261729\n [49]  6172716050  6296170371  6419624692  6543079013  6666533334  6789987655\n [55]  6913441976  7036896297  7160350618  7283804939  7407259260  7530713581\n [61]  7654167902  7777622223  7901076544  8024530865  8147985186  8271439507\n [67]  8394893828  8518348149  8641802470  8765256791  8888711112  9012165433\n [73]  9135619754  9259074075  9382528396  9505982717  9629437038  9752891359\n [79]  9876345680  9999800001 10123254322 10246708643 10370162964 10493617285\n [85] 10617071606 10740525927 10863980248 10987434569 11110888890 11234343211\n [91] 11357797532 11481251853 11604706174 11728160495 11851614816 11975069137\n [97] 12098523458 12221977779 12345432100 12468886421 12592340742 12715795063\n[103] 12839249384 12962703705 13086158026 13209612347 13333066668 13456520989\n[109] 13579975310 13703429631 13826883952 13950338273 14073792594 14197246915\n[115] 14320701236 14444155557 14567609878 14691064199 14814518520 14937972841\n[121] 15061427162 15184881483 15308335804 15431790125 15555244446 15678698767\n[127] 15802153088 15925607409 16049061730 16172516051 16295970372 16419424693\n[133] 16542879014 16666333335 16789787656 16913241977 17036696298 17160150619\n[139] 17283604940 17407059261 17530513582 17653967903 17777422224 17900876545\n[145] 18024330866 18147785187 18271239508 18394693829 18518148150 18641602471\n[151] 18765056792 18888511113 19011965434 19135419755 19258874076 19382328397\n[157] 19505782718 19629237039 19752691360 19876145681 19999600002 20123054323\n[163] 20246508644 20369962965 20493417286 20616871607 20740325928 20863780249\n[169] 20987234570 21110688891 21234143212 21357597533 21481051854 21604506175\n[175] 21727960496 21851414817 21974869138 22098323459 22221777780 22345232101\n[181] 22468686422 22592140743 22715595064 22839049385 22962503706 23085958027\n[187] 23209412348 23332866669 23456320990 23579775311 23703229632 23826683953\n[193] 23950138274 24073592595 24197046916 24320501237 24443955558 24567409879\n[199] 24690864200\n\n\n　これを2行にまとめる場合は、xとyいずれかをベクトルとして格納し、もう片方は格納せずそのまま計算に使う（結果は省略）。\n\n# 2行の例 (1)\nx <- 123454321\nx * 2:200\n\n\n# 2行の例 (2)\nx <- 2:200\n123454321 * x\n\n　究極のやり方はxもyも格納せずそのまま使う方法であり、これなら1行にまとめることができる（結果は省略）。\n\n# 1行の例\n123454321 * 2:200\n\n\n\n要素の抽出\n　最後にベクトルから任意の要素を抽出する2つの方法について紹介する。\n方法1: 抽出する要素の位置を指定する。\n　要素の抽出する基本的な方法はベクトル名[抽出する要素の位置]である。たとえば、my_vec5という11から20までの公差1の等差数列のベクトルがあるとする。\n\nmy_vec5 <- 11:20 # my_vec <- seq(11, 20, by = 1) と同じ\nmy_vec5\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\n\n　このmy_vec5から3番目の要素は13であり、この値を抽出するためにはmy_vec5[3]と入力する。\n\nmy_vec5[3]\n\n[1] 13\n\n\n　複数の要素を抽出したい場合は、[]内にベクトルを入れる。たとえば、my_vec5から2、3、4、5番目の要素を抽出する場合は、[]内にc(2, 3, 4, 5)を入力する。\n\nmy_vec5[c(2, 3, 4, 5)]\n\n[1] 12 13 14 15\n\n\n　このc(2, 3, 4, 5)は2から5までの公差1の等差数列であるため、c(2, 3, 4, 5)の代わりにseq(2, 5, by = 1)を使用しても良い。\n\nmy_vec5[seq(2, 5, by = 1)]\n\n[1] 12 13 14 15\n\n\n　むろん、公差1の等差数列を使う:を使用し、[]内に2:5を指定した方がより効率的であろう。\n\nmy_vec5[2:5]\n\n[1] 12 13 14 15\n\n\n方法2: 論理演算子を利用する。\n　もう一つは[]内にTRUEかFALSEを入れる方法である。位置を指定す方法では抽出したい要素の位置のみを指定するだけであったが、この方法はすべての要素に対して、抽出するか（TRUE）しないか（FALSE）を指定する必要がある。たとえば、my_vec5の1、4、7、9、10番目の要素を抽出したい場合はmy_vec5[c(1, 4, 7, 9, 10)]でも良いが、以下のように抽出する箇所にTRUE、抽出しない箇所にFALSEを指定することもできる。\n\nmy_vec5[c(TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE)]\n\n[1] 11 14 17 19 20\n\n\n　[]内にベクトルの長さ分のベクトルを更に入力する必要がある。my_vec5のように長さ10のベクトルなら問題ないだろうが、長さが数千のベクトルも稀ではない。これを考えると、一つ一つの要素に対してTRUE、FALSEを指定することは非効率的である。\n　しかし、我々はすでに論理演算子を使えばTRUE、またはFALSEのベクトルを作れることを知っている。たとえば、my_vec5から奇数のみを抽出したいとする。奇数は2で割って1が余る数字である。余りを計算する算術演算子は%%であり、この余りが1かどうかを判定すれば良い。\n\nmy_vec5 %% 2 == 1\n\n [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\n\n　この論理演算子が含まれた判定文を[]内に入れることで、my_vec5から奇数のみを抽出することができる。\n\nmy_vec5[my_vec5 %% 2 == 1]\n\n[1] 11 13 15 17 19"
  },
  {
    "objectID": "materials/basic.html#表データの読み込み",
    "href": "materials/basic.html#表データの読み込み",
    "title": "第3回講義資料",
    "section": "表データの読み込み",
    "text": "表データの読み込み\n　データ分析に用いられるデータの形式は表、文字列、画像、音声など様々であるが、本講義では表形式のデータのみを扱う。ここでは表形式データの読み込み方法について紹介する。表形式データにはエクセル形式（.xlsx）がおなじみであろうが、データ分析の業界においてはカンマ区切る形式（.csv）が標準である。\n　csvファイルの読み込みにはR内蔵関数read.csv()関数が使えるが、本講義では{tidyverse}パッケージが提供するread_csv()関数を使用する。データ読み込みの前にまず{tidyverse}パッケージを読み込む。\n\nlibrary(tidyverse)\n\n　読み込み方法はread_csv(\"読み込むファイルのパス\")である。プロジェクト・フォルダー内にDataフォルダーがあり、そこにPref_Vote.csvというファイルがあれば、read_csv(\"Data/Pref_Vote.csv\")となる。もし、プロジェクト・フォルダー直にデータが入っているのであれば、read_csv(\"Pref_Vote.csv\")となる。ただし、read_csv()だけだとデータの中身が出力されるだけであり、作業環境内に格納されない。代入演算子<-を使って作業環境内にデータを入れておく必要がある。ここではmy_dataという名のオブジェクトを作成する。\n\n# 以下のデータはサポートページの「データ集」から入手可能\nmy_data <- read_csv(\"Data/Pref_Vote.csv\")\n\n　ちなみに現在の作業環境内に、どのようなオブジェクトが存在するかを確認するためにはConsoleペイン上でls()を入力する2。\n\nls()\n\n[1] \"my_data\" \"my_vec1\" \"my_vec2\" \"my_vec3\" \"my_vec4\" \"my_vec5\" \"x\"      \n[8] \"y\"      \n\n\n　問題なくmy_dataというオブジェクトが生成されていることが分かる。それではデータの中身を確認してみよう。\n\nmy_data # または、print(my_data)\n\n# A tibble: 47 × 16\n      ID Pref  Fiscal Young Older Jimin Rikken Kokumin Komei Ishin Kyosan Shamin\n   <dbl> <chr>  <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl> <dbl>  <dbl>  <dbl>\n 1     1 北海…  0.462  23.4  32.3  32.3   20.9    6.65 11.7   7.78  11.6    1.31\n 2     2 青森…  0.358  21.9  33.7  39.8   22.0    7.24 11.3   3.40   8.31   2.36\n 3     3 岩手…  0.372  22.7  33.8  35.5   17.8   12.5   8.22  4.36  10.4    3.83\n 4     4 宮城…  0.626  26.1  28.4  39.6   17.8    9.02 11.1   4.60   7.89   2.10\n 5     5 秋田…  0.322  19.9  37.6  44.5   13.5    8.64 10.6   4.48   8.09   3.77\n 6     6 山形…  0.379  23.2  34.0  45.2   14.9    7.37  9.87  4.28   6.51   5.08\n 7     7 福島…  0.545  23.9  31.8  38.2   13.6   12.1  12.8   5.31   7.99   3.01\n 8     8 茨城…  0.656  25.1  30.3  39.3   15.2    7.15 15.1   6.73   7.73   1.46\n 9     9 栃木…  0.648  25.0  29.6  40.3   18.9    9.94 12.8   4.90   5.04   1.03\n10    10 群馬…  0.638  24.8  30.9  40.6   16.4    9.76 12.4   4.67   7.58   1.87\n# … with 37 more rows, and 4 more variables: Reiwa <dbl>, NHK <dbl>,\n#   Region2 <dbl>, Region6 <dbl>\n\n\n　この画面からデータの中身以外にもいくつかの情報が読み取れる。たとえば、1行目には以下のような内容が入っている。\n# A tibble: 47 × 16\n　これは47行16列のデータであることを意味する。しかし、数えてみれば、どうみても47行13列には見えない。見えるのは10行12列のみである。ちなみに、自分が使用するPCのモニターが大きいか、文字の大きさが小さい場合は最初から16列が表示される場合もあり、12列より少なく表示される場合もある。表示しきれなかったものについては一番下の行を参照すれば良い。\n# … with 37 more rows, and 4 more variables: Reiwa <dbl>, NHK <dbl>,\n#   Region2 <dbl>, Region6 <dbl>\n　これは出力された内容以外にも36行が更にあり（つまり、36行は省略されているだけである）、Reiwa、NHK、Region2とRegion6という名の列も更にあることを意味する。データは問題なく47行13列であることが分かる。\n　もし、20行を出力したい場合はprint(オブジェクト名, n = 20)と入力する。\n\nprint(my_data, n = 20)\n\n# A tibble: 47 × 16\n      ID Pref  Fiscal Young Older Jimin Rikken Kokumin Komei Ishin Kyosan Shamin\n   <dbl> <chr>  <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl> <dbl>  <dbl>  <dbl>\n 1     1 北海…  0.462  23.4  32.3  32.3  20.9     6.65 11.7   7.78  11.6    1.31\n 2     2 青森…  0.358  21.9  33.7  39.8  22.0     7.24 11.3   3.40   8.31   2.36\n 3     3 岩手…  0.372  22.7  33.8  35.5  17.8    12.5   8.22  4.36  10.4    3.83\n 4     4 宮城…  0.626  26.1  28.4  39.6  17.8     9.02 11.1   4.60   7.89   2.10\n 5     5 秋田…  0.322  19.9  37.6  44.5  13.5     8.64 10.6   4.48   8.09   3.77\n 6     6 山形…  0.379  23.2  34.0  45.2  14.9     7.37  9.87  4.28   6.51   5.08\n 7     7 福島…  0.545  23.9  31.8  38.2  13.6    12.1  12.8   5.31   7.99   3.01\n 8     8 茨城…  0.656  25.1  30.3  39.3  15.2     7.15 15.1   6.73   7.73   1.46\n 9     9 栃木…  0.648  25.0  29.6  40.3  18.9     9.94 12.8   4.90   5.04   1.03\n10    10 群馬…  0.638  24.8  30.9  40.6  16.4     9.76 12.4   4.67   7.58   1.87\n11    11 埼玉…  0.770  26.2  27.3  31.4  20.8     5.21 14.5   7.32  10.6    1.58\n12    12 千葉…  0.778  26.2  28.0  36.4  20.0     4.23 14.1   6.19   9.38   1.52\n13    13 東京…  1.15   27.4  23.3  32.6  17.7     4.74 11.5   8.33  11.3    1.80\n14    14 神奈…  0.889  26.9  25.9  34.9  18.9     5.27 11.3   8.95   9.65   1.58\n15    15 新潟…  0.475  23.5  33.0  43.7  20.2     6.14  8.22  5.01   6.70   3.45\n16    16 富山…  0.485  23.6  32.9  44.6   8.09    7.39  9.18 14.5    5.72   4.37\n17    17 石川…  0.518  26.3  30.2  51.5  12.1     6.83 10.0   5.93   5.37   1.44\n18    18 福井…  0.421  25.6  31.1  45.2  12.0     9.98 10.5   6.54   6.38   1.25\n19    19 山梨…  0.409  24.7  31.1  39.9  16.7     9.55 11.9   4.88   7.68   2.05\n20    20 長野…  0.528  24.2  32.3  31.9  18.0    13.5  10.5   5.27  11.1    2.29\n# … with 27 more rows, and 4 more variables: Reiwa <dbl>, NHK <dbl>,\n#   Region2 <dbl>, Region6 <dbl>\n\n\n　最初の6行のみを出力する場合はhead()、最後の6行を出力する場合はtail()を使う。\n\n# my_dataの最初の6行を出力\nhead(my_data) # print(my_data, n = 6) と同じ \n\n# A tibble: 6 × 16\n     ID Pref   Fiscal Young Older Jimin Rikken Kokumin Komei Ishin Kyosan Shamin\n  <dbl> <chr>   <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl> <dbl>  <dbl>  <dbl>\n1     1 北海道  0.462  23.4  32.3  32.3   20.9    6.65 11.7   7.78  11.6    1.31\n2     2 青森県  0.358  21.9  33.7  39.8   22.0    7.24 11.3   3.40   8.31   2.36\n3     3 岩手県  0.372  22.7  33.8  35.5   17.8   12.5   8.22  4.36  10.4    3.83\n4     4 宮城県  0.626  26.1  28.4  39.6   17.8    9.02 11.1   4.60   7.89   2.10\n5     5 秋田県  0.322  19.9  37.6  44.5   13.5    8.64 10.6   4.48   8.09   3.77\n6     6 山形県  0.379  23.2  34.0  45.2   14.9    7.37  9.87  4.28   6.51   5.08\n# … with 4 more variables: Reiwa <dbl>, NHK <dbl>, Region2 <dbl>, Region6 <dbl>\n\n\n\ntail(my_data) # my_dataの最後の6行を出力\n\n# A tibble: 6 × 16\n     ID Pref   Fiscal Young Older Jimin Rikken Kokumin Komei Ishin Kyosan Shamin\n  <dbl> <chr>   <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl> <dbl>  <dbl>  <dbl>\n1    42 長崎県  0.348  24.4  33.2  42.9  12.6     8.86  14.6  5.18   5.85   3.42\n2    43 熊本県  0.427  25.9  31.7  45.1  12.2     8.60  14.4  4.71   5.82   2.14\n3    44 大分県  0.395  24.1  33.5  37.5  10.9     6.64  12.2  4.98   6.29  15.5 \n4    45 宮崎県  0.358  25.0  32.9  42.0  14.9     6.74  15.1  3.89   5.73   5.22\n5    46 鹿児…   0.353  24.7  32.7  43.5  13.4     5.06  14.5  7.16   5.78   3.85\n6    47 沖縄県  0.375  32.1  22.7  25.9   8.05    6.24  14.5  4.12  10.7   19.2 \n# … with 4 more variables: Reiwa <dbl>, NHK <dbl>, Region2 <dbl>, Region6 <dbl>\n\n\n　6行でなく、任意の行数を指定したい場合はhead()、またはtail()内にn = ...を追加する。このような表形式のデータをRではデータフレーム（data.frame）と呼び、ベクトル、リストと共に最も頻繁に使うデータ構造である。これらについては「第8回: データ構造」で解説する。\n\n文字化けが生じる場合\n　本講義ではNIIオンライン分析システムを利用する場合、宋が提供した資料と同じ結果が得られることが保証されている。しかし、自分のPCにRをインストールして使用する場合、文字化けが生じる可能性がある。これは文字のロケール（locale）が原因である（具体的には世界標準のUTF-8を使用するmacOS/Linuxと日本語表示に独自仕様を使用するWindowsの違い）。この場合、自分のPCのOSによって対処方法が異なる。ここではread_csv()で表形式データを読み込む際、文字化けに対処する方法を紹介する。\nケース1: 自分のPCがWindowsの場合\n　自分のPCが日本語Windowsの場合、世界標準ロケールであるUTF-8を正しく認識できない可能性がある。この場合、read_csv()内にlocale = locale(encoding = \"UTF-8\")を追加する。\nread_csv(\"パスを含むファイル名\", locale = locale(encoding = \"UTF-8\"))\nケース2: 自分のPCがmacOS/Linuxの場合\n　これは主にWindowsで作成されたデータを読み込む際に生じる。日本語Windowsで作成されたデータの場合、ロケールがShift-JISである可能性が高い。とりわけ日本政府/自治体が作成・公開するデータの多くが未だShift-JISである。この場合、read_csv()内にlocale = locale(encoding = \"Shift_JIS\")を追加する。\nread_csv(\"パスを含むファイル名\", locale = locale(encoding = \"Shift_JIS\"))\n　ちなみに、2022年中、リリース予定のR 4.2からはWindows版RでもUTF-8に対応されると知られている。この場合、Windowsで文字化けが生じる場合でもケース2と同じ手順でデータを開く必要があるだろう（MacかLinuxを使いましょう）。\n\n\nExcel形式ファイルの読み込み\n　本講義ではExcelで作成されたデータ（.xlsxファイル）を使わないが、.xlsxファイルを読み込む場合は{readxl}パッケージのread_excel()関数を使用すれば良い。ここではコードの例のみ掲載する。\n# {readxl}パッケージがない場合、install.packages(\"readxl\")でインストールしておく。\nlibrary(readxl)\n\nmy_data <- read_excel(\"パスを含むファイル名\", sheet = シートの番号)"
  },
  {
    "objectID": "materials/basic.html#教科書",
    "href": "materials/basic.html#教科書",
    "title": "第3回講義資料",
    "section": "教科書",
    "text": "教科書\n\n『私たちのR: ベストプラクティスの探求』第6章: 基本的な操作\n『私たちのR: ベストプラクティスの探求』第9章: データ構造（第2節）\n『私たちのR: ベストプラクティスの探求』第7章: データの入出力\n『私たちのR: ベストプラクティスの探求』第8章: データ型（第3節）"
  },
  {
    "objectID": "materials/data_collection.html",
    "href": "materials/data_collection.html",
    "title": "第6回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/datastructure.html",
    "href": "materials/datastructure.html",
    "title": "第8回講義資料",
    "section": "",
    "text": "新しいタブで開く"
  },
  {
    "objectID": "materials/datastructure.html#データ構造とは",
    "href": "materials/datastructure.html#データ構造とは",
    "title": "第8回講義資料",
    "section": "データ構造とは",
    "text": "データ構造とは\n　Rにおけるデータの最小単位はベクトルである1。そして、これらのベクトルが集合として行列や表などが出来上がる。ベクトルの集合の在り方をRではデータ構造 (data structure)と呼ぶ。\n　たとえば、同じ長さのnumeric型（数値型）、またはcomplex型（複素数型）の縦ベクトルが横に並んでいる構造（図 1）をRではmatrix構造（行列構造）と呼ぶ。Matrix構造の場合「同じ長さ、かつnumeric/complex型の縦ベクトル」の集合と言えよう。データ型の制約のない「同じ長さの縦ベクトル」の集合はRでdata.frame構造（データフレーム構造）と呼ばれる。また、data.frame構造は各列には名前が付くといった特徴がある。\n\n\n\n\n\n\n\n図 1: 行列構造の例\n\n\n\n\n\n\n\n\n\n\n\n\n図 2: データフレーム構造の例\n\n\n\n\n\n\n　本講義で使うデータ構造は主にベクトル (vector) とデータ・フレーム (data.frame) とその拡張版のティブル (tibble) のみであるため、行列 (matrix) 、配列 (array) 、リスト (array) の説明は割愛する。"
  },
  {
    "objectID": "materials/datastructure.html#ベクトル",
    "href": "materials/datastructure.html#ベクトル",
    "title": "第8回講義資料",
    "section": "ベクトル",
    "text": "ベクトル\n　ベクトル構造は同じデータ型が一つ以上格納されているオブジェクトであり、これまで何回も登場したデータ構造である。ベクトルはRにおけるデータの最小単位である。Rには数百、数千種類のデータ構造が存在するが、これら全てのデータ構造の最小単位はベクトルである。\n\nmy_vec1 <- \"R is fun!\" # 長さ1のcharacter型ベクトル\nmy_vec1\n\n[1] \"R is fun!\"\n\nmy_vec2 <- c(1, 3, 5, 6, 7) # 長さ5のnumeric型ベクトル\nmy_vec2\n\n[1] 1 3 5 6 7\n\n\n　ベクトルを作成する際、注意しないといけないことは一つのベクトル内の全ての要素は同じデータ型である点である。もし、複数のデータ型が混在している場合、優先順位の高いデータ型へ強制的に変換される。頻繁に使われるデータ型の場合、優先順位はcharacter型 > numeric型 > logical型であり、character型の優先順位が最も高い。\n　たとえば、character型とnumeric型の要素が混在したベクトルを考えてみよう。my_vec3は長さ6のベクトルであるが、2つのデータ型が混在しているため、character型が優先される。\n\nmy_vec3 <- c(\"A\", \"B\", \"C\", 1, 2, 3)\nmy_vec3\n\n[1] \"A\" \"B\" \"C\" \"1\" \"2\" \"3\"\n\nclass(my_vec3)\n\n[1] \"character\"\n\n\n　Numeric型とlogical型が混在している場合、logical型の要素はnumeric型へ変換される。変換される際、TRUEは1、FALSEは0に変換される。\n\nmy_vec4 <- c(10, 20, TRUE, FALSE)\nmy_vec4\n\n[1] 10 20  1  0\n\nclass(my_vec4)\n\n[1] \"numeric\"\n\n\n　Character型とlogical型が混在している場合、logical型の要素はcharacter型へ変換される。変換される際、TRUEは\"TRUE\"、FALSEは\"FALSE\"に変換される。\n\nmy_vec5 <- c(\"Miyakura\", \"Seki\", TRUE, FALSE)\nmy_vec5\n\n[1] \"Miyakura\" \"Seki\"     \"TRUE\"     \"FALSE\"   \n\nclass(my_vec5)\n\n[1] \"character\"\n\n\n　その他、ベクトルの操作（演算、要素の抽出など）についてはこれまでの講義資料を参照すること。"
  },
  {
    "objectID": "materials/datastructure.html#行列",
    "href": "materials/datastructure.html#行列",
    "title": "第8回講義資料",
    "section": "行列",
    "text": "行列\n　行列構造とはnumeric型、またはcomplex型の縦ベクトルを横に並べたデータ構造である。以下のmy_mat1は3行4列（3 \\(\\times\\) 4）の行列である。\n\nmy_mat1 <- matrix(1:12, nrow = 3)\nmy_mat1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n　このmy_mat1は長さ3のnumeric型縦ベクトルが4つ並んでいる。4つの縦ベクトルとはc(1, 2, 3)、c(4, 5, 6)、c(7, 8, 9)、c(10, 11, 12)である。他にも長さ4のnumeric型横ベクトルが3つ（c(1, 4, 7, 10)、c(2, 5, 8, 11)、c(3, 6, 9, 12)）積まれているとも読めるが、データ分析では一般的に縦ベクトルの集合として行列を捉える。\n\n行列の作成\n　行列を作成する際はmatrix()関数を使用する。第1引数としてnumericまたはcomplex型ベクトル、nrow引数で行列の行数を指定する。たとえば、以下のような行列を作成し、my_mat2という名のオブジェクトとして作業環境内に格納するとしよう。\n\\[\n\\begin{bmatrix}\n5 & 2 & 9 & 6 \\\\\n5 & 4 & -8 & 2 \\\\\n-3 & 3 & 0 & 7\n\\end{bmatrix}\n\\]\n\nmy_mat2 <- matrix(c(5, 5, -3, 2, 4, 3, 9, -8, 0, 6, 2, 7), nrow = 3)\nmy_mat2\n\n     [,1] [,2] [,3] [,4]\n[1,]    5    2    9    6\n[2,]    5    4   -8    2\n[3,]   -3    3    0    7\n\n\n　第1引数はベクトルはベクトル構造のオブジェクトであるため、予めベクトルを作成し、ベクトル名を入れることも可能である。\n\nmy_vec6 <- c(5, 5, -3, 2, 4, 3, 9, -8, 0, 6, 2, 7)\nmy_mat3 <- matrix(my_vec6, nrow = 3)\nmy_mat3\n\n     [,1] [,2] [,3] [,4]\n[1,]    5    2    9    6\n[2,]    5    4   -8    2\n[3,]   -3    3    0    7\n\n\n　ここで注意すべき点は要素が入る順番である。我々は通常「左から右へ」、「上から下へ」文字列を読むが、行列はその逆、つまり「上から下へ」、「左から右へ」の順番となる（図 3）。行列が「縦ベクトルの集合」ということを意識すれば、予め混乱は避けられるだろう。\n\n\n\n\n\n図 3: 行列の要素の順番\n\n\n\n\n\n\n行列の操作\n　行列構造のデータは本講義では使用しないため、説明は割愛し、ここでは行列の確認と要素の抽出するコードのみ紹介する。\n\nclass(my_mat1) # my_mat1のデータ構造\n\n[1] \"matrix\" \"array\" \n\ndim(my_mat1)   # 行列の行数と列数\n\n[1] 3 4\n\nnrow(my_mat1)  # 行列の行数\n\n[1] 3\n\nncol(my_mat1)  # 行列の列数\n\n[1] 4\n\nmy_mat1[1, ]   # my_matの1「行」目を抽出\n\n[1]  1  4  7 10\n\nmy_mat1[, 3]   # my_matの3「列」目を抽出\n\n[1] 7 8 9\n\nmy_mat1[2, 4]  # my_matの2「行」、4「列」目を抽出\n\n[1] 11\n\n\n\n\n行列の演算\n　行列構造のデータは本講義では使用しないため、説明は割愛するが、これらは線形代数を勉強する人には便利な演算子である。\n\n\n\n演算子/関数\n説明\n\n\n\n\n+\n行列の足し算\n\n\n-\n行列の引き算\n\n\n%*%\n行列の掛け算\n\n\n/\n行列の割り算\n\n\n*\n行列のアダマール積 (Hadamard product)\n\n\nt(オブジェクト名)\n行列の転置\n\n\nqr(オブジェクト名)$rank\n行列の階数\n\n\nsolve(オブジェクト名)\n逆行列\n\n\neigen(オブジェクト名)\n行列の固有値\n\n\n\n　solve()とeigen()は正方行列 (\\(n \\times n\\)の行列)でないと使えないことに注意しよう。\n\n\n配列\n　行列と似たようなデータ構造として、配列（array）構造がある。これは同じ大きさ行列を重ねたものであり（図 4）、行列は層 (layer) が1つのみの配列である。つまり、行列構造は配列構造の一種であり、実際、class()で行列構造のデータ構造を確認すると\"matrix\"だけでなく、\"array\"も同時に出力される。2次元である行列を重ねたものであるため、配列構造は3次元のデータ構造であり、要素抽出の際、[x, y, z]で指定する必要がある（3番目のzが配列の層 (layer)を意味する）。\n\n\n\n\n\n図 4: 配列構造のイメージ"
  },
  {
    "objectID": "materials/datastructure.html#データフレーム",
    "href": "materials/datastructure.html#データフレーム",
    "title": "第8回講義資料",
    "section": "データ・フレーム",
    "text": "データ・フレーム\n　データ・フレーム構造（data.frame）は行列構造と同様、縦ベクトルを横に並べたものである。しかし、以下の2点が異なる。\n\nデータ・フレーム構造の場合、すべてのベクトルが同じデータ型である必要がない。\n\n図 5 の場合、character型（1列目）とnumeric型（2、3、4列目）ベクトルが混在している。\n\nデータ・フレーム構造の場合、各列に名前が付いている。\n\n図 5 の場合、Name、Foundation、Students、Facultiesが列名である。\n\n\n\n\n\n\n\n図 5: データフレーム構造の構造のイメージ\n\n\n\n\n　データ・フレーム構造は我々が頻繁に接する表形式データ、そのものである。前期・後期の講義全体を通じて最も頻繁に扱うこととなるデータ構造であるため、非常に重要なデータ構造である。詳しい操作方法は次回以降（データ・ハンドリング）の講義で解説するが、ここでは作成方法、確認方法、簡単な抽出方法について解説する。\n\nデータ・フレームの作成\n　データ・フレームを作成する方法は大きく分けて2通りある。小さい表であれば（1）自分で作成することも可能だが、ある程度の規模のあるデータならダウンロードしたデータや表計算ソフト（Excel、Numbers、LibreOffice Calcなど）で作成した表を（2）読み込むこともできる。\n　まずは、直接データ・フレームを作成する方法から紹介する。データ・フレームの作成にはdata.frame()、またはtibble()関数を使用する。data.frame()はR内蔵関数であるが、tibble()関数は使用する前に予め{tidyverse}パッケージを読み込んでおく必要がある。data.frame()とtibble()は厳密には異なるデータ構造であるが、tibble()で作成した表がより汎用性が高いため、ここではtibble()関数を使用したデータ・フレームの作成する方法を紹介する。\n　まず、{tidyverse}パッケージを読み込む。\n\nlibrary(tidyverse)\n\n　ここでは以下のような表を作成する。\n\n\n\n\n\n\n  \n  \n    \n      Name\n      Foundation\n      Students\n    \n  \n  \n    Kansai\n1886\n27736\n    Kangaku\n1889\n23671\n    Doshisha\n1875\n25974\n    Ritsumeikan\n1900\n32467\n  \n  \n  \n\n\n\n\n　この表は3つの縦ベクトルの集合であり、それぞれの名前はName、Foundation、Studentsである。tibble()関数内に列名 = 縦ベクトルを入れるだけである。作成したデータ・フレームをmy_df1という名のオブジェクトとして格納し、その中身を確認してみよう。\n\nmy_df1 <- tibble(Name       = c(\"Kansai\", \"Kangaku\", \"Doshisha\", \"Ritsumeikan\"),\n                 Foundation = c(1886, 1889, 1875, 1900),\n                 Students   = c(27736, 23671, 25974, 32467))\n\nmy_df1\n\n# A tibble: 4 × 3\n  Name        Foundation Students\n  <chr>            <dbl>    <dbl>\n1 Kansai            1886    27736\n2 Kangaku           1889    23671\n3 Doshisha          1875    25974\n4 Ritsumeikan       1900    32467\n\n\n　データ・フレーム構造はベクトルの集合であるため、ベクトルから作成することも出来る。以下のような表を作成するとする。\n\n\n\n\n\n\n  \n  \n    \n      Name\n      Pop\n      Area\n      Food\n    \n  \n  \n    Tokyo\n1396\n2194\nMonja\n    Nagoya\n755\n5173\nTebasaki\n    Osaka\n882\n1899\nTakoyaki\n    Fukuoka\n511\n4987\nRamen\n  \n  \n  \n\n\n\n\n　今回はそれぞれの列に外とするベクトルを予め作成し、そのベクトルをtibble()関数の引数として使用する。作成したオブジェクトはmy_df2と名付けよう。\n\nName <- c(\"Tokyo\", \"Nagoya\", \"Osaka\", \"Fukuoka\")\nFood <- c(\"Monja\", \"Tebasaki\", \"Takoyaki\", \"Ramen\")\nPop  <- c(1396, 755, 882, 511)\nArea <- c(2194, 5173, 1899, 4987)\n\nmy_df2 <- tibble(Name, Pop, Area, Food)\n\nmy_df2\n\n# A tibble: 4 × 4\n  Name      Pop  Area Food    \n  <chr>   <dbl> <dbl> <chr>   \n1 Tokyo    1396  2194 Monja   \n2 Nagoya    755  5173 Tebasaki\n3 Osaka     882  1899 Takoyaki\n4 Fukuoka   511  4987 Ramen   \n\n\n　以上のような数行 \\(\\times\\) 数列の表なら手打ちで作成することもできるが、数百〜数万人のデータなどを手打ちで作成することはほぼ不可能であろう。この場合、予め表計算ソフトを使って表を作成しておくか、既に公開されている表形式データを使うこととなる。別途のファイルとして保存されている表形式ファイル（.csvファイル）の読み込みにはread_csv()関数を使う2。read_csv()は{tidyverse}パッケージを読み込んでおかないと使えないため、予め読んでおこう。今回は既に読み込み済みであるため不要である。\n　第6回の講義で作成したデータ（BuildingData.csv）がプロジェクト・フォルダー内のDataフォルダー内に保存されている場合、以下のように読み込む。読み込んだデータを使うためには作業環境内にオブジェクトとして格納しておく必要があり、今回はmy_df3と名付ける。\n\nmy_df3 <- read_csv(\"Data/BuildingData.csv\") # 第6回のデータ\n\n\n\nデータ・フレームの確認\n　作業環境に格納されたデータ・フレームを出力する場合はオブジェクト名を入力する。データが画面に収まらない場合は一部の列が省略される場合があり、出力される行数はデフォルト設定では10行である。以下でも最初の10行しか出力されているが、出力画面の1行目の情報（# A tibble: 47 × 5）から全47行のデータであることが分かる。\n\nmy_df3\n\n# A tibble: 47 × 5\n      ID Pref   Finance Over65 Turnout\n   <dbl> <chr>    <dbl>  <dbl>   <dbl>\n 1     1 北海道   0.462   32.3    58.8\n 2     2 青森県   0.358   33.7    52.9\n 3     3 岩手県   0.372   33.8    60.4\n 4     4 宮城県   0.626   28.4    55.9\n 5     5 秋田県   0.322   37.6    58.2\n 6     6 山形県   0.379   34.0    64.3\n 7     7 福島県   0.545   31.8    58.0\n 8     8 茨城県   0.656   30.3    52.5\n 9     9 栃木県   0.648   29.6    53.1\n10    10 群馬県   0.638   30.9    53.9\n# … with 37 more rows\n\n\n　全ての行を出力するためにはprint()関数を使用し、n = Infを指定する。ちなみにn = 20にすると、最初の20行が出力される。\n\nprint(my_df3, n = Inf)\n\n# A tibble: 47 × 5\n      ID Pref     Finance Over65 Turnout\n   <dbl> <chr>      <dbl>  <dbl>   <dbl>\n 1     1 北海道     0.462   32.3    58.8\n 2     2 青森県     0.358   33.7    52.9\n 3     3 岩手県     0.372   33.8    60.4\n 4     4 宮城県     0.626   28.4    55.9\n 5     5 秋田県     0.322   37.6    58.2\n 6     6 山形県     0.379   34.0    64.3\n 7     7 福島県     0.545   31.8    58.0\n 8     8 茨城県     0.656   30.3    52.5\n 9     9 栃木県     0.648   29.6    53.1\n10    10 群馬県     0.638   30.9    53.9\n11    11 埼玉県     0.770   27.3    54.0\n12    12 千葉県     0.778   28.0    53.6\n13    13 東京都     1.15    23.3    57.2\n14    14 神奈川県   0.889   25.9    56.3\n15    15 新潟県     0.475   33.0    63.2\n16    16 富山県     0.485   32.9    55.7\n17    17 石川県     0.518   30.2    57.1\n18    18 福井県     0.421   31.1    57.8\n19    19 山梨県     0.409   31.1    60.6\n20    20 長野県     0.528   32.3    59.8\n21    21 岐阜県     0.559   31.1    58.1\n22    22 静岡県     0.726   30.7    54.8\n23    23 愛知県     0.912   25.8    56.0\n24    24 三重県     0.609   30.6    56.2\n25    25 滋賀県     0.576   26.7    57.3\n26    26 京都府     0.595   29.5    56.3\n27    27 大阪府     0.792   27.7    56.2\n28    28 兵庫県     0.649   29.3    54.3\n29    29 奈良県     0.437   31.7    59.1\n30    30 和歌山県   0.338   33.4    58.2\n31    31 鳥取県     0.287   32.5    58.2\n32    32 島根県     0.266   34.7    61.6\n33    33 岡山県     0.535   30.7    50.9\n34    34 広島県     0.618   29.8    52.1\n35    35 山口県     0.457   34.8    49.7\n36    36 徳島県     0.327   34.3    53.9\n37    37 香川県     0.487   32.1    56.1\n38    38 愛媛県     0.448   33.4    55.0\n39    39 高知県     0.274   35.6    57.3\n40    40 福岡県     0.658   28.2    52.1\n41    41 佐賀県     0.356   30.9    58.5\n42    42 長崎県     0.348   33.2    56.9\n43    43 熊本県     0.427   31.7    56.4\n44    44 大分県     0.395   33.5    57.3\n45    45 宮崎県     0.358   32.9    53.7\n46    46 鹿児島県   0.353   32.7    57.7\n47    47 沖縄県     0.375   22.7    54.9\n\n\n　データの最初のx行を出力するにはprint()関数とn引数の組み合わせでも出来るが、他にもhead()関数がある。これは最初の6行のみ出力してくれる関数である。\n\nhead(my_df3)\n\n# A tibble: 6 × 5\n     ID Pref   Finance Over65 Turnout\n  <dbl> <chr>    <dbl>  <dbl>   <dbl>\n1     1 北海道   0.462   32.3    58.8\n2     2 青森県   0.358   33.7    52.9\n3     3 岩手県   0.372   33.8    60.4\n4     4 宮城県   0.626   28.4    55.9\n5     5 秋田県   0.322   37.6    58.2\n6     6 山形県   0.379   34.0    64.3\n\n\n　head()関数はprint()関数同様、n引数で出力行数を変えることが出来る。\n\nhead(my_df3, n = 10)\n\n# A tibble: 10 × 5\n      ID Pref   Finance Over65 Turnout\n   <dbl> <chr>    <dbl>  <dbl>   <dbl>\n 1     1 北海道   0.462   32.3    58.8\n 2     2 青森県   0.358   33.7    52.9\n 3     3 岩手県   0.372   33.8    60.4\n 4     4 宮城県   0.626   28.4    55.9\n 5     5 秋田県   0.322   37.6    58.2\n 6     6 山形県   0.379   34.0    64.3\n 7     7 福島県   0.545   31.8    58.0\n 8     8 茨城県   0.656   30.3    52.5\n 9     9 栃木県   0.648   29.6    53.1\n10    10 群馬県   0.638   30.9    53.9\n\n\n　head()関数の友達としてtail()関数がある。これは最後の6行を出力をしてくれる関数である。\n\ntail(my_df3)\n\n# A tibble: 6 × 5\n     ID Pref     Finance Over65 Turnout\n  <dbl> <chr>      <dbl>  <dbl>   <dbl>\n1    42 長崎県     0.348   33.2    56.9\n2    43 熊本県     0.427   31.7    56.4\n3    44 大分県     0.395   33.5    57.3\n4    45 宮崎県     0.358   32.9    53.7\n5    46 鹿児島県   0.353   32.7    57.7\n6    47 沖縄県     0.375   22.7    54.9\n\n\n　むろん、head()関数同様、n引数で出力行数を変えることが出来る。\n\ntail(my_df3, n = 3)\n\n# A tibble: 3 × 5\n     ID Pref     Finance Over65 Turnout\n  <dbl> <chr>      <dbl>  <dbl>   <dbl>\n1    45 宮崎県     0.358   32.9    53.7\n2    46 鹿児島県   0.353   32.7    57.7\n3    47 沖縄県     0.375   22.7    54.9\n\n\n　もう一つ便利な関数はデータの中身を一切出力せず、列名（変数名）のみを出力してくれるnames()関数である。結果としてcharacter型ベクトルが返される。\n\nnames(my_df3)\n\n[1] \"ID\"      \"Pref\"    \"Finance\" \"Over65\"  \"Turnout\"\n\n\n　my_df3のデータ構造はデータ・フレームであるが、これはclass()関数で確認できる。詳細は割愛するがオブジェクトは複数のクラスを持つことが許容されており、my_df3の場合は4つのクラスの中に\"data.frame\"が含まれているため、データ・フレーム構造であることが分かる。\n\nclass(my_df3) # my_df2のデータ構造\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\n　実際、あるオブジェクトがデータ・フレームかどうかを判定するis.data.frame()関数を使うと、my_df3がデータ・フレームであることが分かる。\n\nis.data.frame(my_df3)\n\n[1] TRUE\n\n\n　他にもデータ・フレームの特徴を調べる関数としてデータ・フレームの大きさを計算する関数がある。データ・フレームの大きさとは行数と列数を意味し、それぞれnrow()とncol()関数で計算することができる。\n\nnrow(my_df1) # my_df1の行数\n\n[1] 4\n\nncol(my_df2) # my_df2の列数\n\n[1] 4\n\n\n　dim()関数を使えば行数と列数を同時に出力され、長さ2のnumeric型ベクトルが返される。\n\ndim(my_df3) # my_df3の大きさ\n\n[1] 47  5\n\n\n\n\n行の抽出\n　ベクトルは1次元であるに対し、データ・フレームは行と列といった2次元構造であるため、行・列を抽出するためには行、列をそれぞれ指定する必要がある。ベクトルと同様、オブジェクト名の後ろに[]を付けることは変わらないが、データ・フレームは2次元構造であるため、[行, 列]で指定する必要がある。\n　たとえば、my_df3の27行目を抽出するためにはmy_df3[27, ]と入力する。列の指定がされていない場合は全ての列が抽出される。\n\nmy_df3[27, ]\n\n# A tibble: 1 × 5\n     ID Pref   Finance Over65 Turnout\n  <dbl> <chr>    <dbl>  <dbl>   <dbl>\n1    27 大阪府   0.792   27.7    56.2\n\n\n　抽出された行のデータ構造はデータ・フレームである。\n\nclass(my_df3[27, ])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n　行の位置を長さ2以上のベクトルにすることで、複数行の抽出もできる。c()関数や:演算子が使用可能である。以下の例はmy_df3から13、27、40行目を抽出するコードである。\n\nmy_df3[c(13, 27, 40), ]\n\n# A tibble: 3 × 5\n     ID Pref   Finance Over65 Turnout\n  <dbl> <chr>    <dbl>  <dbl>   <dbl>\n1    13 東京都   1.15    23.3    57.2\n2    27 大阪府   0.792   27.7    56.2\n3    40 福岡県   0.658   28.2    52.1\n\n\n　抽出された行のデータ構造はデータ・フレームである。\n\nclass(my_df3[c(13, 27, 40), ])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n列の抽出\n　列の抽出も行の抽出方法と同じである。たとえば、my_df3の2列目を抽出したい場合は以下のように入力する。\n\n# my_df3[, \"Pref\"] でもOK\nmy_df3[, 2]\n\n# A tibble: 47 × 1\n   Pref  \n   <chr> \n 1 北海道\n 2 青森県\n 3 岩手県\n 4 宮城県\n 5 秋田県\n 6 山形県\n 7 福島県\n 8 茨城県\n 9 栃木県\n10 群馬県\n# … with 37 more rows\n\n\n　抽出された列のデータ構造はデータ・フレームである。\n\nclass(my_df3[, 2])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n　c()や:演算子を使うことで複数列の抽出も可能であり、抽出後のデータ構造もデータ・フレームである。\n\n# my_df3[, c(\"Pref\", \"Over65\", \"Turnout\")] でもOK\nmy_df3[, c(2, 4, 5)]\n\n# A tibble: 47 × 3\n   Pref   Over65 Turnout\n   <chr>   <dbl>   <dbl>\n 1 北海道   32.3    58.8\n 2 青森県   33.7    52.9\n 3 岩手県   33.8    60.4\n 4 宮城県   28.4    55.9\n 5 秋田県   37.6    58.2\n 6 山形県   34.0    64.3\n 7 福島県   31.8    58.0\n 8 茨城県   30.3    52.5\n 9 栃木県   29.6    53.1\n10 群馬県   30.9    53.9\n# … with 37 more rows\n\nclass(my_df3[, c(2, 4, 5)])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n　列抽出の場合、[]以外にも$を使うこともできる。[]は抽出する行・列の位置を指定するが、$を使う場合は列名を指定する。たとえば、my_df3のPref列を抽出する場合は以下のように入力する。この場合は複数列の抽出はできないことに注意すること。\n\nmy_df3$Pref\n\n [1] \"北海道\"   \"青森県\"   \"岩手県\"   \"宮城県\"   \"秋田県\"   \"山形県\"  \n [7] \"福島県\"   \"茨城県\"   \"栃木県\"   \"群馬県\"   \"埼玉県\"   \"千葉県\"  \n[13] \"東京都\"   \"神奈川県\" \"新潟県\"   \"富山県\"   \"石川県\"   \"福井県\"  \n[19] \"山梨県\"   \"長野県\"   \"岐阜県\"   \"静岡県\"   \"愛知県\"   \"三重県\"  \n[25] \"滋賀県\"   \"京都府\"   \"大阪府\"   \"兵庫県\"   \"奈良県\"   \"和歌山県\"\n[31] \"鳥取県\"   \"島根県\"   \"岡山県\"   \"広島県\"   \"山口県\"   \"徳島県\"  \n[37] \"香川県\"   \"愛媛県\"   \"高知県\"   \"福岡県\"   \"佐賀県\"   \"長崎県\"  \n[43] \"熊本県\"   \"大分県\"   \"宮崎県\"   \"鹿児島県\" \"沖縄県\"  \n\n\n　もう一つ注意すべき点としては$で抽出された列はデータ・フレームでなく、ベクトルである点だ。実際、my_df3$Prefのデータ構造を調べてみると、character型と出力される。データ構造がベクトルの場合はデータ型が出力される。\n\nclass(my_df3$Pref)\n\n[1] \"character\"\n\n\n　is.vector()関数でmy_df3$Prefがベクトルかどうかを調べることもできる。\n\nis.vector(my_df3$Pref)\n\n[1] TRUE\n\n\n　このように、抽出方法によって返り値のデータ構造が異なる。要約すると、（1）[]を用いた抽出は返り値がデータ・フレームであり、（2）$を用いた抽出は返り値がベクトルである点だ。\n\n\n\n\n\n\n\n\n\nコード\n意味\n返り値\n備考\n\n\n\n\nデータ・フレーム名[i, ]\ni番目の行を抽出\nデータ・フレーム\niは任意のベクトル\n\n\nデータ・フレーム名[, i]\ni番目の列を抽出\nデータ・フレーム\niは任意のベクトル\n\n\nデータ・フレーム名$列名\n当該列を抽出\nベクトル"
  },
  {
    "objectID": "materials/datastructure.html#リスト",
    "href": "materials/datastructure.html#リスト",
    "title": "第8回講義資料",
    "section": "リスト",
    "text": "リスト\n　最後に紹介するリスト構造はあらゆるデータ構造が格納できるデータ構造である。つまり、様々なデータ構造のオブジェクトが一つのオブジェクトとしてまとまったものであえる3。実は、Rに存在する多くのオブジェクトはリストである。したがって、Rでデータを自由自在に操るためにはリストの知識が必須である。ただし、本講義（後期を含む）ではリストは使わないため、詳細な説明は省略する。\n　リスト構造オブジェクトを作成する場合はlist()関数を使用し、中には格納するオブジェクト名を入力する。それぞれのオブジェクトに名前を付ける場合は名前 = オブジェクト名と入力する。ここではこれまで作成してきたmy_vec1、my_vec4、my_mat1、my_df1をまとめたmy_listを作成し、それぞれVector1、Vector2、Matrix、DFと名付ける。\n\nmy_list <- list(Vector1 = my_vec1,\n                Vector2 = my_vec4,\n                Matrix  = my_mat1,\n                DF      = my_df1)\n\nmy_list\n\n$Vector1\n[1] \"R is fun!\"\n\n$Vector2\n[1] 10 20  1  0\n\n$Matrix\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n$DF\n# A tibble: 4 × 3\n  Name        Foundation Students\n  <chr>            <dbl>    <dbl>\n1 Kansai            1886    27736\n2 Kangaku           1889    23671\n3 Doshisha          1875    25974\n4 Ritsumeikan       1900    32467\n\n\n　class()関数でmy_listのデータ構造を確認してみるとリスト構造であることが分かる。\n\nclass(my_list)\n\n[1] \"list\"\n\n\n　また、length()関数を使えば、当該オブジェクト内にいくつのオブジェクトが入っているかが分かる。\n\nlength(my_list)\n\n[1] 4\n\n\n　リスト構造のオブジェクトから任意の要素（オブジェクト）を抽出する場合は[]でなく、[[]]を使用する。リスト名[[i]]の場合、リストのi番目要素が抽出される。\n\nmy_list[[2]] # my_listから2番目のオブジェクトを抽出\n\n[1] 10 20  1  0\n\n\n　もし、各オブジェクトに名前が付いている場合は[[]]内に位置でなく、要素名で抽出することもできる。my_list内のDFと名付けられた要素を抽出するためには以下のように入力する。要素名は\"で囲む必要がある。\n\nmy_list[[\"DF\"]]\n\n# A tibble: 4 × 3\n  Name        Foundation Students\n  <chr>            <dbl>    <dbl>\n1 Kansai            1886    27736\n2 Kangaku           1889    23671\n3 Doshisha          1875    25974\n4 Ritsumeikan       1900    32467\n\n\n　また、データフレームの列抽出のように、$を使うこともできる。ただし、当該要素に名前が付いてある必要があり、要素名は\"で囲む必要がない。以下のコードはmy_listからMatrixと名付けられた要素を抽出するコードである。\n\nmy_list$Matrix\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12"
  },
  {
    "objectID": "materials/datastructure.html#教科書",
    "href": "materials/datastructure.html#教科書",
    "title": "第8回講義資料",
    "section": "教科書",
    "text": "教科書\n\n『私たちのR: ベストプラクティスの探求』第9章: データ構造"
  },
  {
    "objectID": "slide/slide14.html#section",
    "href": "slide/slide14.html#section",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "代表的な5種類のグラフ"
  },
  {
    "objectID": "slide/slide14.html#named-graphs-5ng",
    "href": "slide/slide14.html#named-graphs-5ng",
    "title": "ミクロ政治データ分析実習",
    "section": "5 Named Graphs (5NG)",
    "text": "5 Named Graphs (5NG)\n\n棒グラフ (bar plot)\n\ngeom_bar()\n\nヒストグラム (histogram)\n\ngeom_histogram()\n\n箱ひげ図 (box plot / box-and-whisker plot)\n\ngeom_boxplot()\n\n散布図 (scatter plot)\n\ngeom_point()\n\n折れ線グラフ (line plot)\n\ngeom_line()"
  },
  {
    "objectID": "slide/slide14.html#section-1",
    "href": "slide/slide14.html#section-1",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "散布図"
  },
  {
    "objectID": "slide/slide14.html#散布図の必須要素",
    "href": "slide/slide14.html#散布図の必須要素",
    "title": "ミクロ政治データ分析実習",
    "section": "散布図の必須要素",
    "text": "散布図の必須要素\n散布図を作成する際に必要な最低限の情報\n\n\nデータにフリーダムハウス・スコアと人間開発指数の列が必要\n\nx: 点の横軸上の位置\n\nフリーダムハウス・スコア\n\ny: 点の縦軸上の位置\n\n人間開発指数\n\n原因と結果の関係（因果関係）が考えられる2変数の場合、原因を横軸、結果を縦軸にする。"
  },
  {
    "objectID": "slide/slide14.html#データの読み込み",
    "href": "slide/slide14.html#データの読み込み",
    "title": "ミクロ政治データ分析実習",
    "section": "データの読み込み",
    "text": "データの読み込み\n第9回実習用データ（Micro09.csv）を使用\n\nlibrary(tidyverse)\ndf <- read_csv(\"Data/Micro08.csv\")"
  },
  {
    "objectID": "slide/slide14.html#散布図の作成-1",
    "href": "slide/slide14.html#散布図の作成-1",
    "title": "ミクロ政治データ分析実習",
    "section": "散布図の作成 (1)",
    "text": "散布図の作成 (1)\n幾何オブジェクトはgeom_point()を使用\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018))"
  },
  {
    "objectID": "slide/slide14.html#散布図の作成-2",
    "href": "slide/slide14.html#散布図の作成-2",
    "title": "ミクロ政治データ分析実習",
    "section": "散布図の作成 (2)",
    "text": "散布図の作成 (2)\nラベル修正 / 必要に応じてカスタマイズ\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018), color = \"royalblue\") +\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\")"
  },
  {
    "objectID": "slide/slide14.html#次元の追加",
    "href": "slide/slide14.html#次元の追加",
    "title": "ミクロ政治データ分析実習",
    "section": "次元の追加",
    "text": "次元の追加\n散布図における次元の追加\n\nそれぞれの点は各国の (1) フリーダムハウス・スコアと (2) 人間開発指数の情報を持つ\n\n= 2次元\n\n更に情報を持たせるためには…\n\n色分け: color\n大きさ: size\n形: shape\n透明度(非推奨): alpha\nファセット分割\n\n5次元以上のグラフも可能だが、3次元までを推奨\n\n一つのグラフの情報が多すぎると読みにくくなる\n4次元以上になりそうならファセット分割で対応\n3次元の場合、色分け（color）を推奨するが、白黒の図を作成する場合は形（shape）を使う。"
  },
  {
    "objectID": "slide/slide14.html#次元の散布図",
    "href": "slide/slide14.html#次元の散布図",
    "title": "ミクロ政治データ分析実習",
    "section": "5次元の散布図",
    "text": "5次元の散布図\n各点はフリーダムハウス・スコア、人間開発指数、人口（対数変換）、大陸、OECD加盟有無の情報を持つ\n\nコード結果\n\n\n\ndf %>%\n   mutate(OECD = if_else(OECD == 1, \"Member\", \"Non-member\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, color = Continent,\n                  size = Population, shape = OECD), alpha = 0.65) +\n   scale_size_continuous(trans = \"log10\") +\n   labs(x = \"Freedom House Score\", y = \"Human Development Index (2018)\",\n        size = \"Population (log)\") +\n   theme_gray()"
  },
  {
    "objectID": "slide/slide14.html#色分けの例コード",
    "href": "slide/slide14.html#色分けの例コード",
    "title": "ミクロ政治データ分析実習",
    "section": "色分けの例（コード）",
    "text": "色分けの例（コード）\naes()の内部にcolor = 色分けする変数を指定\n\nHighIncome変数を作成し、PPP_per_capitaが2万以上なら\"高\"、未満なら\"低\"\nHighIncome値に応じて点の色分けを行う（color = HighIncome）\n点の大きさは2とする（全体に適用させるため、aes()の外側に指定）\nlabs()内で凡例タイトルを修正; 凡例を下側へ移動\n\n\nコード結果\n\n\n\nscatter_plot1 <- df %>%\n   drop_na(FH_Total, HDI_2018, PPP_per_capita) %>%\n   mutate(HighIncome = if_else(PPP_per_capita >= 20000, \"高\", \"低\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, color = HighIncome), \n              size = 2) +\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\",\n        color = \"一人当たりPPP GDP\") +\n   theme(legend.position = \"bottom\")\n\n\n\n\nscatter_plot1"
  },
  {
    "objectID": "slide/slide14.html#色のカスタマイズ",
    "href": "slide/slide14.html#色のカスタマイズ",
    "title": "ミクロ政治データ分析実習",
    "section": "色のカスタマイズ",
    "text": "色のカスタマイズ\ncolorにマッピングされている変数（HighIncome）が離散変数\n\nscale_color_manual()を使用\n引数: values = c(\"値1\" = \"色1\", \"値2\" = \"色2\", ...)\n\n\nscatter_plot1 +\n   scale_color_manual(values = c(\"低\" = \"orange\", \"高\" = \"royalblue\"))"
  },
  {
    "objectID": "slide/slide14.html#ggplot2で使える色",
    "href": "slide/slide14.html#ggplot2で使える色",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}で使える色",
    "text": "{ggplot2}で使える色\n\n文字列で指定\n\n\"red\"、\"blue\"、\"royalblue\"など（全657種類）\nGoogleなどで「ggplot2 color」で検索（例）\n\nRGBカラー（HEXコード）で指定\n\n細かく調整可能（16,777,216種類の色）\n例) \"#FF0000\": 赤、\"#4169E1\": ロイヤルブルー"
  },
  {
    "objectID": "slide/slide14.html#色の見本-一部",
    "href": "slide/slide14.html#色の見本-一部",
    "title": "ミクロ政治データ分析実習",
    "section": "色の見本 (一部)",
    "text": "色の見本 (一部)"
  },
  {
    "objectID": "slide/slide14.html#shapeの見本",
    "href": "slide/slide14.html#shapeの見本",
    "title": "ミクロ政治データ分析実習",
    "section": "shapeの見本",
    "text": "shapeの見本\nshapeで指定（デフォルトはshape = 19）\n\n黒の部分はcolor、グレーの部分はfill（またはbg）で調整\n\n21と22の場合、枠線はcolor、内側の色塗りはfill\n\n0〜14の場合、中身が透明"
  },
  {
    "objectID": "slide/slide14.html#section-2",
    "href": "slide/slide14.html#section-2",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "折れ線グラフ"
  },
  {
    "objectID": "slide/slide14.html#折れ線グラフの必須要素",
    "href": "slide/slide14.html#折れ線グラフの必須要素",
    "title": "ミクロ政治データ分析実習",
    "section": "折れ線グラフの必須要素",
    "text": "折れ線グラフの必須要素\n折れ線グラフを作成する際に必要な最低限の情報\n\n\nデータに日と新規感染者数の列が必要\n\nx: 線の傾きが変化し得る点の横軸上の位置\n\n日\n\ny: 線の傾きが変化し得る点の縦軸上の位置\n\n100万人当たり新規感染者数\n\n散布図とほぼ同じ\nただし、線が2つ以上の場合groupsが必要\n\n点をグループ化しないと、どの点を繋げば良いかが分からないため"
  },
  {
    "objectID": "slide/slide14.html#データの用意",
    "href": "slide/slide14.html#データの用意",
    "title": "ミクロ政治データ分析実習",
    "section": "データの用意",
    "text": "データの用意\n授業サポートページから実習用データ（Micro14.csv）をダウンロード\n\n整然データとして加工済み\nDay: 日付（2021年6月）; NewCases: 100万人当りCOVID-19新規感染者数\n\n\nCOVID_df <- read_csv(\"Data/Micro14.csv\")\nCOVID_df\n\n# A tibble: 15 × 3\n   Country   Day NewCases\n   <chr>   <dbl>    <dbl>\n 1 Japan      16    13.6 \n 2 Japan      17    12.2 \n 3 Japan      18    12.9 \n 4 Japan      19    11.9 \n 5 Japan      20    10.4 \n 6 Korea      16    10.5 \n 7 Korea      17     9.89\n 8 Korea      18     9.40\n 9 Korea      19     8.37\n10 Korea      20     6.96\n11 Taiwan     16     7.05\n12 Taiwan     17     7.35\n13 Taiwan     18     7.85\n14 Taiwan     19     5.25\n15 Taiwan     20     4.58"
  },
  {
    "objectID": "slide/slide14.html#線が一本の場合コード",
    "href": "slide/slide14.html#線が一本の場合コード",
    "title": "ミクロ政治データ分析実習",
    "section": "線が一本の場合（コード）",
    "text": "線が一本の場合（コード）\ngeom_line()幾何オブジェクトを使用\n\nx: 点の傾きが変化し得る点の横軸上の位置\ny: 点の傾きが変化し得る点の縦軸上の位置\n日本の行のみを抽出し、横軸を日、縦軸を100万人当たり新規感染者数とした折れ線グラフを作成\n\n\nコード結果\n\n\n\nCOVID_df %>%\n   filter(Country == \"Japan\") %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")"
  },
  {
    "objectID": "slide/slide14.html#線が二本以上の場合コード",
    "href": "slide/slide14.html#線が二本以上の場合コード",
    "title": "ミクロ政治データ分析実習",
    "section": "線が二本以上の場合（コード）",
    "text": "線が二本以上の場合（コード）\ngroupに線のグループ変数を指定\n\n国別の折れ線グラフの場合、国変数を指定\n\n\nコード結果\n\n\n\nCOVID_df <- COVID_df %>%\n   mutate(Country = case_when(Country == \"Japan\" ~ \"日本\",\n                              Country == \"Korea\" ~ \"韓国\",\n                              TRUE               ~ \"台湾\"),\n          Country = factor(Country, levels = c(\"日本\", \"韓国\", \"台湾\")))\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")\n\n\n\n各線がどの国を示すのかが分からない…"
  },
  {
    "objectID": "slide/slide14.html#線が二本以上の場合コード-1",
    "href": "slide/slide14.html#線が二本以上の場合コード-1",
    "title": "ミクロ政治データ分析実習",
    "section": "線が二本以上の場合（コード）",
    "text": "線が二本以上の場合（コード）\ncolorで色分け: 国別の折れ線グラフの場合、国変数を指定\n\n線をやや太め（1.5）にする\n\nsize: 全線に適用させるためにaes()の外側に\n線が細すぎると色が区別しにくい\n\n\n\nコード結果\n\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, \n                 color = Country), size = 1.5) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\")"
  },
  {
    "objectID": "slide/slide14.html#次元の追加-1",
    "href": "slide/slide14.html#次元の追加-1",
    "title": "ミクロ政治データ分析実習",
    "section": "次元の追加",
    "text": "次元の追加\n多くの折れ線グラフは既に3次元\n\n日（x）、新規感染者数（y）、国（group or color）\nこれ以上次元を増やすならファセット分割で対応するのが賢明\nファセット分割せずに次元を増やすなら…\n\nsize: 線の太さ\nlinetype: 線のタイプ（1 = 実線、2 = 破線、4 = 点線、…）\n\n白黒図の場合、colorでなく、linetype\n\nalpha: 透明度"
  },
  {
    "objectID": "slide/slide14.html#線のタイプコード",
    "href": "slide/slide14.html#線のタイプコード",
    "title": "ミクロ政治データ分析実習",
    "section": "線のタイプ（コード）",
    "text": "線のタイプ（コード）\n\n主に白黒図で使用\n\n\nコード結果\n\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, linetype = Country),\n             size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        linetype = \"国\")\n\n自分で線のタイプを指定したい場合は\n\nデータ %>%\n  ggplot() +\n  ... +\n  scale_linetype_manual(values = c(\"日本\" = 1, \"韓国\" = 2, \"台湾\" = 4)) #<<"
  },
  {
    "objectID": "slide/slide14.html#linetypeの見本",
    "href": "slide/slide14.html#linetypeの見本",
    "title": "ミクロ政治データ分析実習",
    "section": "linetypeの見本",
    "text": "linetypeの見本\n種類が多くなると区別しにくいため、最大3つ程度\n\n1, (2 or 3), (4 or 10）\n一つ面に登場する線は3〜4本程度まで（色分けも同様）"
  },
  {
    "objectID": "slide/slide14.html#折れ線グラフ-散布図コード",
    "href": "slide/slide14.html#折れ線グラフ-散布図コード",
    "title": "ミクロ政治データ分析実習",
    "section": "折れ線グラフ + 散布図（コード）",
    "text": "折れ線グラフ + 散布図（コード）\ngeom_point()とgeom_line()を重ねる\n\n後（先）に書いたレイヤーが前面（背面）に\n傾きの変化が激しくない場合に有効\n点は線より大きめに\n白黒印刷に備え、点の形分けも可能\n\n\nCOVID_df %>%\n   ggplot(aes(x = Day, y = NewCases, color = Country)) +\n   geom_point(aes(shape = Country), size = 3) +\n   geom_line(aes(group = Country), size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\", shape = \"国\") +\n   theme_bw()"
  },
  {
    "objectID": "slide/slide14.html#折れ線グラフ-散布図図",
    "href": "slide/slide14.html#折れ線グラフ-散布図図",
    "title": "ミクロ政治データ分析実習",
    "section": "折れ線グラフ + 散布図（図）",
    "text": "折れ線グラフ + 散布図（図）"
  },
  {
    "objectID": "slide/slide14.html#section-3",
    "href": "slide/slide14.html#section-3",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "箱ひげ図"
  },
  {
    "objectID": "slide/slide14.html#箱ひげ図とは",
    "href": "slide/slide14.html#箱ひげ図とは",
    "title": "ミクロ政治データ分析実習",
    "section": "箱ひげ図とは",
    "text": "箱ひげ図とは\n\n\n変数の分布を示す方法の一つ\n\n最小値、最大値\n\nひげの両端\n\n第一四分位数、第三四分位数\n\n箱の上限と下限\n\n中央値（第二四分位数）\n\n箱内の線\n\n外れ値がある場合、点\n\n変数の分布をグループごとに見る時に有効"
  },
  {
    "objectID": "slide/slide14.html#箱ひげ図の作成",
    "href": "slide/slide14.html#箱ひげ図の作成",
    "title": "ミクロ政治データ分析実習",
    "section": "箱ひげ図の作成",
    "text": "箱ひげ図の作成\n人間開発指数 (HDI_2018) の箱ひげ図\n\nx、またはyに分布を確認した変数をマッピングする\n\nxにマッピングするか、yにするかによって箱の向きが変わる\n\n\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018)) +\n   labs(x = \"\", y = \"人間開発指数 (2018)\") +\n   theme_bw()"
  },
  {
    "objectID": "slide/slide14.html#次元の追加-2",
    "href": "slide/slide14.html#次元の追加-2",
    "title": "ミクロ政治データ分析実習",
    "section": "次元の追加",
    "text": "次元の追加\nyにしかマッピングされているため、まだ次元追加の余地が残っている\n\nxにマッピング（大陸ごとのHDI_2018の箱ひげ図）\n更に次元を追加したい場合は、ファセット分割\n\n\nコード結果\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent)) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw()"
  },
  {
    "objectID": "slide/slide14.html#カスタマイズ色",
    "href": "slide/slide14.html#カスタマイズ色",
    "title": "ミクロ政治データ分析実習",
    "section": "カスタマイズ（色）",
    "text": "カスタマイズ（色）\n箱の色を変える\n\nすべての色を変える場合、aes()の外側にfill\n箱ごとにの色を変える場合、aes()の内側にfill\n\n\nコード (1)結果 (1)コード (2)結果 (2)\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent), fill = \"cornsilk\") +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent, fill = Continent)) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw() +\n   theme(legend.position = \"none\") # 凡例の削除"
  },
  {
    "objectID": "slide/slide14.html#カスタマイズ箱の幅",
    "href": "slide/slide14.html#カスタマイズ箱の幅",
    "title": "ミクロ政治データ分析実習",
    "section": "カスタマイズ（箱の幅）",
    "text": "カスタマイズ（箱の幅）\n\naes()の外側にwidthを指定\n\n\nコード結果\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent), width = 0.5) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw() +\n   theme(legend.position = \"none\")"
  },
  {
    "objectID": "slide/slide14.html#横軸と縦軸の交換",
    "href": "slide/slide14.html#横軸と縦軸の交換",
    "title": "ミクロ政治データ分析実習",
    "section": "横軸と縦軸の交換",
    "text": "横軸と縦軸の交換\n箱が多すぎて読みにくい場合、xとyを交換も良い\n\nコード結果\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(x = HDI_2018, y = Continent)) +\n   labs(x = \"人間開発指数 (2018)\", y = \"大陸\") +\n   theme_bw(base_size = 14) +\n   theme(legend.position = \"none\")"
  },
  {
    "objectID": "slide/slide14.html#最後に",
    "href": "slide/slide14.html#最後に",
    "title": "ミクロ政治データ分析実習",
    "section": "最後に",
    "text": "最後に\n\n散布図の作成: 教科書第18.6章\n折れ線グラフの作成: 教科書第18.7章\n箱ひげ図: 教科書第18.5章\nグラフのカスタマイズ: 教科書第19章\n\nその他のグラフ\n\n教科書第20章\nThe R Graph Gallery"
  },
  {
    "objectID": "slide/slide14.html#期末テストについて",
    "href": "slide/slide14.html#期末テストについて",
    "title": "ミクロ政治データ分析実習",
    "section": "期末テストについて",
    "text": "期末テストについて\n\nサポートページを参照\n\n課題 > 期末テスト実施要領\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide01.html#講義概要",
    "href": "slide/slide01.html#講義概要",
    "title": "ミクロ政治データ分析実習",
    "section": "講義概要",
    "text": "講義概要\n\n\n\n\n講義日: 木曜日 第4時限（14:40～16:10）\n場所: TC302教室（高槻キャンパス C棟 302教室）\n講義内容: Rの使い方\n\nRの基本的な操作 & R Markdown\nデータの入出力\nデータのハンドリング（前処理）\nデータの可視化\n\n統計学、確率、多変量解析、因果推論の授業ではない。\n\nデータ分析の手法は後期の「マクロ政治データ分析実習」\n後期の授業ではRの使い方について解説しない。\n\n到達目標: Rを用いたデータ分析の教科書が読める土台づくり"
  },
  {
    "objectID": "slide/slide01.html#講義内容予定",
    "href": "slide/slide01.html#講義内容予定",
    "title": "ミクロ政治データ分析実習",
    "section": "講義内容（予定）",
    "text": "講義内容（予定）\n\n第1回 イントロダクション\n第2回 RとIDEの導入\n第3回 Rの基本的な操作\n第4回 プログラミングの基本的な概念\n第5回 R Markdownと再現可能な研究\n第6回 データ収集\n第7回 データ型\n第8回 データ構造\n第9回 データハンドリング（1）\n第10回 データハンドリング（2）\n第11回 データハンドリング（3）\n第12回 可視化（1）\n第13回 可視化（2）\n第14回 可視化（3）\n第15回 期末テスト"
  },
  {
    "objectID": "slide/slide01.html#参考-マクロ政治データ分析実習の内容-予定",
    "href": "slide/slide01.html#参考-マクロ政治データ分析実習の内容-予定",
    "title": "ミクロ政治データ分析実習",
    "section": "参考) マクロ政治データ分析実習の内容 (予定)",
    "text": "参考) マクロ政治データ分析実習の内容 (予定)\n\nリサーチデザイン\n記述統計\n統計的推定\n統計的仮説検定\n変数間の関係 ( \\(t\\) 検定、 \\(\\chi^2\\) 検定、相関分析)\n(線形) 回帰分析\n交互作用\nロジスティック回帰分析\n分析結果の可視化"
  },
  {
    "objectID": "slide/slide01.html#本講義の位置づけ",
    "href": "slide/slide01.html#本講義の位置づけ",
    "title": "ミクロ政治データ分析実習",
    "section": "本講義の位置づけ",
    "text": "本講義の位置づけ"
  },
  {
    "objectID": "slide/slide01.html#ミクロ政治とマクロ政治",
    "href": "slide/slide01.html#ミクロ政治とマクロ政治",
    "title": "ミクロ政治データ分析実習",
    "section": "ミクロ政治とマクロ政治",
    "text": "ミクロ政治とマクロ政治\nデータの分析単位として「ミクロ」と「マクロ」\n\nミクロデータ（個票データ）\n\n主に個人データ\n\nマクロデータ（集計データ）\n\n国家、市区町村、選挙区など\nミクロにおける主体（たとえば、人）の集合\n\n\n分析における「ミクロ」と「マクロ」\n\n「ミクロ」のための手法、「マクロ」のための手法の区別はほぼない\n\nほとんどぼ分析手法はミクロ、マクロ区別なく使用\n\n計量分析の主なツールでとしてR: 敷居が高い\n\nミクロ政治データ分析演習\n\nツールの使い方を習得してから具体的な分析手法へ\n\nマクロ政治データ分析演習"
  },
  {
    "objectID": "slide/slide01.html#前提知識",
    "href": "slide/slide01.html#前提知識",
    "title": "ミクロ政治データ分析実習",
    "section": "前提知識",
    "text": "前提知識\n\nファイル・システムの理解\n\nフォルダー (ディレクトリ)の概念\nC:/AAA/BBB/CCC.txtや~/AAA/BBB/CCC.textの意味が理解できること\n\nブラインド・タッチ (重要)\n\n期末レポートは第15回の授業中に執筆する。\nタイピングが遅いと、時間内に期末レポートの完成ができない。\n第15回の授業までにブラインドタッチの練習を推奨\nこの授業に限らず、現代社会で極めて重要なスキル"
  },
  {
    "objectID": "slide/slide01.html#教科書",
    "href": "slide/slide01.html#教科書",
    "title": "ミクロ政治データ分析実習",
    "section": "教科書",
    "text": "教科書\nSong Jaehyun・矢内勇生.『私たちのR: ベストプラクティスの探求』Web-book\n\n本講義内容を200%カバーする\n無料 (https://www.jaysong.net/RBook)"
  },
  {
    "objectID": "slide/slide01.html#教科書と本講義の位置づけ",
    "href": "slide/slide01.html#教科書と本講義の位置づけ",
    "title": "ミクロ政治データ分析実習",
    "section": "教科書と本講義の位置づけ",
    "text": "教科書と本講義の位置づけ\n章立ては予告なく変更される可能性がある。\n\nRとIDEの導入: 第1〜5章\nRの基本的な操作: 第6、7章\nR Markdownと再現可能な研究: 第21章\nデータ型とデータ構造: 第8、9章\nRプログラミング基礎: 第10、11章\nデータハンドリング: 第12〜15章\n可視化: 第17〜20章"
  },
  {
    "objectID": "slide/slide01.html#参考書",
    "href": "slide/slide01.html#参考書",
    "title": "ミクロ政治データ分析実習",
    "section": "参考書",
    "text": "参考書\n\n松村優哉 他. 2021. 『改訂2版 RユーザのためのRStudio[実践]入門』技術評論社\nGarrett Grolemund and Hadley Wickham. 2017. R for Data Science. O’Reilly.\n\n邦訳『Rではじめるデータサイエンス』(原著は無料: https://r4ds.had.co.nz/)\n\nJared P. Lander. 2018. R for Everyone. Addison-Wesley Professional.\n\n邦訳『みんなのR』"
  },
  {
    "objectID": "slide/slide01.html#成績評価",
    "href": "slide/slide01.html#成績評価",
    "title": "ミクロ政治データ分析実習",
    "section": "成績評価",
    "text": "成績評価\n\n平常点 (20%)\n\n学生証を持参すること\n欠席4回以上は評価の対象外（3回まで評価対象）\n\n課題 (50%)\n\n計8〜9回の課題を予定\n未提出4回以上は評価の対象外（3回まで評価対象）\n課題提出期限の延長はない (提出までの期間が長めであるため)\n\n提出期限は次回講義の前日23時59分まで\n期限内に提出出来なかった場合でも宋に連絡する必要はない (どうせ延ばしてくれない)。\n\n不正行為厳禁\n\n期末レポート (30%)\n\n第15回の授業内 + 持ち帰りで期末レポートを執筆\n\n授業内で完成した分を提出し、残りを持ち帰りで執筆して再提出。\n\n未提出者は評価の対象外\n不正行為厳禁"
  },
  {
    "objectID": "slide/slide01.html#オフィスアワー",
    "href": "slide/slide01.html#オフィスアワー",
    "title": "ミクロ政治データ分析実習",
    "section": "オフィス・アワー",
    "text": "オフィス・アワー\n宋、またはTAが研究室に待機し、事前予約なしに相談、質問などが可能な時間\n\n毎週火・木曜日3限 (13:00〜14:30)\n\n火曜日は宋、木曜日はTAが対応（宋は木3に授業がある）\n上記の時間外は事前予約が必要（メール、対面）\nメール: song@kansai-u.ac.jp\n\n場所：TA227研究室（A棟の2階）"
  },
  {
    "objectID": "slide/slide01.html#課題",
    "href": "slide/slide01.html#課題",
    "title": "ミクロ政治データ分析実習",
    "section": "課題",
    "text": "課題\n課題の遂行有無は確認しない（履修者の良心に任せる）。\n課題1\n\n教科書第6章の第1節を読んでおく。\n\nファイルシステムに関する内容\n\n\n課題2\n\nブラインドタッチの練習（Googleで「タイピング練習」を検索）\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide03.html#プロジェクト機能のすゝめ",
    "href": "slide/slide03.html#プロジェクト機能のすゝめ",
    "title": "ミクロ政治データ分析実習",
    "section": "プロジェクト機能のすゝめ",
    "text": "プロジェクト機能のすゝめ\n\nファイルの読み込み/書き出しの際にパス問題が生じる場合が多い。\n毎回の実習、課題用にプロジェクトを作成することを強く推奨する。\n\nプロジェクトを使わない場合、本スライド/資料上のコードの再現性は保証しない。\n\nプロジェクトの作成方法はサポートページの「Rの使い方 > プロジェクト管理」を参照"
  },
  {
    "objectID": "slide/slide03.html#電卓としてのrと算術演算子",
    "href": "slide/slide03.html#電卓としてのrと算術演算子",
    "title": "ミクロ政治データ分析実習",
    "section": "電卓としてのRと算術演算子",
    "text": "電卓としてのRと算術演算子\n\n\n\n\nStep 1: File > New File > R Script\nStep 2: Sourceペインの大きさを最大化する。\nStep 3: Sourceペインに以下のように入力する\n\n\n1 + 2 + 3\n\n\nStep 4: Step 3で入力した行に移動し、Cmd + Return (Ctrl + Enter)\n\nConsoleペインに以下のように出力されればOK\n\n\n\n\n[1] 6"
  },
  {
    "objectID": "slide/slide03.html#rの算術演算子",
    "href": "slide/slide03.html#rの算術演算子",
    "title": "ミクロ政治データ分析実習",
    "section": "Rの算術演算子",
    "text": "Rの算術演算子\n\n結果として何らかの数字が返される\n累乗（^）を除き、演算子の前後にはスペースを入れるのがRの流儀\n\n必須ではないが、コードが読みやすくなる\n\n\n\n\n\n演算子\n意味\n例\n結果\n\n\n\n\n+\n和\n2 + 5\n7\n\n\n-\n差\n2 - 8\n-6\n\n\n*\n積\n7 * 3\n21\n\n\n/\n商\n16 / 5\n3.2\n\n\n^、**\n累乗（べき乗）\n2^3または2 ** 3\n8\n\n\n%%\n剰余 (モジュロ)\n18 %% 7\n4\n\n\n%/%\n整数商\n18 %/% 7\n2"
  },
  {
    "objectID": "slide/slide03.html#rの論理演算子",
    "href": "slide/slide03.html#rの論理演算子",
    "title": "ミクロ政治データ分析実習",
    "section": "Rの論理演算子",
    "text": "Rの論理演算子\n\n真（TRUE）か偽（FALSE）の値を返す演算子\n\n\n3 > 2 # 3は2より大きいか\n\n[1] TRUE\n\n5 <= 10 # 5は10以下か\n\n[1] TRUE\n\n2 + 3 == 1 # 2 + 3は1に等しいか\n\n[1] FALSE\n\n2 + 2 != 2 * 2 # 2 + 3は2 * 2と等しくないか\n\n[1] FALSE\n\n(2 + 2) != (2 * 2) # こっちの方がもう少し読みやすい\n\n[1] FALSE"
  },
  {
    "objectID": "slide/slide03.html#rの論理演算子まとめ",
    "href": "slide/slide03.html#rの論理演算子まとめ",
    "title": "ミクロ政治データ分析実習",
    "section": "Rの論理演算子（まとめ）",
    "text": "Rの論理演算子（まとめ）\n\n「等しい」は=でなく、==であることに注意すること\n\n=は代入演算子として機能する（他の言語と同じ）。\n\n\n\n\n\n演算子\n意味\n例\n結果\n\n\n\n\nx < y\nxはyより小さい\n3 < 1\nFALSE\n\n\nx <= y\nxはyと等しいか、小さい\n2 <= 2\nTRUE\n\n\nx > y\nxはyより大きい\n6 > 5\nTRUE\n\n\nx >= y\nxはyと等しいか、大きい\n4 >= 5\nFALSE\n\n\nx == y\nxとyは等しい\n(2 + 3) == (4 + 1)\nTRUE\n\n\nx != y\nxとyは等しくない\n((2 * 3) + 1) != (2 * (3 + 1))\nTRUE"
  },
  {
    "objectID": "slide/slide03.html#論理演算子-andとor",
    "href": "slide/slide03.html#論理演算子-andとor",
    "title": "ミクロ政治データ分析実習",
    "section": "論理演算子: ANDとOR",
    "text": "論理演算子: ANDとOR\nAND演算子: &\n\n&を挟む左右の両側がTRUEの場合のみTRUEを返す\n\n\n(2 + 3 == 5) & (1 * 2 == 3) # TRUE and FALSEだから\n\n[1] FALSE\n\n(2 + 2 == 4) & (2 * 2 == 4) # TRUE and TRUEだから\n\n[1] TRUE\n\n\n\nOR演算子: |\n\n|を挟む左右の片側、あるいは両側がTRUEの場合のみTRUEを返す\n\n\n(2 + 3 == 5) | (1 * 2 == 3) # TRUE or FALSEだから\n\n[1] TRUE\n\n(2 + 2 != 4) | (2 * 2 != 4) # FALSE or FALSEだから\n\n[1] FALSE"
  },
  {
    "objectID": "slide/slide03.html#練習問題",
    "href": "slide/slide03.html#練習問題",
    "title": "ミクロ政治データ分析実習",
    "section": "練習問題",
    "text": "練習問題\n\n\\(\\frac{1234 \\times 4321}{3}\\)\n\\(\\frac{1234 \\times 4321}{3}\\)の余りは？\n\n\\((1234 \\times 4321) \\text{ mod } 3\\)とも表記する\n\n\\(2 \\times 3\\) と \\(2 + 3\\) は等しいか\n\\(1009 \\text{ mod } 3\\) は0か\n\\(5^5\\) は100以上、かつ1000未満であるか"
  },
  {
    "objectID": "slide/slide03.html#練習問題答え",
    "href": "slide/slide03.html#練習問題答え",
    "title": "ミクロ政治データ分析実習",
    "section": "練習問題（答え）",
    "text": "練習問題（答え）\n\n(1234 * 4321) / 3\n\n[1] 1777371\n\n(1234 * 4321) %% 3\n\n[1] 1\n\n2 * 3 == 2 + 3\n\n[1] FALSE\n\n1009 %% 3 == 0\n\n[1] FALSE\n\n(5^5 >= 100) & (5^5 < 1000)\n\n[1] FALSE"
  },
  {
    "objectID": "slide/slide03.html#ベクトル",
    "href": "slide/slide03.html#ベクトル",
    "title": "ミクロ政治データ分析実習",
    "section": "ベクトル",
    "text": "ベクトル\n\n\n\n123454321 \\(\\times\\) 2を計算してみよう\n123454321 \\(\\times\\) 3を計算してみよう\n123454321 \\(\\times\\) 4を計算してみよう\n…\n123454321 \\(\\times\\) 199を計算してみよう\n123454321 \\(\\times\\) 200を計算してみよう\n\n\n\n123454321 * 2\n123454321 * 3\n123454321 * 4\n\n...\n\n123454321 * 199\n123454321 * 200\n\n\n\n\n効率的な方法は?\n\n123454321をコピーし貼り付けながら計算を繰り返す\n123454321にxという名前を付けて、x * 1のように表記する"
  },
  {
    "objectID": "slide/slide03.html#rにおけるベクトル",
    "href": "slide/slide03.html#rにおけるベクトル",
    "title": "ミクロ政治データ分析実習",
    "section": "Rにおけるベクトル",
    "text": "Rにおけるベクトル\nベクトル（vector）: Rにおけるデータの最小単位\n\n同じデータ型（数値、文字列など）\n\n数値と文字列が混在するベクトルは作成不可\n\n長さは1以上\n\n1や\"Cat\"は長さ1のベクトル\n\nc()関数で作成\n\n()の中にベクトルの要素を入力する"
  },
  {
    "objectID": "slide/slide03.html#ベクトルの作成",
    "href": "slide/slide03.html#ベクトルの作成",
    "title": "ミクロ政治データ分析実習",
    "section": "ベクトルの作成",
    "text": "ベクトルの作成\n\n<-演算子で格納\n\nベクトル名という名前のオブジェクト（object）が生成される\n\n格納しない場合、作業環境に保存されず、出力のみ\n\nベクトル名 <- c(要素1, 要素2, ...)\n\n例1: 要素が1, 2, 3, 4, 5の長さ5の数値型ベクトル\n\nベクトルをmy_vector1という名前で作業環境に格納\n\n\nmy_vector1 <- c(1, 2, 3, 4, 5)\n\n\n例2: 要素が”Cat”, “Lion”, “Tiger”の長さ3の文字型ベクトルをmy_vector2という名で格納\n\n文字は必ず\"か'で囲む\n\n\nmy_vector2 <- c(\"Cat\", \"Lion\", \"Tiger\")"
  },
  {
    "objectID": "slide/slide03.html#オブジェクトの名前",
    "href": "slide/slide03.html#オブジェクトの名前",
    "title": "ミクロ政治データ分析実習",
    "section": "オブジェクトの名前",
    "text": "オブジェクトの名前\n基本的にオブジェクト名は何でも良いが、いくつかの禁則事項がある\n\n特殊記号、スペース禁止（例外: _と.）\n\nスペースの代わりに_か.が使われるが、_を推奨\n\n数字、または_、.で始まるオブジェクト名\n予約語は使えない（forやifなど）\n\n使える予約語もあるが、非推奨\n\n日本語、ハングル、簡体字、アラビア文字も可能であるが、非推奨\n\n\n良いオブジェクト名は\n\nオブジェクト名を見るだけで、中身の内容が想像できる\n短いオブジェクト名"
  },
  {
    "objectID": "slide/slide03.html#オブジェクトの表示",
    "href": "slide/slide03.html#オブジェクトの表示",
    "title": "ミクロ政治データ分析実習",
    "section": "オブジェクトの表示",
    "text": "オブジェクトの表示\n現在の作業環境におけるオブジェクトリスト\n\nEnvironmentペインで確認\nConsoleペインでls()を入力\n\n\nls()\n\n[1] \"my_vector1\" \"my_vector2\"\n\n\n\nオブジェクトの出力\nオブジェクト名のみ入力（print(オブジェクト名)もOK）\n\nmy_vector1 # print(my_vector1) でもOK\n\n[1] 1 2 3 4 5\n\nmy_vector2 # print(my_vector2) でもOK\n\n[1] \"Cat\"   \"Lion\"  \"Tiger\"\n\n\n\nRを再起動すると作業環境が初期化されるため、もう一回作成する必要がある。\n\nコードを記録し、残すことが重要"
  },
  {
    "objectID": "slide/slide03.html#比較",
    "href": "slide/slide03.html#比較",
    "title": "ミクロ政治データ分析実習",
    "section": "比較",
    "text": "比較\nコードは一行増えたものの、全体的にはコードの量が著しく減る。\n\nただし、200行書かないといけない点は変わらない。\n\nより効率的な方法は?\n\n\n\n\n\n123454321 * 2\n## [1] 246908642\n123454321 * 3\n## [1] 370362963\n123454321 * 4\n## [1] 493817284\n123454321 * 5\n## [1] 617271605\n\n\n\n\n\nx <- 123454321\nx * 2\n## [1] 246908642\nx * 3\n## [1] 370362963\nx * 4\n## [1] 493817284\nx * 5\n## [1] 617271605"
  },
  {
    "objectID": "slide/slide03.html#等差数列ベクトルの作り方",
    "href": "slide/slide03.html#等差数列ベクトルの作り方",
    "title": "ミクロ政治データ分析実習",
    "section": "等差数列ベクトルの作り方",
    "text": "等差数列ベクトルの作り方\n\n\n公差 = 1の等差数列\n\n:演算子を利用\n\n\nc(1, 2, 3, 4, 5, 6, 7)\n\n[1] 1 2 3 4 5 6 7\n\n1:7\n\n[1] 1 2 3 4 5 6 7\n\n8:3\n\n[1] 8 7 6 5 4 3\n\n\n\n\n\n公差 \\(\\neq\\) 1の等差数列\n\nseq()関数の使用 (byで公差を指定)\n\n\nc(1, 3, 5, 7, 9)\n\n[1] 1 3 5 7 9\n\nseq(1, 9, by = 2)\n\n[1] 1 3 5 7 9\n\nseq(1, 5, by = 0.5)\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\nseq(8, 3, by = -1)\n\n[1] 8 7 6 5 4 3"
  },
  {
    "objectID": "slide/slide03.html#ベクトル同士の演算",
    "href": "slide/slide03.html#ベクトル同士の演算",
    "title": "ミクロ政治データ分析実習",
    "section": "ベクトル同士の演算",
    "text": "ベクトル同士の演算\n例) ベクトルXとベクトルY同士の演算\n\nケース1: Xの長さ = Yの長さ\nケース2: Xの長さ \\(\\neq\\) Yの長さ\n\n\n参考) ベクトルの長さの求め方\n\nlength()関数を使用\n\n\nlength(my_vector1) # c(1, 2, 3, 4, 5)\n\n[1] 5\n\nlength(my_vector2) # c(\"Cat\", \"Lion\", \"Tiger\")\n\n[1] 3"
  },
  {
    "objectID": "slide/slide03.html#ケース1-ベクトルの長さが同じ場合",
    "href": "slide/slide03.html#ケース1-ベクトルの長さが同じ場合",
    "title": "ミクロ政治データ分析実習",
    "section": "ケース1: ベクトルの長さが同じ場合",
    "text": "ケース1: ベクトルの長さが同じ場合\n\n同じ位置の要素同士の演算\n\n\n\n\nベクトル/位置\n1番目\n2番目\n3番目\n4番目\n5番目\n6番目\n\n\n\n\nmy_vec1\n1\n2\n3\n4\n5\n6\n\n\n\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\n\nmy_vec2\n0\n1\n2\n0\n1\n2\n\n\n結果\n0\n2\n6\n0\n5\n12\n\n\n\n\n\nmy_vec1 <- c(1, 2, 3, 4, 5, 6)\nmy_vec2 <- c(0, 1, 2, 0, 1, 2)\nmy_vec1 * my_vec2\n\n[1]  0  2  6  0  5 12"
  },
  {
    "objectID": "slide/slide03.html#ケース2-ベクトルの長さが異なる場合",
    "href": "slide/slide03.html#ケース2-ベクトルの長さが異なる場合",
    "title": "ミクロ政治データ分析実習",
    "section": "ケース2: ベクトルの長さが異なる場合",
    "text": "ケース2: ベクトルの長さが異なる場合\n\n短い方のベクトルがリサイクルされる（ベクトル・リサイクル）。\n\nmy_vec4の方が短いため、足りない分（太字の部分）はリサイクルされる。\n\n\n\n\n\nベクトル/位置\n1番目\n2番目\n3番目\n4番目\n5番目\n6番目\n\n\n\n\nmy_vec3\n1\n2\n3\n4\n5\n6\n\n\n\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\n\nmy_vec4\n0\n1\n0\n1\n0\n1\n\n\n結果\n0\n2\n0\n4\n0\n6\n\n\n\n\n\nmy_vec3 <- c(1, 2, 3, 4, 5, 6)\nmy_vec4 <- c(0, 1)\nmy_vec3 * my_vec4\n\n[1] 0 2 0 4 0 6"
  },
  {
    "objectID": "slide/slide03.html#最初の問題",
    "href": "slide/slide03.html#最初の問題",
    "title": "ミクロ政治データ分析実習",
    "section": "最初の問題",
    "text": "最初の問題\n結果はどのコードでも同じ\n\nコード結果\n\n\n\n\n答え（3行 ver.）\n\nx <- 123454321\ny <- 2:200\nx * y\n\n\n\n\n答え（2行 ver.）\n\nx <- 123454321\nx * 2:200\n\nまたは、\n\nx <- 2:200\n123454321 * x\n\n\n\n\n答え（1行 ver.）\n\n123454321 * 2:200\n\n\n\n\n\n\n123454321 * 2:200\n\n  [1]   246908642   370362963   493817284   617271605   740725926   864180247\n  [7]   987634568  1111088889  1234543210  1357997531  1481451852  1604906173\n [13]  1728360494  1851814815  1975269136  2098723457  2222177778  2345632099\n [19]  2469086420  2592540741  2715995062  2839449383  2962903704  3086358025\n [25]  3209812346  3333266667  3456720988  3580175309  3703629630  3827083951\n [31]  3950538272  4073992593  4197446914  4320901235  4444355556  4567809877\n [37]  4691264198  4814718519  4938172840  5061627161  5185081482  5308535803\n [43]  5431990124  5555444445  5678898766  5802353087  5925807408  6049261729\n [49]  6172716050  6296170371  6419624692  6543079013  6666533334  6789987655\n [55]  6913441976  7036896297  7160350618  7283804939  7407259260  7530713581\n [61]  7654167902  7777622223  7901076544  8024530865  8147985186  8271439507\n [67]  8394893828  8518348149  8641802470  8765256791  8888711112  9012165433\n [73]  9135619754  9259074075  9382528396  9505982717  9629437038  9752891359\n [79]  9876345680  9999800001 10123254322 10246708643 10370162964 10493617285\n [85] 10617071606 10740525927 10863980248 10987434569 11110888890 11234343211\n [91] 11357797532 11481251853 11604706174 11728160495 11851614816 11975069137\n [97] 12098523458 12221977779 12345432100 12468886421 12592340742 12715795063\n[103] 12839249384 12962703705 13086158026 13209612347 13333066668 13456520989\n[109] 13579975310 13703429631 13826883952 13950338273 14073792594 14197246915\n[115] 14320701236 14444155557 14567609878 14691064199 14814518520 14937972841\n[121] 15061427162 15184881483 15308335804 15431790125 15555244446 15678698767\n[127] 15802153088 15925607409 16049061730 16172516051 16295970372 16419424693\n[133] 16542879014 16666333335 16789787656 16913241977 17036696298 17160150619\n[139] 17283604940 17407059261 17530513582 17653967903 17777422224 17900876545\n[145] 18024330866 18147785187 18271239508 18394693829 18518148150 18641602471\n[151] 18765056792 18888511113 19011965434 19135419755 19258874076 19382328397\n[157] 19505782718 19629237039 19752691360 19876145681 19999600002 20123054323\n[163] 20246508644 20369962965 20493417286 20616871607 20740325928 20863780249\n[169] 20987234570 21110688891 21234143212 21357597533 21481051854 21604506175\n[175] 21727960496 21851414817 21974869138 22098323459 22221777780 22345232101\n[181] 22468686422 22592140743 22715595064 22839049385 22962503706 23085958027\n[187] 23209412348 23332866669 23456320990 23579775311 23703229632 23826683953\n[193] 23950138274 24073592595 24197046916 24320501237 24443955558 24567409879\n[199] 24690864200"
  },
  {
    "objectID": "slide/slide03.html#ベクトル要素の抽出",
    "href": "slide/slide03.html#ベクトル要素の抽出",
    "title": "ミクロ政治データ分析実習",
    "section": "ベクトル要素の抽出",
    "text": "ベクトル要素の抽出\nベクトルから任意の要素を抽出する2つの方法\n\n方法1: 抽出する要素の位置を指定する。\n方法2: 論理演算子を利用する。\n\n\n例) 11, 12, 13, …, 19, 20が格納されたmy_vec5\n\nmy_vec5 <- 11:20 # my_vec <- seq(11, 20, by = 1) と同じ\nmy_vec5\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\n\n\n\n\n\n位置\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\nmy_vec5\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n\n他の言語と違い、位置の番号は0からでなく、1からスタートすることに注意"
  },
  {
    "objectID": "slide/slide03.html#要素の抽出-位置指定",
    "href": "slide/slide03.html#要素の抽出-位置指定",
    "title": "ミクロ政治データ分析実習",
    "section": "要素の抽出: 位置指定",
    "text": "要素の抽出: 位置指定\n\nベクトル名[抽出する要素の位置]\n\n例1) my_vec5の3番目の要素\n\nmy_vec5[3]\n\n[1] 13\n\n\n例2) my_vec5の2, 3, 4, 5番目の要素\n\n[]内に抽出する要素の位置を表すベクトルを指定\n\n\npos_vec <- c(2, 3, 4, 5)\nmy_vec5[pos_vec]\n\n[1] 12 13 14 15\n\nmy_vec5[c(2, 3, 4, 5)]\n\n[1] 12 13 14 15\n\nmy_vec5[seq(2, 5, by = 1)]\n\n[1] 12 13 14 15\n\nmy_vec5[2:5]\n\n[1] 12 13 14 15"
  },
  {
    "objectID": "slide/slide03.html#要素の抽出-論理演算子の利用",
    "href": "slide/slide03.html#要素の抽出-論理演算子の利用",
    "title": "ミクロ政治データ分析実習",
    "section": "要素の抽出: 論理演算子の利用",
    "text": "要素の抽出: 論理演算子の利用\n\nそれぞれの要素に対し、抽出するか（TRUE）しないか（FALSE）を指定\n\n例1) my_vec5から1, 4, 7, 9, 10番目の要素を抽出\n\n[]内にベクトルの長さ分のベクトルを更に入力する必要があるため、あまり使わない方法\n\n\n# my_vec5[c(1, 4, 7, 9, 10)] と同じ結果\nmy_vec5[c(TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE)]\n\n[1] 11 14 17 19 20\n\n\n例2) my_vec5から奇数のみ抽出（論理演算子の利用）\n\n# my_vec5を2で割った場合、余りが1ならTRUE、その他はFALSE\nmy_vec5 %% 2 == 1\n\n [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\nmy_vec5[my_vec5 %% 2 == 1]\n\n[1] 11 13 15 17 19"
  },
  {
    "objectID": "slide/slide03.html#表形式データの読み込み",
    "href": "slide/slide03.html#表形式データの読み込み",
    "title": "ミクロ政治データ分析実習",
    "section": "表形式データの読み込み",
    "text": "表形式データの読み込み\n{tidyverse}パッケージが提供するread_csv()関数を利用\n\nオブジェクト名 <- read_csv(\"パスを含むファイル名\")\n以下の例はプロジェクト・フォルダー内にDataという名の下位フォルダーがあり、その中にPrev_Vote.csvが保存されている場合。\n\nNIIオンライン分析システムを使用する場合、予めデータをアップロードしておくこと。\n\n\n\nlibrary(tidyverse)\nmy_data <- read_csv(\"Data/Pref_Vote.csv\")"
  },
  {
    "objectID": "slide/slide03.html#データの出力",
    "href": "slide/slide03.html#データの出力",
    "title": "ミクロ政治データ分析実習",
    "section": "データの出力",
    "text": "データの出力\n\nオブジェクト名、またはprint(オブジェクト名)\n\n\nmy_data # my_dataの中身の出力\n\n# A tibble: 47 × 13\n      ID Pref   Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n   <dbl> <chr>   <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n 1     1 北海道  0.419   29.1    24.7  32.8    30.6 13.4    3.43 11.4    1.68\n 2     2 青森県  0.332   30.1    23.9  40.4    24.6 12.8    3.82  8.92   3.41\n 3     3 岩手県  0.341   30.4    24.5  34.9    22.4  8.61   5.16 11.2    5.29\n 4     4 宮城県  0.596   25.8    27.3  36.7    25.4 13.4    3.97  9.99   3.62\n 5     5 秋田県  0.299   33.8    21.4  43.5    22.7 11.2    5.17  7.56   5.12\n 6     6 山形県  0.342   30.8    24.8  42.5    21.5 11.8    4.3   7.6    5.2 \n 7     7 福島県  0.509   28.7    25.2  33.8    28.3 11.0    3.43 10.4    3.24\n 8     8 茨城県  0.633   26.8    26.6  40.6    19.0 15.0    6.67 10.1    2.88\n 9     9 栃木県  0.622   25.9    26.8  38.8    21.6 12.4   10.9   7      2.05\n10    10 群馬県  0.603   27.6    26.6  42.1    19.3 13.8    5.61 10      2.44\n# … with 37 more rows, and 2 more variables: Region2 <dbl>, Region6 <dbl>"
  },
  {
    "objectID": "slide/slide03.html#データが全部見えない",
    "href": "slide/slide03.html#データが全部見えない",
    "title": "ミクロ政治データ分析実習",
    "section": "データが全部見えない?",
    "text": "データが全部見えない?\n1行目\n\n意味: 47行13列の表形式データ\n\n# A tibble: 47 × 13\n\n最終行\n\n意味: 表示された行以外にも更に37行があり、Region2とRegion6は画面では省略されている。\n\n文字サイズが小さい or 画面が大きい場合は省略されず、13列がすべて出力される場合もある。\n\n\n# … with 37 more rows, and 2 more variables: Region2 <dbl>, Region6 <dbl>"
  },
  {
    "objectID": "slide/slide03.html#読み込んだデータの出力",
    "href": "slide/slide03.html#読み込んだデータの出力",
    "title": "ミクロ政治データ分析実習",
    "section": "読み込んだデータの出力",
    "text": "読み込んだデータの出力\n\nデフォルト出力行数の指定最後の6行最後のx行\n\n\n\nオブジェクト名、またはprint(オブジェクト名)\n\n\nmy_data\n\n# A tibble: 47 × 13\n      ID Pref   Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n   <dbl> <chr>   <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n 1     1 北海道  0.419   29.1    24.7  32.8    30.6 13.4    3.43 11.4    1.68\n 2     2 青森県  0.332   30.1    23.9  40.4    24.6 12.8    3.82  8.92   3.41\n 3     3 岩手県  0.341   30.4    24.5  34.9    22.4  8.61   5.16 11.2    5.29\n 4     4 宮城県  0.596   25.8    27.3  36.7    25.4 13.4    3.97  9.99   3.62\n 5     5 秋田県  0.299   33.8    21.4  43.5    22.7 11.2    5.17  7.56   5.12\n 6     6 山形県  0.342   30.8    24.8  42.5    21.5 11.8    4.3   7.6    5.2 \n 7     7 福島県  0.509   28.7    25.2  33.8    28.3 11.0    3.43 10.4    3.24\n 8     8 茨城県  0.633   26.8    26.6  40.6    19.0 15.0    6.67 10.1    2.88\n 9     9 栃木県  0.622   25.9    26.8  38.8    21.6 12.4   10.9   7      2.05\n10    10 群馬県  0.603   27.6    26.6  42.1    19.3 13.8    5.61 10      2.44\n# … with 37 more rows, and 2 more variables: Region2 <dbl>, Region6 <dbl>\n\n\n\n\n\nprint(オブジェクト名, n = 行数)\n\n\nprint(my_data, n = 15)\n\n# A tibble: 47 × 13\n      ID Pref     Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n   <dbl> <chr>     <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n 1     1 北海道    0.419   29.1    24.7  32.8    30.6 13.4    3.43 11.4    1.68\n 2     2 青森県    0.332   30.1    23.9  40.4    24.6 12.8    3.82  8.92   3.41\n 3     3 岩手県    0.341   30.4    24.5  34.9    22.4  8.61   5.16 11.2    5.29\n 4     4 宮城県    0.596   25.8    27.3  36.7    25.4 13.4    3.97  9.99   3.62\n 5     5 秋田県    0.299   33.8    21.4  43.5    22.7 11.2    5.17  7.56   5.12\n 6     6 山形県    0.342   30.8    24.8  42.5    21.5 11.8    4.3   7.6    5.2 \n 7     7 福島県    0.509   28.7    25.2  33.8    28.3 11.0    3.43 10.4    3.24\n 8     8 茨城県    0.633   26.8    26.6  40.6    19.0 15.0    6.67 10.1    2.88\n 9     9 栃木県    0.622   25.9    26.8  38.8    21.6 12.4   10.9   7      2.05\n10    10 群馬県    0.603   27.6    26.6  42.1    19.3 13.8    5.61 10      2.44\n11    11 埼玉県    0.765   24.8    27.7  32.3    20.4 16      7.23 13.9    1.91\n12    12 千葉県    0.777   25.9    26.7  37.8    21.7 14.0    5.46 11.3    2.01\n13    13 東京都    1.00    22.7    27.4  34.4    19.8 11.4    7.34 14.2    2.82\n14    14 神奈川県  0.917   23.9    27.8  34.9    21.5 12.2    7.77 12.5    2.79\n15    15 新潟県    0.435   29.9    25.2  43.7    25.2  8.27   4.39  8      3.76\n# … with 32 more rows, and 2 more variables: Region2 <dbl>, Region6 <dbl>\n\n\n\n\n\ntail(オブジェクト名)\n\n\ntail(my_data)\n\n# A tibble: 6 × 13\n     ID Pref     Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n  <dbl> <chr>     <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1    42 長崎県    0.316   29.6    25.8  41.7    20.7  16.9   5.12  6.27   3.48\n2    43 熊本県    0.387   28.8    27.2  46.5    19.3  15.3   4.53  6.32   2.6 \n3    44 大分県    0.358   30.4    25.6  39.4    18.4  13.3   4.42  6.85  13.0 \n4    45 宮崎県    0.320   29.5    26.3  40.1    14.5  17.1   5.74  7.27   6.81\n5    46 鹿児島県  0.321   29.4    26.0  46.0    16.2  14.5   6.47  6.52   3.62\n6    47 沖縄県    0.315   19.6    33.4  27.8    13.3  15.1   7.66 15.6   12.1 \n# … with 2 more variables: Region2 <dbl>, Region6 <dbl>\n\n\n\n\n\ntail(オブジェクト名, n = 行数)\n\nhead()を使うと最初のx行の出力も可能\n\n\n\ntail(my_data, n = 10)\n\n# A tibble: 10 × 13\n      ID Pref     Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n   <dbl> <chr>     <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n 1    38 愛媛県    0.412   30.6    24.8  43.6    19.3  14.8   6.77  6.97   2.4 \n 2    39 高知県    0.245   32.8    23.6  37.0    17.0  15.8   3.93 17.4    2.91\n 3    40 福岡県    0.618   25.9    28.2  36.5    19.1  17.2   7.03 10.8    3.33\n 4    41 佐賀県    0.329   27.7    28.0  43.5    21.1  15.5   4.85  5.67   4.16\n 5    42 長崎県    0.316   29.6    25.8  41.7    20.7  16.9   5.12  6.27   3.48\n 6    43 熊本県    0.387   28.8    27.2  46.5    19.3  15.3   4.53  6.32   2.6 \n 7    44 大分県    0.358   30.4    25.6  39.4    18.4  13.3   4.42  6.85  13.0 \n 8    45 宮崎県    0.320   29.5    26.3  40.1    14.5  17.1   5.74  7.27   6.81\n 9    46 鹿児島県  0.321   29.4    26.0  46.0    16.2  14.5   6.47  6.52   3.62\n10    47 沖縄県    0.315   19.6    33.4  27.8    13.3  15.1   7.66 15.6   12.1 \n# … with 2 more variables: Region2 <dbl>, Region6 <dbl>\n\n\n\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide02.html#rとは",
    "href": "slide/slide02.html#rとは",
    "title": "ミクロ政治データ分析実習",
    "section": "Rとは",
    "text": "Rとは\n\n\n\n\n\n統計、データ分析、作図のためのインタープリタープログラミング言語\n1976年開発されたS言語の後継者\nRoss IhakaとRobert Clifford Gentlemanが開発\n統計分析のためのソフトウェアは星の数ほど存在"
  },
  {
    "objectID": "slide/slide02.html#統計ソフトウェア言語",
    "href": "slide/slide02.html#統計ソフトウェア言語",
    "title": "ミクロ政治データ分析実習",
    "section": "統計ソフトウェア/言語",
    "text": "統計ソフトウェア/言語\n有償\n\nSAS\nSPSS\nStata\nMATLAB\n\n無償\n\nPSPP: SPSSにとてもよく似た無料ソフトウェア\nJASP/jamovi: 裏で動いているのはR\ngretl: 時系列分析など、計量経済学で利用される手法に特化したソフト\nGNU Octave: MATLABとほぼ同じ文法をもつ無料言語\nHAD: 清水裕士先生が開発しているExcelベースのデータ分析マクロ\n\nただし、Excelが有償ソフト"
  },
  {
    "objectID": "slide/slide02.html#rのライバルたちどれも無料",
    "href": "slide/slide02.html#rのライバルたちどれも無料",
    "title": "ミクロ政治データ分析実習",
    "section": "Rのライバルたち（どれも無料）",
    "text": "Rのライバルたち（どれも無料）\n\n現在のデータサイエンス業界において標準はR + Python\nどれもGUIでなく、CUI\n\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n汎用プログラミング言語\n機械分析に強い\n豊富なパッケージ\nRより速く、Juliaより遅い\n\n\n\n\nJulia\n\n\n\n\n\n\n\n\n\n\n統計プログラミング言語\n非常に高速\nパッケージがRやPythonに比べ、少ない"
  },
  {
    "objectID": "slide/slide02.html#why-r",
    "href": "slide/slide02.html#why-r",
    "title": "ミクロ政治データ分析実習",
    "section": "Why R?",
    "text": "Why R?\nR界隈の神様、Hadley Wickham（羽鳥先生）によると… (Hadley 2019)\n\n無料、オープンソース、多くのプラットフォームで利用可能\nオンライン、オフラインの両方で、多様なRコミュニティが存在\n膨大なパッケージが用意されている。\n分析結果を伝達する強力なツールを提供（R Markdown）\n代表的な統合開発環境であるRStudioはデータサイエンス、対話型のデータ分析、そして統計的プログラミングが必要とするものに最適化されている。\n多くの統計学や機械学習の研究者は自分の研究成果とRパッケージを同時に公開している。\nデータ分析を特化した言語（欠損値、データフレーム、ベクトル化など）\n関数型プログラミングのための最適な環境を提供\nRStudio社は営利企業であるものの、その収益の多くをオープンソースコミュニティーに投資している。\nメタプログラミングが非常に強力\nRはC、C++、Fortranのようなhigh-performance言語と容易に結合できるように設計されている。"
  },
  {
    "objectID": "slide/slide02.html#guiとcui",
    "href": "slide/slide02.html#guiとcui",
    "title": "ミクロ政治データ分析実習",
    "section": "GUIとCUI",
    "text": "GUIとCUI\n\n\nGUI: Graphical User Interface; ソフトウェア上の入出力にグラフィックを利用\n\nマウスでポチポチするだけで操作できる環境\n間違いがほぼ起きない\n柔軟性が低い（決まったオプション、機能しか使えない）\n分析の再現が難しい（出来ないわけではない）\n\nCUI: Character User Interface\n\n全ての操作を文字列ベース（=キーボード）で行う\n一文字でも間違えるとエラーが出たり\n柔軟性が高い（カスタマイズ自由）\n分析の再現性が非常に高い（コードさえ保存しておけばOK）"
  },
  {
    "objectID": "slide/slide02.html#guiとcuiの操作の違い",
    "href": "slide/slide02.html#guiとcuiの操作の違い",
    "title": "ミクロ政治データ分析実習",
    "section": "GUIとCUIの操作の違い",
    "text": "GUIとCUIの操作の違い\nData.csvを読み込み、Xという変数の平均値と分散を計算\nGUI (SPSS)の例\n\n「ファイル」→「開く」→「データ」をクリック\nファイルを選択し、「開く」をクリック\n「分析」→「記述統計」→「記述統計」をクリック\n左側のパネルからXを右側の「変数」パネルへ移動\n「オブション」をクリック\n「散らばり」の「分散」にチェック\n「続行」をクリック→「OK」をクリック\n\nCUI (R)の例\nMyData <- read.csv(\"Data.csv\")\nmean(MyData$X)\nvar(MyData$X)"
  },
  {
    "objectID": "slide/slide02.html#統合開発環境ide",
    "href": "slide/slide02.html#統合開発環境ide",
    "title": "ミクロ政治データ分析実習",
    "section": "統合開発環境（IDE）",
    "text": "統合開発環境（IDE）\n\nR Studioが代表的（ほぼ一択）\n\n他にもR Tools for Visual Studio、Atom、Sublime Text、Vim、Emacsなど\n\nIDEの使用は必須ではないが、生産性に大きく関与する\nデータ分析、プログラミングの手助けをする優秀な秘書\n\nファイルの管理、うろ覚えのコマンドのプロンプト、コードの色分けなどを自動的に行う\nコードの実行結果の画面をコードと同時に表示\nこれまでの作業を記録"
  },
  {
    "objectID": "slide/slide02.html#rとrstudioの導入",
    "href": "slide/slide02.html#rとrstudioの導入",
    "title": "ミクロ政治データ分析実習",
    "section": "RとRStudioの導入",
    "text": "RとRStudioの導入\n\n本講義のサポートページを参照\n対面講義では宋と一緒に初期設定、起動、終了などを行ってもらう。"
  },
  {
    "objectID": "slide/slide02.html#プロジェクト機能について",
    "href": "slide/slide02.html#プロジェクト機能について",
    "title": "ミクロ政治データ分析実習",
    "section": "「プロジェクト」機能について",
    "text": "「プロジェクト」機能について\n\n本講義のサポートページを参照\n毎回の講義、課題ごとに独立したプロジェクトを作ること\nファイル・システムに関する知識（パス、相対パス、絶対パス）がない場合、プロジェクト機能は必須\n\nファイル・システムを知っている宋でも常にプロジェクト機能を使用している。"
  },
  {
    "objectID": "slide/slide02.html#課題",
    "href": "slide/slide02.html#課題",
    "title": "ミクロ政治データ分析実習",
    "section": "課題",
    "text": "課題\nブラインドタッチに自信のない履修者は引き続き、ブラインドタッチの練習\n\n毎日欠かさず練習すれば2週間でできるようになる。\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide12.html#section",
    "href": "slide/slide12.html#section",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "グラフィックの文法と{ggplot2}"
  },
  {
    "objectID": "slide/slide12.html#グラフを作成する方法",
    "href": "slide/slide12.html#グラフを作成する方法",
    "title": "ミクロ政治データ分析実習",
    "section": "グラフを作成する方法",
    "text": "グラフを作成する方法\n代表的な可視化のパッケージ\n\n他にもインタラクティブ・プロットに特化した{plotly}、3次元グラフのための{rgl}、インタラクティブ地図の{leaflet}など多数あり\n\n\n\nBase R\n\n別途のパッケージを使わず、R内蔵関数で作図\n紙にペンでグラフを書くイメージ\n図が気に入らなかったら一からやり直し\n作成した図をオブジェクトとして保存することが出来ない\n最も自由度が高い\n\n\n\n\n{lattice}\n\nDeepayan Sarkarが開発\n{ggplot2}が登場する前には主流\n関数1つで可視化ができる（ただし、関数が長くなる）\n\n\n\n\n{ggplot2}\n\nHadley Wickhamが大学院生の時に開発\nグラフィックの文法 (grammer of graphics)」の思想をR上で具現化\nグラフの様々な要素をそれぞれ1つの層 (layer)と捉え、積み重ねていく"
  },
  {
    "objectID": "slide/slide12.html#base-rの例",
    "href": "slide/slide12.html#base-rの例",
    "title": "ミクロ政治データ分析実習",
    "section": "Base Rの例",
    "text": "Base Rの例\n\nコード結果\n\n\n\nlibrary(tidyverse)\ndf <- read_csv(\"Data/Micro09.csv\") # 第9回の実習用データ\n\nplot(x = df$PPP_per_capita, y = df$HDI_2018, pch = 19, \n     col = ifelse(df$OECD == 1, \"red\", \"blue\"),\n     xlab = \"一人当たり購買力平価GDP (USD)\", ylab = \"人間開発指数\")\nlegend(\"bottomright\", pch = 19,\n       legend = c(\"OECD加盟国\", \"OECD非加盟国\"), \n       col    = c(\"red\", \"blue\"))"
  },
  {
    "objectID": "slide/slide12.html#latticeの例",
    "href": "slide/slide12.html#latticeの例",
    "title": "ミクロ政治データ分析実習",
    "section": "{lattice}の例",
    "text": "{lattice}の例\n\nコード結果\n\n\n\nlibrary(lattice)\nxyplot(HDI_2018 ~ PPP_per_capita, data = df,\n       group = OECD, pch = 19, grid = TRUE,\n       auto.key = TRUE,\n       key = list(title     = \"OECD加盟有無\",\n                  cex.title = 1,\n                  space     = \"right\",\n                  points    = list(col = c(\"magenta\", \"cyan\"),\n                                   pch = 19),\n                  text      = list(c(\"加盟国\", \"非加盟国\"))), \n       xlab = \"一人当たり購買力平価GDP (USD)\", ylab = \"人間開発指数\")"
  },
  {
    "objectID": "slide/slide12.html#ggplot2の例",
    "href": "slide/slide12.html#ggplot2の例",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}の例",
    "text": "{ggplot2}の例\n\nコード結果\n\n\n\ndf %>%\n   mutate(OECD = if_else(OECD == 1, \"加盟国\", \"非加盟国\")) %>%\n   ggplot() +\n   geom_point(aes(x = PPP_per_capita, y = HDI_2018, color = OECD), \n              size = 2) +\n   labs(x = \"一人あたり購買力平価GDP (USD)\", y = \"人間開発指数\",\n        color = \"OECD加盟有無\") +\n   theme_bw(base_size = 16)"
  },
  {
    "objectID": "slide/slide12.html#グラフィックの文法",
    "href": "slide/slide12.html#グラフィックの文法",
    "title": "ミクロ政治データ分析実習",
    "section": "グラフィックの文法",
    "text": "グラフィックの文法\nWilkinsonの「グラフィックの文法」\n\n\n\nWilkinson, Leland. 2005. The Grammar of Graphics. Springer.\nグラフを構造化された方法で記述し、レイヤー (layer; 層)を積み重ねることによってグラフを構築するフレームワーク\nグラフの構成要素の例\n\n横軸と縦軸\n\n目盛りの間隔、ラベルの大きさ\n\n点、線、面\n\n色、太さ、形、透明度など\n\n凡例\n図のタイトル\n\nそれぞれの構成要素を一つのレイヤーとして扱い、レイヤーを積み重ねていく"
  },
  {
    "objectID": "slide/slide12.html#ggplot2とは",
    "href": "slide/slide12.html#ggplot2とは",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}とは",
    "text": "{ggplot2}とは\nHadley Wickhamが大学院生の時に開発した可視化パッケージ\n\n\n\n\n\n\n\n\n\n\ngrammer of graphicsの思想をR上で具現化したパッケージ\n図の構成要素それぞれに対応する関数が存在し、一つのレイヤーとして機能\n\nggplot(): キャンバスを用意\ngeom_point(): 点 / geom_line(): 線 / geom_bar(): 棒\nscale_x_continuous(): 連続変数の横軸\nscale_y_discrete(): 離散変数の縦軸など\n\n関数を覚える必要は全くない\n\n{ggplot2}の仕組みだけを覚え、後はググりながらコーディング"
  },
  {
    "objectID": "slide/slide12.html#ggplot2のイメージ-1",
    "href": "slide/slide12.html#ggplot2のイメージ-1",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}のイメージ (1)",
    "text": "{ggplot2}のイメージ (1)\nデータの読み込み&ハンドリング\n\nlibrary(tidyverse)\ndf <- read_csv(\"Data/Micro09.csv\")\n\ndf <- df %>% # OECD変数をリコーディングし、OECD_Jへ\n   mutate(OECD_J = if_else(OECD == 1, \"加盟国\", \"非加盟国\")) %>%\n   select(Country, PPP_per_capita, HDI_2018, FH_Status, OECD_J, Continent)\n\ndf\n\n# A tibble: 186 × 6\n   Country             PPP_per_capita HDI_2018 FH_Status OECD_J   Continent\n   <chr>                        <dbl>    <dbl> <chr>     <chr>    <chr>    \n 1 Afghanistan                  2125.    0.496 NF        非加盟国 Asia     \n 2 Albania                     13781.    0.791 PF        非加盟国 Europe   \n 3 Algeria                     11324.    0.759 NF        非加盟国 Africa   \n 4 Andorra                        NA     0.857 F         非加盟国 Europe   \n 5 Angola                       6649.    0.574 NF        非加盟国 Africa   \n 6 Antigua and Barbuda         21267.    0.776 F         非加盟国 America  \n 7 Argentina                   22938.    0.83  F         非加盟国 America  \n 8 Armenia                     12974.    0.76  PF        非加盟国 Europe   \n 9 Australia                   50001.    0.938 F         加盟国   Oceania  \n10 Austria                     55824.    0.914 F         加盟国   Europe   \n# … with 176 more rows"
  },
  {
    "objectID": "slide/slide12.html#ggplot2のイメージ-2",
    "href": "slide/slide12.html#ggplot2のイメージ-2",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}のイメージ (2)",
    "text": "{ggplot2}のイメージ (2)\nキャンバスの用意\n\ndf %>% # データdfをggplot()関数に渡し、作図の準備をする\n   ggplot()"
  },
  {
    "objectID": "slide/slide12.html#ggplot2のイメージ-3",
    "href": "slide/slide12.html#ggplot2のイメージ-3",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}のイメージ (3)",
    "text": "{ggplot2}のイメージ (3)\nキャンバス上に点を出力\n\ndf %>%\n   ggplot() +\n   # 点を出力する。点の横軸上の位置はPPP_per_capita、縦軸上の位置はHDI_2018に対応\n   # OECD_Jの値に応じて色分けする。\n   geom_point(aes(x = PPP_per_capita, y = HDI_2018, color = OECD_J))"
  },
  {
    "objectID": "slide/slide12.html#ggplot2のイメージ-4",
    "href": "slide/slide12.html#ggplot2のイメージ-4",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}のイメージ (4)",
    "text": "{ggplot2}のイメージ (4)\nラベルの修正\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = PPP_per_capita, y = HDI_2018, color = OECD_J)) +\n   labs(x = \"一人当たり購買力平価基準GDP (米ドル)\", y = \"人間開発指数 (2018)\",  \n        color = \"OECD\")"
  },
  {
    "objectID": "slide/slide12.html#ggplot2のイメージ-5",
    "href": "slide/slide12.html#ggplot2のイメージ-5",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}のイメージ (5)",
    "text": "{ggplot2}のイメージ (5)\nテーマ変更\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = PPP_per_capita, y = HDI_2018, color = OECD_J)) +\n   labs(x = \"一人当たり購買力平価基準GDP (米ドル)\", y = \"人間開発指数 (2018)\",\n        color = \"OECD\") +\n   theme_bw(base_size = 12) # Black and Whiteテーマを使い、文字サイズは12"
  },
  {
    "objectID": "slide/slide12.html#ggplot2のイメージ-6",
    "href": "slide/slide12.html#ggplot2のイメージ-6",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}のイメージ (6)",
    "text": "{ggplot2}のイメージ (6)\n凡例の位置調整\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = PPP_per_capita, y = HDI_2018, color = OECD_J)) +\n   labs(x = \"一人当たり購買力平価基準GDP (米ドル)\", y = \"人間開発指数 (2018)\",\n        color = \"OECD\") +\n   theme_bw(base_size = 12) +\n   theme(legend.position = \"bottom\") # 凡例を図の下段に"
  },
  {
    "objectID": "slide/slide12.html#ggplot2で図が出来上がるまで",
    "href": "slide/slide12.html#ggplot2で図が出来上がるまで",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}で図が出来上がるまで",
    "text": "{ggplot2}で図が出来上がるまで\nレイヤーを積み重ねるイメージ\n\n図の核心部は幾何オブジェクト（geom_*()）とマッピング（aes()）"
  },
  {
    "objectID": "slide/slide12.html#section-1",
    "href": "slide/slide12.html#section-1",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "グラフの構成要素"
  },
  {
    "objectID": "slide/slide12.html#ggplot2の必須要素",
    "href": "slide/slide12.html#ggplot2の必須要素",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}の必須要素",
    "text": "{ggplot2}の必須要素\n以下の要素があればグラフはとりあえず出来上がる\n\nデータ（Data）\n幾何オブジェクト（Geometry Object）: geom_*()関数\n\n散布図、棒グラフ、折れ線グラフ、…\n\nマッピング（Mapping）: aes()関数\n\n散布図の場合、点の位置（横軸と縦軸）\n棒グラフの場合、棒の位置（横軸）と高さ（縦軸）\n折れ線グラフの場合、線の傾きが変化する点の位置（横軸と縦軸）\n\n座標系（Coordinate System）: coord_*()関数\n\nデカルト座標系（直交座標系）、極座標系など\n座標系の上限の下限など\n座標系は{ggplot2}が自動的に設定してくれるが、カスタマイズ可\n\n\n凡例の位置、フォント、点の大きさ、軸ラベルの修正などは任意"
  },
  {
    "objectID": "slide/slide12.html#ggplot2の必須要素-1",
    "href": "slide/slide12.html#ggplot2の必須要素-1",
    "title": "ミクロ政治データ分析実習",
    "section": "{ggplot2}の必須要素",
    "text": "{ggplot2}の必須要素\n座標系はデータ/幾何オブジェクトに応じて自動的に作成される（カスタマイズ可）"
  },
  {
    "objectID": "slide/slide12.html#書き方",
    "href": "slide/slide12.html#書き方",
    "title": "ミクロ政治データ分析実習",
    "section": "書き方",
    "text": "書き方\n\n注意: レイヤーの積み重ねは%>%でなく+を使用\n\nオブジェクトを渡すのではなく、レイヤーを足すという意味\n\n可視化はggplot()からスタート\n幾何オブジェクトはgeom_で始まる関数\n幾何オブジェクト内にはmapping =でマッピングが必要。\n\n第一引数であるため、mapping =は省略し、aes()からスタートでOK\n\naes()の中にはグラフ上に出力される点、線、面などがデータのどの変数に対応するかを記述\n\n\nggplot(data = データ) +\n   幾何オブジェクト関数(mapping = aes(マッピング))"
  },
  {
    "objectID": "slide/slide12.html#データ",
    "href": "slide/slide12.html#データ",
    "title": "ミクロ政治データ分析実習",
    "section": "データ",
    "text": "データ\n\n使用するデータ構造はdata.frame、またはtibble\n\n\n\nデータの指定 (1)\n\ndata引数にdata.frame (tibble)オブジェクト名を指定\n\n\nggplot(data = データ名)\n\n\n\n\nデータの指定 (2)\n\ndata引数は第一引数であるため、省略されることも多い\n\n\nggplot(データ名)\n\n\n\n\nデータの指定 (3)\n\ndata引数は第一引数であるため、パイプ演算子 (%>%)で渡すことも可能\nデータ名とggplot()の間に{dplyr}、{tidyr}などの各種関数も使用可能\nこの方法を推奨\n\n\nデータ名 %>%\n   ggplot()"
  },
  {
    "objectID": "slide/slide12.html#幾何オブジェクト",
    "href": "slide/slide12.html#幾何オブジェクト",
    "title": "ミクロ政治データ分析実習",
    "section": "幾何オブジェクト",
    "text": "幾何オブジェクト\n\nデータ名 %>%\n   ggplot() +\n   幾何オブジェクト関数()\n\n指定されたデータを使ってどのような図を作成するか\n\n散布図: geom_point()\n棒グラフ: geom_bar()\n折れ線グラフ: geom_line()\nヒストグラム: geom_histogram()\n箱ひげ図: geom_boxplot()\nその他\n\n{ggplot2}が提供する幾何オブジェクトも数十種類があり、ユーザーが開発・公開した幾何オブジェクトなどもある\n\n非巡回有向グラフ作成のための{ggdag}、ネットワークの可視化のための{ggnetwork}など"
  },
  {
    "objectID": "slide/slide12.html#マッピング",
    "href": "slide/slide12.html#マッピング",
    "title": "ミクロ政治データ分析実習",
    "section": "マッピング",
    "text": "マッピング\nグラフ上の点、線、面などの情報をデータと変数に対応させる\n\nプロット上に出力されるデータの具体的な在り方を指定する\n散布図の例) 各点の横軸と縦軸における位置情報\ngeom_*()内のaes()関数で指定\n\nグラフに複数の幾何オブジェクトが存在し、マッピング情報が同じならggplot()内で指定することも可能\n\n\n例) geom_point(aes(x = PPP_per_capita, y = HDI_2018, color = OECD_J))\n\n\n\n幾何オブジェクト\nマッピング情報\n引数\n対応する変数\n\n\n\n\ngeom_point()\n点の横軸上の位置\nx\nPPP_per_capita\n\n\ngeom_point()\n点の縦軸上の位置\ny\nHDI_2018\n\n\ngeom_point()\n点の色\ncolor\nOECD_J\n\n\n\n\n点、線、面が持てる情報は他にも色々\n\n大きさ (size)、線の種類 (linetype)、透明度 (alpha)、面の色 (fill)、点の形 (shape)、グループ (group)など"
  },
  {
    "objectID": "slide/slide12.html#マッピング時の注意",
    "href": "slide/slide12.html#マッピング時の注意",
    "title": "ミクロ政治データ分析実習",
    "section": "マッピング時の注意",
    "text": "マッピング時の注意\naes()の中で指定するか、外で指定するかで挙動が変わる。\n\naes()の中でcolorを指定する場合、それぞれの点が指定された変数の値に応じて色分けされる、\naes()の外でcolorを指定する場合、全ての点に適用される。\n\n\naes()の中 (コード)aes()の中 (結果)aes()の外 (コード)aes()の外 (結果)\n\n\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = PPP_per_capita, y = HDI_2018, color = OECD_J)) +\n   labs(x = \"一人当たり購買力平価基準GDP (米ドル)\", y = \"人間開発指数 (2018)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = PPP_per_capita, y = HDI_2018), color = \"red\") +\n   labs(x = \"一人当たり購買力平価基準GDP (米ドル)\", y = \"人間開発指数 (2018)\")"
  },
  {
    "objectID": "slide/slide12.html#座標系",
    "href": "slide/slide12.html#座標系",
    "title": "ミクロ政治データ分析実習",
    "section": "座標系",
    "text": "座標系\n\n直交座標系の拡大・縮小: coord_cartesian()\n\n最もよく使う座標系（デフォルト）\n\n横軸と縦軸の交換: coord_flip()\n横軸と縦軸比の固定: coord_fixed()\n極座標系 (polar coordinates system)へ変換: coord_polar()\n\n円グラフを作成する際に使われるが、円グラフは邪悪なる存在のケースが多いため、省略"
  },
  {
    "objectID": "slide/slide12.html#直交座標系拡大の例",
    "href": "slide/slide12.html#直交座標系拡大の例",
    "title": "ミクロ政治データ分析実習",
    "section": "直交座標系拡大の例",
    "text": "直交座標系拡大の例\n横軸を30000〜90000、縦軸を0.7〜1にする\n\nコード結果\n\n\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = PPP_per_capita, y = HDI_2018, color = OECD_J), \n              size = 2) +\n   labs(x = \"一人当たり購買力平価基準GDP\", y = \"人間開発指数\", color = \"OECD\") +\n   coord_cartesian(xlim = c(30000, 90000), ylim = c(0.7, 1)) +\n   theme_bw()"
  },
  {
    "objectID": "slide/slide12.html#スケール-scale",
    "href": "slide/slide12.html#スケール-scale",
    "title": "ミクロ政治データ分析実習",
    "section": "スケール (Scale)",
    "text": "スケール (Scale)\nマッピング要素のカスタマイズ\n\n横/縦軸の目盛り変更、色分けの色を指定など\nscale_*_*()関数を使用\n\nscale_マッピング要素_対応する変数のタイプ()\n\n詳細は次週以降"
  },
  {
    "objectID": "slide/slide12.html#ファセット-facet",
    "href": "slide/slide12.html#ファセット-facet",
    "title": "ミクロ政治データ分析実習",
    "section": "ファセット (Facet)",
    "text": "ファセット (Facet)\nグラフを2つ以上の面で分割\n\n例) FH_Stautsの棒グラフを大陸ごとに出力\n\n\n# データの用意\n# 参考) 「\\n」は図内の改行を意味する。\ndf <- df %>%\n   mutate(FH_Status = case_when(FH_Status == \"F\"  ~ \"自由\",\n                                FH_Status == \"PF\" ~ \"部分的に\\n自由\",\n                                TRUE              ~ \"不自由\"),\n          FH_Status = factor(FH_Status,\n                             levels = c(\"自由\", \"部分的に\\n自由\", \"不自由\"))) %>%\n   drop_na(FH_Status)\n\ndf\n\n# A tibble: 186 × 6\n   Country             PPP_per_capita HDI_2018 FH_Status        OECD_J Continent\n   <chr>                        <dbl>    <dbl> <fct>            <chr>  <chr>    \n 1 Afghanistan                  2125.    0.496 \"不自由\"         非加…  Asia     \n 2 Albania                     13781.    0.791 \"部分的に\\n自由\" 非加…  Europe   \n 3 Algeria                     11324.    0.759 \"不自由\"         非加…  Africa   \n 4 Andorra                        NA     0.857 \"自由\"           非加…  Europe   \n 5 Angola                       6649.    0.574 \"不自由\"         非加…  Africa   \n 6 Antigua and Barbuda         21267.    0.776 \"自由\"           非加…  America  \n 7 Argentina                   22938.    0.83  \"自由\"           非加…  America  \n 8 Armenia                     12974.    0.76  \"部分的に\\n自由\" 非加…  Europe   \n 9 Australia                   50001.    0.938 \"自由\"           加盟国 Oceania  \n10 Austria                     55824.    0.914 \"自由\"           加盟国 Europe   \n# … with 176 more rows"
  },
  {
    "objectID": "slide/slide12.html#ファセット分割なし",
    "href": "slide/slide12.html#ファセット分割なし",
    "title": "ミクロ政治データ分析実習",
    "section": "ファセット分割なし",
    "text": "ファセット分割なし\n同じ大陸内のFH_Stautsの分布を確認するには不向き\n\ndf %>%\n   ggplot() +\n   geom_bar(aes(x = FH_Status, fill = Continent),\n            position = position_dodge2(1/2)) +\n   labs(x = \"フリーダムハウス評価\", y = \"国家数\", fill = \"大陸\") +\n   theme_bw()"
  },
  {
    "objectID": "slide/slide12.html#ファセット分割あり",
    "href": "slide/slide12.html#ファセット分割あり",
    "title": "ミクロ政治データ分析実習",
    "section": "ファセット分割あり",
    "text": "ファセット分割あり\n\ndf %>%\n   ggplot() +\n   geom_bar(aes(x = FH_Status)) +\n   labs(x = \"フリーダムハウス評価\", y = \"国家数\") +\n   facet_wrap(~ Continent, ncol = 5) +\n   theme_bw()"
  },
  {
    "objectID": "slide/slide12.html#section-2",
    "href": "slide/slide12.html#section-2",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "良いグラフとは"
  },
  {
    "objectID": "slide/slide12.html#意識すべきところ",
    "href": "slide/slide12.html#意識すべきところ",
    "title": "ミクロ政治データ分析実習",
    "section": "意識すべきところ",
    "text": "意識すべきところ\n\nデータ・インク比\nカラーユニバーサルデザイン\n円グラフは邪悪なる存在\n3次元グラフは更に邪悪なる存在\n3次元円グラフは概念レベルで駆逐すべき存在\n\n\n参考図書 (日本語)\n1と4は{ggplot2}の教科書としても優れている\n\nHadley Wickham・Garrett Grolemund(著), 黒川利明(訳). 2017. 『Rではじめるデータサイエンス』オライリージャパン.\n藤俊久仁・渡部良一. 2019. 『データビジュアライゼーションの教科書』秀和システム.\n永田ゆかり. 2020. 『データ視覚化のデザイン』SBクリエイティブ.\n【おすすめ】 キーラン・ヒーリー(著), 瓜生真也・江口哲史・三村喬生(訳). 2021.『データ分析のためのデータ可視化入門』講談社."
  },
  {
    "objectID": "slide/slide12.html#データインク比-data-ink-ratio",
    "href": "slide/slide12.html#データインク比-data-ink-ratio",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・インク比 (Data-ink ratio)",
    "text": "データ・インク比 (Data-ink ratio)\nEdward R. Tufte. 2001. The Visual Display of Quantitative Information (2nd Ed). Graphics Press.\n\\[\n\\textrm{データ・インク比} = \\frac{\\textsf{データの情報を含むインクの量}}{\\textsf{グラフの出力に使用されたインクの総量}}\n\\]\n\n良いグラフとはデータ・インク比を最大化したグラフ\nグラフにおいて情報損失なしに除去できる要素が占める割合を1から引いたもの\n色分けにも注意"
  },
  {
    "objectID": "slide/slide12.html#色分けに注意-1",
    "href": "slide/slide12.html#色分けに注意-1",
    "title": "ミクロ政治データ分析実習",
    "section": "色分けに注意 (1)",
    "text": "色分けに注意 (1)\n\nインドの新規感染者数が多いことを伝えたい\nどの線がインド?"
  },
  {
    "objectID": "slide/slide12.html#色分けに注意-2",
    "href": "slide/slide12.html#色分けに注意-2",
    "title": "ミクロ政治データ分析実習",
    "section": "色分けに注意 (2)",
    "text": "色分けに注意 (2)\n\n情報の損失はあるものの、主張が伝えやすい"
  },
  {
    "objectID": "slide/slide12.html#やり過ぎにも注意",
    "href": "slide/slide12.html#やり過ぎにも注意",
    "title": "ミクロ政治データ分析実習",
    "section": "やり過ぎにも注意",
    "text": "やり過ぎにも注意\n\nどの図も同じ情報量を持ち、データ・インク比は右の方が優れているが…"
  },
  {
    "objectID": "slide/slide12.html#カラーユニバーサルデザイン",
    "href": "slide/slide12.html#カラーユニバーサルデザイン",
    "title": "ミクロ政治データ分析実習",
    "section": "カラーユニバーサルデザイン",
    "text": "カラーユニバーサルデザイン\n色分けを行う際には注意が必要\n\nP型およびD型色弱の場合、緑と赤の認識が困難\n\n日本の場合、男性の5%、女性の0.2%\nフランス・北欧の場合、男性の約10%\n\n色覚シミュレーターで確認可能\n\nmacOS用のSim Daltonismを使用した第二色盲 (deuteranopia)の例（Linux/WindowsならColor Oracleなど）\n\n自分が好きな色でなく、誰にも見やすい色を使う"
  },
  {
    "objectID": "slide/slide12.html#次元グラフについて-1",
    "href": "slide/slide12.html#次元グラフについて-1",
    "title": "ミクロ政治データ分析実習",
    "section": "3次元グラフについて (1)",
    "text": "3次元グラフについて (1)"
  },
  {
    "objectID": "slide/slide12.html#次元グラフについて-2",
    "href": "slide/slide12.html#次元グラフについて-2",
    "title": "ミクロ政治データ分析実習",
    "section": "3次元グラフについて (2)",
    "text": "3次元グラフについて (2)"
  },
  {
    "objectID": "slide/slide12.html#次元グラフについて-3",
    "href": "slide/slide12.html#次元グラフについて-3",
    "title": "ミクロ政治データ分析実習",
    "section": "3次元グラフについて (3)",
    "text": "3次元グラフについて (3)\n\n2次元グラフにすると…\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide06.html#授業を始める前に",
    "href": "slide/slide06.html#授業を始める前に",
    "title": "ミクロ政治データ分析実習",
    "section": "授業を始める前に",
    "text": "授業を始める前に\n\n分析単位、仮説のような概念が登場するが、これらについては後期の「マクロ政治データ分析実習」の前半（リサーチデザイン）で解説する。\n本日の内容は前期の内容とあまり関係のない内容だが、後期の授業は自分でデータセットを構築/入手して、独自の問いに対する分析行う（= 期末レポート）必要があるため、非常に重要。"
  },
  {
    "objectID": "slide/slide06.html#データの形",
    "href": "slide/slide06.html#データの形",
    "title": "ミクロ政治データ分析実習",
    "section": "データの形",
    "text": "データの形\nデータの構造は基本的に「四角形」\n\n\n\n\n\n\n  \n  \n    \n      ID\n      都道府県\n      自民得票率\n      財政力指数\n      高齢者比\n      第一次産業従事者比率\n    \n  \n  \n    1\n北海道\n32.82\n0.43523\n29.19036\n6.9950367\n    2\n青森県\n40.44\n0.34082\n30.21411\n12.0293305\n    3\n岩手県\n34.90\n0.35156\n30.48886\n10.6440222\n    4\n宮城県\n36.68\n0.61443\n25.85974\n4.3617982\n    5\n秋田県\n43.46\n0.30876\n33.94153\n9.6208687\n    6\n山形県\n42.49\n0.35108\n30.90099\n9.1944841\n    7\n福島県\n33.82\n0.53346\n28.77917\n6.4827959\n    8\n茨城県\n40.64\n0.63726\n27.10318\n5.6398160\n    9\n栃木県\n38.78\n0.63993\n26.34192\n5.5164637\n    10\n群馬県\n42.06\n0.62459\n28.08067\n4.9627352\n    11\n埼玉県\n32.30\n0.76593\n25.17737\n1.5923560\n    12\n千葉県\n37.79\n0.77827\n26.16599\n2.7855056\n    13\n東京都\n34.37\n1.10133\n23.17111\n0.3872702\n    14\n神奈川県\n34.92\n0.90832\n24.20895\n0.8338070\n    15\n新潟県\n43.66\n0.45107\n29.99366\n5.7604046\n    16\n富山県\n44.16\n0.46651\n30.82200\n3.2660962\n    17\n石川県\n48.09\n0.48499\n28.06994\n3.0190636\n    18\n福井県\n45.29\n0.39353\n28.89013\n3.7142163\n    19\n山梨県\n37.36\n0.39625\n28.73440\n7.1834624\n    20\n長野県\n35.27\n0.49610\n30.39107\n9.0571664\n    21\n岐阜県\n39.71\n0.53444\n28.52990\n3.0858851\n    22\n静岡県\n37.47\n0.71954\n28.19953\n3.8015628\n    23\n愛知県\n34.32\n0.92079\n24.21588\n2.0715470\n    24\n三重県\n33.67\n0.58545\n28.32133\n3.5781354\n    25\n滋賀県\n37.85\n0.54974\n24.42326\n2.6453739\n    26\n京都府\n31.18\n0.58423\n27.78059\n2.0519098\n    27\n大阪府\n22.12\n0.76505\n26.47324\n0.5047311\n    28\n兵庫県\n31.71\n0.63363\n27.29242\n1.9681756\n    29\n奈良県\n33.51\n0.42074\n28.80949\n2.6246661\n    30\n和歌山県\n39.61\n0.32692\n30.97829\n8.7569556\n    31\n鳥取県\n41.62\n0.26553\n29.86492\n8.7820593\n    32\n島根県\n48.24\n0.25199\n32.70654\n7.7575701\n    33\n岡山県\n37.87\n0.51755\n28.89047\n4.5740178\n    34\n広島県\n39.93\n0.60157\n27.77751\n3.0909015\n    35\n山口県\n46.75\n0.44031\n32.20171\n4.8076461\n    36\n徳島県\n38.44\n0.32946\n31.14240\n8.1905828\n    37\n香川県\n44.07\n0.47572\n30.15175\n5.2630765\n    38\n愛媛県\n43.57\n0.42524\n30.81198\n7.3426155\n    39\n高知県\n37.01\n0.25820\n32.99393\n11.4168481\n    40\n福岡県\n36.52\n0.63402\n26.09215\n2.7790311\n    41\n佐賀県\n43.53\n0.34093\n27.79119\n8.4424369\n    42\n長崎県\n41.70\n0.32607\n29.75835\n7.4224487\n    43\n熊本県\n46.54\n0.39854\n28.91214\n9.5894910\n    44\n大分県\n39.44\n0.37071\n30.69506\n6.6783603\n    45\n宮崎県\n40.11\n0.33278\n29.59453\n10.7896612\n    46\n鹿児島県\n45.97\n0.33303\n29.56849\n9.3186355\n    47\n沖縄県\n27.82\n0.33241\n19.76016\n4.5100859"
  },
  {
    "objectID": "slide/slide06.html#行と列",
    "href": "slide/slide06.html#行と列",
    "title": "ミクロ政治データ分析実習",
    "section": "行と列",
    "text": "行と列\n\n行: ケース\n\n人、クラス、都道府県、国、年など\n分析単位に注意すること\n\n列: 変数\n\n性別、年齢、人口、成績など\n\n一行目は変数名。ヘッダー (header) とも呼ぶ。"
  },
  {
    "objectID": "slide/slide06.html#分析単位",
    "href": "slide/slide06.html#分析単位",
    "title": "ミクロ政治データ分析実習",
    "section": "分析単位",
    "text": "分析単位\n各行（ケース）は分析単位を表すこと\n\n仮説: 高齢者ほど政党Xに投票する\n分析単位は「人」\n\n\n\n\n\n \n  \n    ID \n    年齢 \n    政党Xへの投票有無 \n  \n \n\n  \n    1 \n    41 \n    1 \n  \n  \n    2 \n    28 \n    0 \n  \n  \n    3 \n    47 \n    1 \n  \n  \n    4 \n    34 \n    0 \n  \n  \n    5 \n    46 \n    0 \n  \n  \n    6 \n    49 \n    1 \n  \n  \n    7 \n    26 \n    1 \n  \n  \n    8 \n    53 \n    0 \n  \n  \n    9 \n    50 \n    0 \n  \n  \n    10 \n    60 \n    0"
  },
  {
    "objectID": "slide/slide06.html#分析単位-1",
    "href": "slide/slide06.html#分析単位-1",
    "title": "ミクロ政治データ分析実習",
    "section": "分析単位",
    "text": "分析単位\n各行（ケース）は分析単位を表すこと\n\n仮説: 高齢者が多い都道府県ほど政党Xの得票率が高い\n分析単位は「都道府県」\n\n\n\n\n\n\n\n  \n  \n    \n      ID\n      都道府県\n      政党Xの得票率\n      高齢者比\n    \n  \n  \n    1\n北海道\n32.82\n29.19036\n    2\n青森県\n40.44\n30.21411\n    3\n岩手県\n34.90\n30.48886\n    4\n宮城県\n36.68\n25.85974\n    5\n秋田県\n43.46\n33.94153\n    6\n山形県\n42.49\n30.90099\n    7\n福島県\n33.82\n28.77917\n    8\n茨城県\n40.64\n27.10318\n    9\n栃木県\n38.78\n26.34192\n    10\n群馬県\n42.06\n28.08067"
  },
  {
    "objectID": "slide/slide06.html#変数の尺度",
    "href": "slide/slide06.html#変数の尺度",
    "title": "ミクロ政治データ分析実習",
    "section": "変数の尺度",
    "text": "変数の尺度\n多くの場合、間隔尺度と比率尺度の区別は行わない\n\n離散変数 (Discrete variable)\n\n名目尺度 (Nomial scale)\n順序尺度 (Ordinal scale)\n\n連続変数 (Continuous variable)\n\n間隔尺度 (Interval scale)\n比率尺度 (Ratio scale)"
  },
  {
    "objectID": "slide/slide06.html#名目尺度",
    "href": "slide/slide06.html#名目尺度",
    "title": "ミクロ政治データ分析実習",
    "section": "名目尺度",
    "text": "名目尺度\n「範疇尺度」、「名義尺度」とも\n\n例) 男性は0、女性は1\n例) 北海道 = 1、青森 = 2、…、鹿児島 = 46、沖縄 = 47\n\n数字は各項目を.kenten[識別]するものであり、数字として意味を持たない\n\n沖縄 - 北海道 = 鹿児島?\n男性 = 1、女性 = 0でも問題ない\n\n\nできること\n\n度数 (Frequency): 女性は何人? 大阪出身は何人?\n最頻値 (Mode): 最も多い出身地はどこ?"
  },
  {
    "objectID": "slide/slide06.html#順序尺度",
    "href": "slide/slide06.html#順序尺度",
    "title": "ミクロ政治データ分析実習",
    "section": "順序尺度",
    "text": "順序尺度\n「大小」に関する情報のみを持つ\n\n例) 1位、2位、3位、···\n例)とても幸せ、どちらかといえば幸せ、···、とても不幸\n1位と2位の差 \\(\\neq\\) 2位と3位の差\n幸せの基準は人それぞれ\n\n\nできること\n\n名目尺度でできること\n順位 (Order, Rank): 1 位 > 2 位 > 3 位\n中央値 (Median): 真ん中は何か"
  },
  {
    "objectID": "slide/slide06.html#間隔尺度",
    "href": "slide/slide06.html#間隔尺度",
    "title": "ミクロ政治データ分析実習",
    "section": "間隔尺度",
    "text": "間隔尺度\nわりと少ない尺度\n\n例として「気温」\n「0」の意味はない\n\n0 \\(^\\circ\\)C は「温度がない」ではない\n0 \\(^\\circ\\)C = 32 \\(^\\circ\\)F\n\n掛け算ができない\n\n2 \\(^\\circ\\)Cは1 \\(^\\circ\\)Cより2倍暑い?\n\n\n\nできること\n\n順序尺度でできること\n足し算と引き算\n平均値 (Average): 平均気温\n差の比較: 30度 − 20度 = 10度 − 0度"
  },
  {
    "objectID": "slide/slide06.html#比率尺度",
    "href": "slide/slide06.html#比率尺度",
    "title": "ミクロ政治データ分析実習",
    "section": "比率尺度",
    "text": "比率尺度\n最も一般的な変数\n\n「0」の意味あり\n\n0円=お金がない\n0 Km/s. = 動かない\n\n\n\nできること\n\n間隔尺度でできること\n掛け算と割り算: 1 万円 × 2 = 2 万円"
  },
  {
    "objectID": "slide/slide06.html#尺度の比較",
    "href": "slide/slide06.html#尺度の比較",
    "title": "ミクロ政治データ分析実習",
    "section": "尺度の比較",
    "text": "尺度の比較\n尺度によって使える統計量・手法が異なる\n\n\n\n\n\n名目\n順序\n間隔\n連続\n\n\n\n\n順位（大小関係）\n\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\n\n度数（頻度）\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\n\n最頻値\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\n\n中央値\n\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\n\n平均値\n\n\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\n\n差の比較\n\n\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\n\n足し算と引き算\n\n\n\\(\\bigcirc\\)\n\\(\\bigcirc\\)\n\n\n掛け算と割り算\n\n\n\n\\(\\bigcirc\\)\n\n\n0の有無\n\n\n\n\\(\\bigcirc\\)"
  },
  {
    "objectID": "slide/slide06.html#変数と尺度",
    "href": "slide/slide06.html#変数と尺度",
    "title": "ミクロ政治データ分析実習",
    "section": "変数と尺度",
    "text": "変数と尺度\n\\(\\bigcirc\\bigcirc\\) 尺度で測定された変数 \\(\\rightarrow\\) \\(\\bigcirc\\bigcirc\\) 変数\n\n同じ対象でも用いる尺度は複数あり得る。\n例) 年収\n\n順序: ∼200万円、201万円∼400万円、401万円∼\n比率: 178万円, 308万円, 968万円, 1兆300円, ···\n\n例) 年齢\n\n順序: 20代未満, 20代, 30代, 40代, 50代, 60代以上\n比率: 88歳, 37歳, 11歳, 130歳, ···"
  },
  {
    "objectID": "slide/slide06.html#尺度の変換",
    "href": "slide/slide06.html#尺度の変換",
    "title": "ミクロ政治データ分析実習",
    "section": "尺度の変換",
    "text": "尺度の変換\n情報量の多さは\n\n比率 > 間隔 > 順序 > 名目\n情報量の多い尺度は下位の尺度へ変換が可能\n\n例) 358万円 (比率) \\(\\rightarrow\\) 「300万円以上、400万円未満」 (順序)\n\nその逆は不可能\n例) 「300万円以上、400万円未満」 \\(\\rightarrow\\) 301万? 358万? 399万?"
  },
  {
    "objectID": "slide/slide06.html#データセット構築の手順",
    "href": "slide/slide06.html#データセット構築の手順",
    "title": "ミクロ政治データ分析実習",
    "section": "データセット構築の手順",
    "text": "データセット構築の手順\n\n仮説を立てる\n\nデータから仮説を立てる方法もあるが、現時点では非推奨\n\n分析単位を明らかにする\n\n個人? 自治体? 国?\n\n必要な変数を特定する\n\n入手可能な変数か\n個人の投票先? 各政党の都道府県別得票率?\n\n公開済みのデータが存在するか\n\nあればダウンロード\nない場合は世論調査の実施 or データセットの構築"
  },
  {
    "objectID": "slide/slide06.html#データセット構築の2つの方法",
    "href": "slide/slide06.html#データセット構築の2つの方法",
    "title": "ミクロ政治データ分析実習",
    "section": "データセット構築の2つの方法",
    "text": "データセット構築の2つの方法\n\n分析単位が国、自治体、選挙区などの場合（集計データ）\n\n既に構築されているデータをダウンロード\n\n非常に稀なケース; 自分の問いに答えるためのピッタリのデータはなかなか存在しない。\n\n自力で構築（政府統計などを結合）\n\n分析単位は個人の場合（個票データ）\n\nデータ・アーカイブから公開されている世論調査データを入手する。\n自分で世論調査を実施する。\n\n非常に高い（金銭的）コストを伴う。"
  },
  {
    "objectID": "slide/slide06.html#集計データ-自力で構築する",
    "href": "slide/slide06.html#集計データ-自力で構築する",
    "title": "ミクロ政治データ分析実習",
    "section": "集計データ: 自力で構築する",
    "text": "集計データ: 自力で構築する\n公開されているデータの計算・結合\n\nほとんどの場合、集計データ（市区町村、都道府県、国、年など）\n多くの場合、無料で入手することが可能\n\n例) 財政力指数と政党得票率\n例) 民主化指標と武力紛争の頻度\n例) 一人当たりたこ焼き消費量と投票率\n\n\n\n\n信頼できる機関のデータを利用すること\n\n政府機関、企業、研究所など「データのミスについて責任の所在が明確な機関」"
  },
  {
    "objectID": "slide/slide06.html#個票データ-公開データの利用",
    "href": "slide/slide06.html#個票データ-公開データの利用",
    "title": "ミクロ政治データ分析実習",
    "section": "個票データ: 公開データの利用",
    "text": "個票データ: 公開データの利用\n\nSSJDA, ICPSR などのデータアーカイブを利用\n一部の大規模調査は専用ホームページで入手\n\nWorld Value Survey\nComparative Study of Electoral Systems\nAmerican National Election Studies\nJapaneses General Social Surveys\n東京大学谷口研究室・朝日新聞社共同調査など\n\n学術論文で使われたデータなら著者がデータを公開する場合も (Harvard Dataverse、著者のHPなど)\nデータの入手先は多岐にわたるため、見つからない場合、指導教員、授業担当教員と相談すること\n\n学部生の場合、指導教員の許可がないとダウンロードできないデータも\nとりわけ、日本のデータは条件が厳しい\n\n参考) 佐藤博樹・池田謙一・石田浩. 2000. 『社会調査の公開データ―2次分析への招待』東京大学出版会."
  },
  {
    "objectID": "slide/slide06.html#個票データ-自力で構築する",
    "href": "slide/slide06.html#個票データ-自力で構築する",
    "title": "ミクロ政治データ分析実習",
    "section": "個票データ: 自力で構築する",
    "text": "個票データ: 自力で構築する\n分析単位が「人」であり、公開されているデータがない場合\n\n世論調査を実施\n一般的に高額（数万〜数百万円）\n世論調査を行う前に社会調査法の知識は必須\n\n調査倫理\n調査設計の方法\nサンプリング\n\nSNSでアンケートを拡散して収集したデータは「日本人の意識」、「若者の行動」と解釈できない。"
  },
  {
    "objectID": "slide/slide06.html#実習内容",
    "href": "slide/slide06.html#実習内容",
    "title": "ミクロ政治データ分析実習",
    "section": "実習内容",
    "text": "実習内容\n\n既に公開されている世論調査データの入手\n\nデータ・アーカイブの利用: SSJDAの例 (https://csrda.iss.u-tokyo.ac.jp/)\n調査の独自HPから入手: 世界価値観調査の例 (https://www.worldvaluessurvey.org/)\n\n\n\n\n政府統計などを入手時、独自のデータセットを構築\n\n2016参院選の自民党・立憲民主党の得票率\n財政力指数\n都道府県別高齢者比率\n都道府県別一次産業従事者比率"
  },
  {
    "objectID": "slide/slide06.html#データアーカイブの利用-ssjdaの例",
    "href": "slide/slide06.html#データアーカイブの利用-ssjdaの例",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・アーカイブの利用: SSJDAの例",
    "text": "データ・アーカイブの利用: SSJDAの例\n仮説: 高校時代に主権者教育を受けた若年層ほど2016年参院選で投票する傾向がある。\n\n分析単位: 個人 (若年層)　\\(\\rightarrow\\)　世論調査データが必要\n必要な変数\n\n高校時代に主権者教育を受けたか否か\n2016年参院選で投票したかどうか\n\n\n手順\n\nSSJDAへアクセス (https://csrda.iss.u-tokyo.ac.jp/)\nキーワードで検索（例: 「若年 選挙」）\n\n明るい選挙推進協会の「新有権者等若年層の参院選投票後の意識調査，2016」など\n\n調査票を確認し、必要な変数が含まれているかを確認\n\nQ9とQ17など\n\n教員（ゼミ教員や授業担当者）と相談する\n\n学部生は教員経由でしか入手できない　\\(\\rightarrow\\)　教員による代理申請\n大学院生は指導教員の事前承認の下で入手可能"
  },
  {
    "objectID": "slide/slide06.html#調査ホームページの利用-wvsの例",
    "href": "slide/slide06.html#調査ホームページの利用-wvsの例",
    "title": "ミクロ政治データ分析実習",
    "section": "調査ホームページの利用: WVSの例",
    "text": "調査ホームページの利用: WVSの例\n仮説: 日本において高学歴、かつ平等より自由を重視するの人ほど民主主義を重視する\n\n分析単位: 個人　\\(\\rightarrow\\)　世論調査データが必要\n必要な変数\n\n学歴、平等と自由のどちらを重視するか\n民主主義の重視程度\n\n\n手順\n\nWVSのHPへアクセス (https://www.worldvaluessurvey.org/)\nData and Documentation　\\(\\rightarrow\\)　Data Download　\\(\\rightarrow\\)　Wave 7 (2017-2020)\nJapan 2019を選択\nQuestionnaire（質問票; 日本語）とCodebook（コードブック; 英語）を確認\n\n質問票: F10a (Q275)、問37 (Q149)、問70 (Q250)\nカッコ内はコードブック上の番号（データの変数名はコードブック基準）\n質問票とコードブックの設問番号は一致しないため注意が必要\n\nExcel形式のデータをダウンロード (WVS Wave 7 Japan Excel v2.0)"
  },
  {
    "objectID": "slide/slide06.html#データ構築の例",
    "href": "slide/slide06.html#データ構築の例",
    "title": "ミクロ政治データ分析実習",
    "section": "データ構築の例",
    "text": "データ構築の例\n仮説: 2021年10月の衆院選において財政力指数が低く、高齢者の比率が高い都道府県ほど、投票率が高い\n\n分析単位：都道府県\n必要な変数\n\n都道府県ごとの財政力指数（googleで「財政力指数」）\n都道府県ごとの65歳以上人口比（e-statで「国勢調査」）\n\n\n都道府県ごとの人口、(2) 65歳以上人口が必要\n\n\n都道府県ごとの2021年衆院選における投票率（googleで「総務省 選挙結果」）\n\n\n手順\n\n各データの公表先からデータをダウンロード\n必要な変数のみを抜粋\n表計算ソフト (Excel, Numbers, LibreOffice Calc)などを利用し、一つのデータとして統合"
  },
  {
    "objectID": "slide/slide06.html#完成したデータ",
    "href": "slide/slide06.html#完成したデータ",
    "title": "ミクロ政治データ分析実習",
    "section": "完成したデータ",
    "text": "完成したデータ\n\nDataAnalysis1Analysis2Analysis3\n\n\n\ndf <- read_csv(\"Data/BuildingData.csv\")\ndf %>% \n  gt()\n\n\n\n\n\n  \n  \n    \n      ID\n      Pref\n      Finance\n      Over65\n      Turnout\n    \n  \n  \n    1\n北海道\n0.46217\n32.26170\n58.79\n    2\n青森県\n0.35801\n33.69179\n52.93\n    3\n岩手県\n0.37248\n33.81424\n60.38\n    4\n宮城県\n0.62649\n28.43901\n55.87\n    5\n秋田県\n0.32157\n37.60177\n58.24\n    6\n山形県\n0.37896\n33.98365\n64.34\n    7\n福島県\n0.54482\n31.82748\n58.01\n    8\n茨城県\n0.65584\n30.30695\n52.54\n    9\n栃木県\n0.64821\n29.56807\n53.06\n    10\n群馬県\n0.63796\n30.88517\n53.89\n    11\n埼玉県\n0.77024\n27.33047\n53.97\n    12\n千葉県\n0.77845\n28.02414\n53.64\n    13\n東京都\n1.15019\n23.29183\n57.21\n    14\n神奈川県\n0.88898\n25.86952\n56.29\n    15\n新潟県\n0.47506\n32.97734\n63.16\n    16\n富山県\n0.48457\n32.92857\n55.68\n    17\n石川県\n0.51759\n30.17642\n57.13\n    18\n福井県\n0.42058\n31.06232\n57.77\n    19\n山梨県\n0.40857\n31.14433\n60.57\n    20\n長野県\n0.52762\n32.28879\n59.77\n    21\n岐阜県\n0.55930\n31.11373\n58.10\n    22\n静岡県\n0.72648\n30.66518\n54.81\n    23\n愛知県\n0.91216\n25.83282\n55.97\n    24\n三重県\n0.60941\n30.58887\n56.17\n    25\n滋賀県\n0.57552\n26.71561\n57.33\n    26\n京都府\n0.59466\n29.47203\n56.32\n    27\n大阪府\n0.79157\n27.65828\n56.20\n    28\n兵庫県\n0.64914\n29.32041\n54.29\n    29\n奈良県\n0.43666\n31.72145\n59.13\n    30\n和歌山県\n0.33779\n33.42466\n58.24\n    31\n鳥取県\n0.28689\n32.47166\n58.16\n    32\n島根県\n0.26570\n34.66566\n61.55\n    33\n岡山県\n0.53481\n30.67966\n50.94\n    34\n広島県\n0.61848\n29.79257\n52.13\n    35\n山口県\n0.45738\n34.84154\n49.67\n    36\n徳島県\n0.32716\n34.34980\n53.86\n    37\n香川県\n0.48747\n32.14574\n56.09\n    38\n愛媛県\n0.44767\n33.43253\n54.98\n    39\n高知県\n0.27382\n35.61885\n57.34\n    40\n福岡県\n0.65820\n28.21122\n52.12\n    41\n佐賀県\n0.35551\n30.85767\n58.49\n    42\n長崎県\n0.34825\n33.16014\n56.89\n    43\n熊本県\n0.42692\n31.66006\n56.40\n    44\n大分県\n0.39540\n33.53593\n57.26\n    45\n宮崎県\n0.35767\n32.85051\n53.66\n    46\n鹿児島県\n0.35338\n32.70230\n57.71\n    47\n沖縄県\n0.37469\n22.70253\n54.90\n  \n  \n  \n\n\n\n\n\n\n可視化は第12回講義以降で解説\n\n\n\ndf %>%\n  ggplot(aes(x = Finance, y = Turnout)) +\n  geom_point() +\n  labs(x = \"財政力指数\", \n       y = \"投票率 (%)\")\n\n\n\n\n\n\n\n\n\n\n\n\ndf %>%\n  ggplot(aes(x = Over65, y = Turnout)) +\n  geom_point() +\n  labs(x = \"65歳以上人口の割合\", \n       y = \"投票率 (%)\")\n\n\n\n\n\n\n\n\n\n\n\n\n線形回帰分析は後期の「マクロ政治データ分析実習」で\n\nfit <- lm(Turnout ~ Finance + Over65, data = df)\nsummary(fit)\n\n\nCall:\nlm(formula = Turnout ~ Finance + Over65, data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-7.2182 -1.6627  0.1581  1.5689  7.1454 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 57.31951    8.20293   6.988 1.19e-08 ***\nFinance     -4.40402    3.52987  -1.248    0.219    \nOver65       0.04544    0.21608   0.210    0.834    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.923 on 44 degrees of freedom\nMultiple R-squared:  0.09674,   Adjusted R-squared:  0.05568 \nF-statistic: 2.356 on 2 and 44 DF,  p-value: 0.1066\n\n\n\n\n\nprediction(fit, at = list(Finance = seq(0.3, 1.1, 0.1))) %>%\n  summary() %>%\n  rename(\"Finance\" = \"at(Finance)\") %>%\n  ggplot() +\n  geom_pointrange(aes(x = Finance, y = Prediction,\n                      ymin = lower, ymax = upper)) +\n  labs(x = \"財政力指数\", \n       y = \"投票率の予測値と95%信頼区間 (%)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide07.html#データ型とは",
    "href": "slide/slide07.html#データ型とは",
    "title": "ミクロ政治データ分析実習",
    "section": "データ型とは",
    "text": "データ型とは\n\nRにおける最小単位であるベクトル（vector）内の要素の種類\n\nベクトルはデータ構造（data structure）の一つ\n\\(\\bigcirc\\bigcirc\\bigcirc\\)型ベクトル呼ぶ。\n\n例) 全ての要素が数値型（numeric型）なら「numeric型ベクトル」\n例) 全ての要素が文字型（character型）なら「character型ベクトル」"
  },
  {
    "objectID": "slide/slide07.html#データ型の種類",
    "href": "slide/slide07.html#データ型の種類",
    "title": "ミクロ政治データ分析実習",
    "section": "データ型の種類",
    "text": "データ型の種類\n以下のデータ型はRが提供しているデータ型の一部（太字は本講義で紹介するデータ型）\n\nLogical\nNumeric\nComplex\nCharacter\nFactor\nDate\nNA\nNULL\nその他"
  },
  {
    "objectID": "slide/slide07.html#データ型の確認",
    "href": "slide/slide07.html#データ型の確認",
    "title": "ミクロ政治データ分析実習",
    "section": "データ型の確認",
    "text": "データ型の確認\nclass()関数を使用\n\nオブジェクトがベクトルの場合はデータ型が出力され、ベクトル以外の場合はデータ構造が出力される。\n\n\nmy_vec1 <- c(2, 3, 5, 7, 11)\nmy_vec2 <- c(\"Ramen\", \"Soba\", \"Udon\")\nmy_vec3 <- c(TRUE, TRUE, FALSE, FALSE)\n\n\n\nclass(my_vec1) # my_vec1のデータ型は?\n\n[1] \"numeric\"\n\nclass(my_vec2) # my_vec2のデータ型は?\n\n[1] \"character\"\n\nclass(my_vec3) # my_vec3のデータ型は?\n\n[1] \"logical\""
  },
  {
    "objectID": "slide/slide07.html#logical型-紹介",
    "href": "slide/slide07.html#logical型-紹介",
    "title": "ミクロ政治データ分析実習",
    "section": "Logical型: 紹介",
    "text": "Logical型: 紹介\n\nTRUEとFALSEのみで構成されるデータ型\n\n論理型とも呼ばれる。\n\n\n\nlogi_vec1 <- (2 + 3) == (2 * 3)\nlogi_vec1\n\n[1] FALSE\n\n\n\n\nlogi_vec1のデータ型の確認\n\n\nclass(logi_vec1)\n\n[1] \"logical\"\n\n\n\n\nあるベクトルがlogical型かどうかはis.logical()で確認可能。\n\n()内のオブジェクトがlogical型ならTRUE、それ以外はFALSEが返ってくる。\n\n\n\nis.logical(logi_vec1)\n\n[1] TRUE"
  },
  {
    "objectID": "slide/slide07.html#logical型-作成",
    "href": "slide/slide07.html#logical型-作成",
    "title": "ミクロ政治データ分析実習",
    "section": "Logical型: 作成",
    "text": "Logical型: 作成\n\n長さ2以上のlogical型ベクトルを作成する場合、c()を使用\n\nTRUEとFALSEは\"で囲んではいけない（character型として認識される）。\n\n\n\nlogi_vec2 <- c(TRUE, FALSE, TRUE, TRUE, FALSE)\n\n\nただし、このように直接logical型ベクトルを作成することは非常に稀であり、通常、論理演算子の計算から得られた結果で作成する。\n\n\nmy_vec4 <- 1:15\nlogi_vec3 <- my_vec4 %% 3 == 0 # my_vec4の要素は3で割り切れるか"
  },
  {
    "objectID": "slide/slide07.html#logical型-活用",
    "href": "slide/slide07.html#logical型-活用",
    "title": "ミクロ政治データ分析実習",
    "section": "Logical型: 活用",
    "text": "Logical型: 活用\n\n何かの条件（=論理演算子）に合致する要素のみを抽出する際に使用\n\n\nmy_vec4[logi_vec3]\n\n[1]  3  6  9 12 15\n\n\n\n\nLogical型ベクトルを作成せず、[]内に直接打ち込んでも良い\n\n\n# my_vec4の要素の中から3で割り切れる要素（=3の倍数）を抽出する。\nmy_vec4[my_vec4 %% 3 == 0]\n\n[1]  3  6  9 12 15"
  },
  {
    "objectID": "slide/slide07.html#numeric型",
    "href": "slide/slide07.html#numeric型",
    "title": "ミクロ政治データ分析実習",
    "section": "Numeric型",
    "text": "Numeric型\n\n第3回講義を参照"
  },
  {
    "objectID": "slide/slide07.html#character型-紹介作成",
    "href": "slide/slide07.html#character型-紹介作成",
    "title": "ミクロ政治データ分析実習",
    "section": "Character型: 紹介&作成",
    "text": "Character型: 紹介&作成\n\n要素が\"で囲まれているデータ型\n\n文字型とも呼ばれる。\n長さ2以上のcharacter型のベクトル作成はc()を使用\n\n\n\nchar_vec1 <- c(\"Kansai\", \"Kwansei-gakuin\", \"Doshisha\", \"Ritsumeikan\")\nchar_vec1\n\n[1] \"Kansai\"         \"Kwansei-gakuin\" \"Doshisha\"       \"Ritsumeikan\"   \n\n\n\n\nchar_vec1のデータ型の確認\n\n\nclass(char_vec1)\n\n[1] \"character\"\n\n\n\n\nあるベクトルがcharacter型かどうかはis.character()で確認可能。\n\n()内のオブジェクトがlogical型ならTRUE、それ以外はFALSEが返ってくる。\n\n\n\nis.character(char_vec1)\n\n[1] TRUE"
  },
  {
    "objectID": "slide/slide07.html#character型-活用",
    "href": "slide/slide07.html#character型-活用",
    "title": "ミクロ政治データ分析実習",
    "section": "Character型: 活用",
    "text": "Character型: 活用\n\n文字列の長さ\n\nlength(): ベクトルの長さ\nnchar(): 各要素の文字数\n\n\n\nlength(char_vec1) # char_vec1の長さ\n\n[1] 4\n\nnchar(char_vec1)  # char_vec1の各要素の文字数\n\n[1]  6 14  8 11\n\n\n\npaste(): 文字列の結合\n\npaste0()にすると、結合時、スペースが入らない。\n\n\n\n# 各要素の後にUniversityを付ける（スペースあり）\nchar_vec2 <- paste(char_vec1, \"Univeristy\")\nchar_vec2\n\n[1] \"Kansai Univeristy\"         \"Kwansei-gakuin Univeristy\"\n[3] \"Doshisha Univeristy\"       \"Ritsumeikan Univeristy\""
  },
  {
    "objectID": "slide/slide07.html#factor型",
    "href": "slide/slide07.html#factor型",
    "title": "ミクロ政治データ分析実習",
    "section": "Factor型",
    "text": "Factor型\n\n順序付き文字型\n\n主に図表を作成する際に使用する。\n\n\n\nデータ行のソート可視化\n\n\n列名の下が<chr>ならcharacter型、<fct>ならfactor型\n\n\n大学名がcharacter型の場合\n\n\n# A tibble: 4 × 2\n  大学名         学生数\n  <chr>           <dbl>\n1 Ritsumeikan     32467\n2 Kwansei-gakuin  23671\n3 Kansai          27736\n4 Doshisha        25974\n\n\n\n\n\n大学名がfactor型の場合\n\n順番は関西-関学-同志社-立命館\n\n\n\n# A tibble: 4 × 2\n  大学名         学生数\n  <fct>           <dbl>\n1 Ritsumeikan     32467\n2 Kwansei-gakuin  23671\n3 Kansai          27736\n4 Doshisha        25974\n\n\n\n\n\n\n行のソートについてはデータ・ハンドリングの講義にて解説\n\n\n大学名がcharacter型の場合\n\nアルファベット順になる。\n\n\n\n# A tibble: 4 × 2\n  大学名         学生数\n  <chr>           <dbl>\n1 Doshisha        25974\n2 Kansai          27736\n3 Kwansei-gakuin  23671\n4 Ritsumeikan     32467\n\n\n\n\n\n大学名がfactor型の場合\n\n予め指定した順番で表示される。\n\n\n\n# A tibble: 4 × 2\n  大学名         学生数\n  <fct>           <dbl>\n1 Kansai          27736\n2 Kwansei-gakuin  23671\n3 Doshisha        25974\n4 Ritsumeikan     32467\n\n\n\n\n\n\n作図については可視化の講義にて解説\n\n\n大学名がcharacter型の場合\n\nアルファベット順になる。\n\n\n\n\n\n\n\n\n\n\n\n\n\n大学名がfactor型の場合\n\n予め指定した順番で表示される。"
  },
  {
    "objectID": "slide/slide07.html#factor型-作成-1",
    "href": "slide/slide07.html#factor型-作成-1",
    "title": "ミクロ政治データ分析実習",
    "section": "Factor型: 作成 (1)",
    "text": "Factor型: 作成 (1)\n\nCharacter型からfactor型へ\n\n\nchar_vec3 <- c(\"Ritsumeikan\", \"Kwansei-gakuin\", \"Kansai\", \"Doshisha\")\nchar_vec3\n\n[1] \"Ritsumeikan\"    \"Kwansei-gakuin\" \"Kansai\"         \"Doshisha\"      \n\nclass(char_vec3)\n\n[1] \"character\"\n\n\n\n要素をソートしてみると、アルファベット順になる。\n\nsort()関数を使用\n\n\n\nsort(char_vec3)\n\n[1] \"Doshisha\"       \"Kansai\"         \"Kwansei-gakuin\" \"Ritsumeikan\""
  },
  {
    "objectID": "slide/slide07.html#factor型-作成-2",
    "href": "slide/slide07.html#factor型-作成-2",
    "title": "ミクロ政治データ分析実習",
    "section": "Factor型: 作成 (2)",
    "text": "Factor型: 作成 (2)\n\nfactor()関数でfactor化\n\nlevels引数に順番を指定すること\nfactor型ベクトルを出力すると水準 (level)の順番も下に表示される。\n\n\n\nfct_vec1 <- factor(char_vec3, \n                   levels = c(\"Kansai\", \"Kwansei-gakuin\", \"Doshisha\", \"Ritsumeikan\"))\nfct_vec1\n\n[1] Ritsumeikan    Kwansei-gakuin Kansai         Doshisha      \nLevels: Kansai Kwansei-gakuin Doshisha Ritsumeikan\n\nclass(fct_vec1)\n\n[1] \"factor\"\n\n\n\n要素をソートしてみると、予め指定した順番になる。\n\n\nsort(fct_vec1)\n\n[1] Kansai         Kwansei-gakuin Doshisha       Ritsumeikan   \nLevels: Kansai Kwansei-gakuin Doshisha Ritsumeikan"
  },
  {
    "objectID": "slide/slide07.html#factor型-活用",
    "href": "slide/slide07.html#factor型-活用",
    "title": "ミクロ政治データ分析実習",
    "section": "Factor型: 活用",
    "text": "Factor型: 活用\n\n詳細はデータハンドリング、および可視化の講義で説明"
  },
  {
    "objectID": "slide/slide07.html#欠損値",
    "href": "slide/slide07.html#欠損値",
    "title": "ミクロ政治データ分析実習",
    "section": "欠損値",
    "text": "欠損値\n\n欠損値（missing value）\n\n何らかの値があるはずであるものの、観察されていない値である。\n例) 人間開発指数（Human Development Index; HDI）」では世界各国のデータが含まれているものの、台湾や北朝鮮のデータは含まれていない。これらの国（地域）に人間開発という概念がないわけではなく、なんらかの理由（今回は政治的な理由）で値が欠損しているだけ\n\n\n\n\n欠損値以外に計算上、何らかの問題を生じさせ得る値\n\n\n\n\n値\n意味\n例\n\n\n\n\nNA\n何らかの値があるはずだが、欠損している状態\n\n\n\nNULL\nそもそも存在しない\n\n\n\nNaN\n計算不可\n0 / 0\n\n\nInf\n無限大\n10 / 0"
  },
  {
    "objectID": "slide/slide07.html#naとnull-1",
    "href": "slide/slide07.html#naとnull-1",
    "title": "ミクロ政治データ分析実習",
    "section": "NAとNULL (1)",
    "text": "NAとNULL (1)\n\nVec1 <- c(1, 2, 3, 5, 7, 11, 13)\nVec2 <- c(1, NA, 3, 5, NA, NA, 13)\nVec3 <- c(1, NULL, 3, 5, NULL, NULL, 13)\n\n\n\nVec1\n\n[1]  1  2  3  5  7 11 13\n\nVec2\n\n[1]  1 NA  3  5 NA NA 13\n\nVec3\n\n[1]  1  3  5 13\n\n\n\nlength(Vec1)\n\n[1] 7\n\nlength(Vec2)\n\n[1] 7\n\nlength(Vec3)\n\n[1] 4"
  },
  {
    "objectID": "slide/slide07.html#naとnull-2",
    "href": "slide/slide07.html#naとnull-2",
    "title": "ミクロ政治データ分析実習",
    "section": "NAとNULL (2)",
    "text": "NAとNULL (2)\n初心者レベルでNULLを使うことはないが、中級以上からは（そこそこ）使う機会がある。"
  },
  {
    "objectID": "slide/slide07.html#欠損値が含まれたベクトルの動き",
    "href": "slide/slide07.html#欠損値が含まれたベクトルの動き",
    "title": "ミクロ政治データ分析実習",
    "section": "欠損値が含まれたベクトルの動き",
    "text": "欠損値が含まれたベクトルの動き\n\nmean()関数でVec2の平均値を計算してみよう。\n\n\nmean(Vec2)\n\n[1] NA\n\n\n\nコンソール上で?meanを打ち、mean()関数の詳細について調べてみると、mean()関数で使用可能な引数の一覧が表示される。\n\nna.rm    a logical value indicating whether NA values should be stripped before \n         the computation proceeds.\n\n意味: 「na.rmはlogical型の値であり、計算の前に欠損値（NA）を除去するか否かを示す引数である。」\n\n\n\nmean(Vec2, na.rm = TRUE)\n\n[1] 5.5\n\n\n\nこのように一部の関数では欠損値が含まれているオブジェクトの計算ができないため、おかしいと思ったらヘルプを読んでみること。"
  },
  {
    "objectID": "slide/slide07.html#共通-要素の追加",
    "href": "slide/slide07.html#共通-要素の追加",
    "title": "ミクロ政治データ分析実習",
    "section": "共通: 要素の追加",
    "text": "共通: 要素の追加\n\nmy_vec5 <- c(4, 3, 2, 1)\nmy_vec5\n\n[1] 4 3 2 1\n\n\n\nmy_vec5の5番目の要素として、0を追加\n\n\nmy_vec5[5] <- 0\nmy_vec5\n\n[1] 4 3 2 1 0\n\n\n\nmy_vec5の6、7、8番目の要素として、-1、-2、-3を追加\n\n\n# 6:8の代わりにc(6, 7, 8)もOK\nmy_vec5[6:8] <- c(-1, -2, -3)\nmy_vec5\n\n[1]  4  3  2  1  0 -1 -2 -3\n\n\n\nmy_vec5の11番目に10を入れたら?\n\n\nmy_vec5[11] <- 10\nmy_vec5\n\n [1]  4  3  2  1  0 -1 -2 -3 NA NA 10"
  },
  {
    "objectID": "slide/slide07.html#共通-要素の置換",
    "href": "slide/slide07.html#共通-要素の置換",
    "title": "ミクロ政治データ分析実習",
    "section": "共通: 要素の置換",
    "text": "共通: 要素の置換\n\n要素の追加と方法は同じ\n\n\nmy_vec5[11] <- -6\nmy_vec5\n\n [1]  4  3  2  1  0 -1 -2 -3 NA NA -6\n\n\n\n複数の要素を置換する場合\n\n\nmy_vec5[9:10] <- c(-4, -5)\nmy_vec5\n\n [1]  4  3  2  1  0 -1 -2 -3 -4 -5 -6\n\n\n\nmy_vec5の要素の中から0より小さい要素に-1を掛けて置換する。\n\n\nmy_vec5[my_vec5 < 0] <- my_vec5[my_vec5 < 0] * -1\nmy_vec5\n\n [1] 4 3 2 1 0 1 2 3 4 5 6\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide13.html#section",
    "href": "slide/slide13.html#section",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "代表的な5種類のグラフ"
  },
  {
    "objectID": "slide/slide13.html#named-graphs-5ng",
    "href": "slide/slide13.html#named-graphs-5ng",
    "title": "ミクロ政治データ分析実習",
    "section": "5 Named Graphs (5NG)",
    "text": "5 Named Graphs (5NG)\n\n棒グラフ (bar plot)\n\ngeom_bar()\n\nヒストグラム (histogram)\n\ngeom_histogram()\n\n箱ひげ図 (box plot / box-and-whisker plot)\n\ngeom_box()\n\n散布図 (scatter plot)\n\ngeom_point()\n\n折れ線グラフ (line plot)\n\ngeom_line()"
  },
  {
    "objectID": "slide/slide13.html#グラフ作成の手順",
    "href": "slide/slide13.html#グラフ作成の手順",
    "title": "ミクロ政治データ分析実習",
    "section": "グラフ作成の手順",
    "text": "グラフ作成の手順\n\n作成したいグラフを決める\n作成したいグラフの完成図を想像する or 描いてみる\nグラフ上の要素（点、線、面）が持つ情報を考える\n3の情報が一つの変数（列）と対応するような整然データを作成する\n{ggplot2}で作図\n図のカスタマイズ\n図の保存"
  },
  {
    "objectID": "slide/slide13.html#section-1",
    "href": "slide/slide13.html#section-1",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "棒グラフ"
  },
  {
    "objectID": "slide/slide13.html#棒グラフの必須要素",
    "href": "slide/slide13.html#棒グラフの必須要素",
    "title": "ミクロ政治データ分析実習",
    "section": "棒グラフの必須要素",
    "text": "棒グラフの必須要素\n棒グラフを作成する際に必要な最低限の情報\n\n\n\n\n\n\nx: 棒の横軸上の位置 (大陸)\ny: 棒の高さ (人間開発指数の平均値)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny: 棒の縦軸上の位置 (大陸)\nx: 棒の長さ (人間開発指数の平均値)"
  },
  {
    "objectID": "slide/slide13.html#データの用意",
    "href": "slide/slide13.html#データの用意",
    "title": "ミクロ政治データ分析実習",
    "section": "データの用意",
    "text": "データの用意\n第9回講義のデータ (Micro09.csv) を使用\n\n{dplyr}を使用し、大陸 (Continent)ごとの人間開発指数 (HDI_2018)の平均値を計算し、df2という名で格納\n\n\nlibrary(tidyverse)\ndf <- read_csv(\"Data/Micro09.csv\")\n\ndf2 <- df %>%\n   group_by(Continent) %>%\n   summarise(HDI = mean(HDI_2018, na.rm = TRUE))\n\ndf2\n\n# A tibble: 5 × 2\n  Continent   HDI\n  <chr>     <dbl>\n1 Africa    0.553\n2 America   0.742\n3 Asia      0.723\n4 Europe    0.861\n5 Oceania   0.782"
  },
  {
    "objectID": "slide/slide13.html#とりあえず作図してみよう",
    "href": "slide/slide13.html#とりあえず作図してみよう",
    "title": "ミクロ政治データ分析実習",
    "section": "とりあえず作図してみよう",
    "text": "とりあえず作図してみよう\n\n使用する幾何オブジェクト: geom_bar()\nマッピング要素 (幾何オブジェクト内にaes())\n\n棒の横軸上の位置は大陸 (Continent)を意味する\n棒の高さは人間開発指数の平均値 (HDI)を意味する\n\ngeom_bar()内にstat = \"identity\"を忘れないこと\n\n\n\nコード\n\nbar_plot1 <- df2 %>%\n  ggplot() +\n  geom_bar(aes(x = Continent, y = HDI), \n           stat = \"identity\")\n\n\n\n\n結果\n\nbar_plot1"
  },
  {
    "objectID": "slide/slide13.html#日本語の使用-1",
    "href": "slide/slide13.html#日本語の使用-1",
    "title": "ミクロ政治データ分析実習",
    "section": "日本語の使用 (1)",
    "text": "日本語の使用 (1)\nStep1: df2のContinent列を日本語にリコーディング\n\ndf2 <- df2 %>%\n   mutate(Continent_J = case_when(Continent == \"Asia\"    ~ \"アジア\",\n                                  Continent == \"Africa\"  ~ \"アフリカ\",\n                                  Continent == \"America\" ~ \"アメリカ\",\n                                  Continent == \"Europe\"  ~ \"ヨーロッパ\",\n                                  TRUE                   ~ \"オセアニア\"))\n\ndf2\n\n# A tibble: 5 × 3\n  Continent   HDI Continent_J\n  <chr>     <dbl> <chr>      \n1 Africa    0.553 アフリカ   \n2 America   0.742 アメリカ   \n3 Asia      0.723 アジア     \n4 Europe    0.861 ヨーロッパ \n5 Oceania   0.782 オセアニア"
  },
  {
    "objectID": "slide/slide13.html#日本語の使用-2",
    "href": "slide/slide13.html#日本語の使用-2",
    "title": "ミクロ政治データ分析実習",
    "section": "日本語の使用 (2)",
    "text": "日本語の使用 (2)\nStep2: 図のラベルを修正 (labs())\n\ndf2 %>%\n   ggplot() +\n   geom_bar(aes(x = Continent_J, y = HDI), stat = \"identity\") +\n   labs(x = \"大陸\", y = \"人間開発指数の平均値\")"
  },
  {
    "objectID": "slide/slide13.html#文字化けが生じる場合",
    "href": "slide/slide13.html#文字化けが生じる場合",
    "title": "ミクロ政治データ分析実習",
    "section": "文字化けが生じる場合",
    "text": "文字化けが生じる場合\nNIIオンライン分析システムを使用する場合、文字化けは生じない\n\ntheme_*()レイヤーを追加し、base_family = \"日本語フォント\"を指定\ntheme_gray(): {ggplot2}の基本テーマ\n\n他にもtheme_bw()、theme_minimal()など\n\nmacOSの場合、\"HiraginoSans-W3\"、Windowsの場合、\"Yu Gothic\"を指定\n\n\ndf2 %>%\n   ggplot() +\n   geom_bar(aes(x = Continent_J, y = HDI), stat = \"identity\") +\n   labs(x = \"大陸\", y = \"人間開発指数の平均値\") +\n   theme_gray(base_family = \"HiraginoSans-W3\")"
  },
  {
    "objectID": "slide/slide13.html#棒の並び替え",
    "href": "slide/slide13.html#棒の並び替え",
    "title": "ミクロ政治データ分析実習",
    "section": "棒の並び替え",
    "text": "棒の並び替え\nアルファベット順に並べ替えたい場合\n\nコード結果\n\n\n\nContinet_J列をfactor化し、アフリカ、アメリカ、アジア、ヨーロッパ、オセアニア順とする\n\n\ndf2 %>%\n   mutate(Continent_J = factor(Continent_J, \n                               levels = c(\"アフリカ\", \"アメリカ\", \"アジア\", \n                                          \"ヨーロッパ\", \"オセアニア\"))) %>% \n   ggplot() +\n   geom_bar(aes(x = Continent_J, y = HDI), stat = \"identity\") +\n   labs(x = \"大陸\", y = \"人間開発指数の平均値\") +\n   theme_bw() # Black and Whiteテーマも使ってみよう"
  },
  {
    "objectID": "slide/slide13.html#便利な関数-fct_inorder",
    "href": "slide/slide13.html#便利な関数-fct_inorder",
    "title": "ミクロ政治データ分析実習",
    "section": "便利な関数: fct_inorder()",
    "text": "便利な関数: fct_inorder()\n{forcats}のfct_inorder()関数（{forcats}は{tidyverse}の一部）\n\nfactor化を行い、各要素順番を表で登場した順番とする\n\n\n\ndf2の中身\n\ndf2\n\n# A tibble: 5 × 3\n  Continent   HDI Continent_J\n  <chr>     <dbl> <chr>      \n1 Africa    0.553 アフリカ   \n2 America   0.742 アメリカ   \n3 Asia      0.723 アジア     \n4 Europe    0.861 ヨーロッパ \n5 Oceania   0.782 オセアニア \n\n\n\n\n\n\ndf2 %>%\n   mutate(Continent_J = fct_inorder(Continent_J)) %>%\n   ggplot() +\n   geom_bar(aes(x = Continent_J, y = HDI), \n            stat = \"identity\") +\n   labs(x = \"大陸\", y = \"人間開発指数の平均値\")"
  },
  {
    "objectID": "slide/slide13.html#section-2",
    "href": "slide/slide13.html#section-2",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "次元の追加"
  },
  {
    "objectID": "slide/slide13.html#ケース数の棒グラフ",
    "href": "slide/slide13.html#ケース数の棒グラフ",
    "title": "ミクロ政治データ分析実習",
    "section": "ケース数の棒グラフ",
    "text": "ケース数の棒グラフ\n各政治体制に属する国家数を計算\n\ndf3 <- df %>%\n   drop_na(Polity_Type) %>%\n   mutate(Polity_Type = factor(Polity_Type,\n                               levels = c(\"Autocracy\", \"Closed Anocracy\",\n                                          \"Open Anocracy\", \"Democracy\",\n                                          \"Full Democracy\"))) %>%\n   group_by(Polity_Type) %>%\n   summarise(N = n())\n\ndf3\n\n# A tibble: 5 × 2\n  Polity_Type         N\n  <fct>           <int>\n1 Autocracy          19\n2 Closed Anocracy    23\n3 Open Anocracy      20\n4 Democracy          65\n5 Full Democracy     31"
  },
  {
    "objectID": "slide/slide13.html#作図",
    "href": "slide/slide13.html#作図",
    "title": "ミクロ政治データ分析実習",
    "section": "作図",
    "text": "作図\n\ndf3 %>%\n   ggplot() +\n   geom_bar(aes(x = Polity_Type, y = N), stat = \"identity\")"
  },
  {
    "objectID": "slide/slide13.html#棒が持つ情報",
    "href": "slide/slide13.html#棒が持つ情報",
    "title": "ミクロ政治データ分析実習",
    "section": "棒が持つ情報",
    "text": "棒が持つ情報\n\n政治体制のタイプ (x = Polity_Type)\n国家数 (y = N)\n\n例) さらに大陸の情報を持たせ、色分けしたい\n\n大陸の列が必要\n\n\ndf4 <- df %>%\n   drop_na(Polity_Type) %>%\n   mutate(Polity_Type = factor(Polity_Type,\n                               levels = c(\"Autocracy\", \"Closed Anocracy\",\n                                          \"Open Anocracy\", \"Democracy\",\n                                          \"Full Democracy\"))) %>%\n   group_by(Polity_Type, Continent) %>%\n   summarise(N       = n(),\n             .groups = \"drop\")"
  },
  {
    "objectID": "slide/slide13.html#データ",
    "href": "slide/slide13.html#データ",
    "title": "ミクロ政治データ分析実習",
    "section": "データ",
    "text": "データ\n\ndf4\n\n# A tibble: 20 × 3\n   Polity_Type     Continent     N\n   <fct>           <chr>     <int>\n 1 Autocracy       Africa        3\n 2 Autocracy       Asia         14\n 3 Autocracy       Europe        2\n 4 Closed Anocracy Africa       14\n 5 Closed Anocracy America       2\n 6 Closed Anocracy Asia          6\n 7 Closed Anocracy Europe        1\n 8 Open Anocracy   Africa       12\n 9 Open Anocracy   America       4\n10 Open Anocracy   Europe        2\n11 Open Anocracy   Oceania       2\n12 Democracy       Africa       18\n13 Democracy       America      16\n14 Democracy       Asia         15\n15 Democracy       Europe       16\n16 Full Democracy  Africa        1\n17 Full Democracy  America       5\n18 Full Democracy  Asia          3\n19 Full Democracy  Europe       20\n20 Full Democracy  Oceania       2"
  },
  {
    "objectID": "slide/slide13.html#次元の追加",
    "href": "slide/slide13.html#次元の追加",
    "title": "ミクロ政治データ分析実習",
    "section": "次元の追加",
    "text": "次元の追加\naes()内にfill = Continentを追加\n\ndf4 %>%\n  ggplot() +\n  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = \"identity\")"
  },
  {
    "objectID": "slide/slide13.html#棒の位置をずらす",
    "href": "slide/slide13.html#棒の位置をずらす",
    "title": "ミクロ政治データ分析実習",
    "section": "棒の位置をずらす",
    "text": "棒の位置をずらす\ngeom_bar()内にposition = \"dodge\"を指定（aes()の外）\n\ndf4 %>%\n  ggplot() +\n  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = \"identity\",\n           position = \"dodge\")"
  },
  {
    "objectID": "slide/slide13.html#凡例の位置調整",
    "href": "slide/slide13.html#凡例の位置調整",
    "title": "ミクロ政治データ分析実習",
    "section": "凡例の位置調整",
    "text": "凡例の位置調整\ntheme()内にlegend.position = \"bottom\"を指定\n\nデフォルトは\"right\"（\"top\"は上段; \"none\"は削除）\n\n\nコード結果\n\n\n\ndf4 %>%\n  ggplot() +\n  geom_bar(aes(x = Polity_Type, y = N, fill = Continent), stat = \"identity\",\n           position = \"dodge\") +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "slide/slide13.html#もう一つの方法-マッピングの交換",
    "href": "slide/slide13.html#もう一つの方法-マッピングの交換",
    "title": "ミクロ政治データ分析実習",
    "section": "もう一つの方法: マッピングの交換",
    "text": "もう一つの方法: マッピングの交換\n\n前ページの場合、「ある政治体制内の大陸の分布」を知ることに特化\n「ある大陸内の政治体制の分布」を見るには? \\(\\rightarrow\\) xとfillを交換\n\n\nコード結果\n\n\n\ndf4 %>%\n  ggplot() +\n  geom_bar(aes(x = Continent, y = N, fill = Polity_Type), stat = \"identity\",\n           position = \"dodge\") +\n  labs(x = \"Continent\", y = \"Number of Countries\", fill = \"Polity Type\")"
  },
  {
    "objectID": "slide/slide13.html#もう一つの方法-ファセット分割",
    "href": "slide/slide13.html#もう一つの方法-ファセット分割",
    "title": "ミクロ政治データ分析実習",
    "section": "もう一つの方法: ファセット分割",
    "text": "もう一つの方法: ファセット分割\n\n色分けを出来る限り抑えたい\nfacet_wrap(~ 分割の基準となる変数名)\n\n\nコード結果\n\n\n\nbar_plot2 <- df4 %>%\n  ggplot() +\n  geom_bar(aes(x = Polity_Type, y = N), stat = \"identity\") +\n  facet_wrap(~ Continent, ncol = 5) # ncol/nrowで列/行数の指定が可能\n\n\n\n\nbar_plot2"
  },
  {
    "objectID": "slide/slide13.html#値ラベルの回転",
    "href": "slide/slide13.html#値ラベルの回転",
    "title": "ミクロ政治データ分析実習",
    "section": "値ラベルの回転",
    "text": "値ラベルの回転\n値ラベルが長すぎる場合、ラベルを回転することで重複を避ける\n\n覚える必要はなく、必要に応じてググる（theme()レイヤーはかなり複雑）\n\n\nコード結果\n\n\n\n# 以下のように図オブジェクトに直接「+」でレイヤーを追加することもできる。\nbar_plot3 <- bar_plot2 +\n   theme_minimal() + # テーマを変えてみよう\n   theme(axis.text.x = element_text(angle = 35, vjust = 1, hjust = 1)) # 35度回転\n\n\n\n\nbar_plot3"
  },
  {
    "objectID": "slide/slide13.html#マッピング交換でも解決可能",
    "href": "slide/slide13.html#マッピング交換でも解決可能",
    "title": "ミクロ政治データ分析実習",
    "section": "マッピング交換でも解決可能",
    "text": "マッピング交換でも解決可能\nxとyを交換しても良い\n\nコード結果\n\n\n\nbar_plot4 <- df4 %>%\n  ggplot() +\n  geom_bar(aes(x = N, y = Polity_Type), stat = \"identity\") +\n  labs(x = \"Number of Countries\", y = \"Poltiy Type\") +\n  facet_wrap(~ Continent, ncol = 5) + # 5列のファセット分割\n  theme_minimal(base_size = 12)       # フォントサイズの調整も可能\n\n\n\n\nbar_plot4"
  },
  {
    "objectID": "slide/slide13.html#section-3",
    "href": "slide/slide13.html#section-3",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "図の保存"
  },
  {
    "objectID": "slide/slide13.html#ベクトルとビットマップ",
    "href": "slide/slide13.html#ベクトルとビットマップ",
    "title": "ミクロ政治データ分析実習",
    "section": "ベクトルとビットマップ",
    "text": "ベクトルとビットマップ\nベクトル画像を推奨するが、使用するワードソフトによってはPDFの図の埋め込みができない場合もある。\n\n本講義では高解像度の.png形式の保存方法について解説する。\n\n\n\nベクトル画像\n\n.pdf、.svgなど\n\n推奨はPDF形式\n\n拡大しても図が綺麗なまま\n複雑な図であれば、ファイルのサイズが大きくなる\n\n\n\n\n\n\n\n\n\n\n\n\n\nビットマップ画像\n\n.png、.bmp、.jpg（= .jpeg）など\n\n推奨はPNG形式\n\n拡大すると図がカクカクする\n\n高い解像度（DPI）にすると、拡大しても綺麗だが、ファイルサイズに注意\n\n図が複雑でも、ファイルサイズが比較的安定"
  },
  {
    "objectID": "slide/slide13.html#図の保存",
    "href": "slide/slide13.html#図の保存",
    "title": "ミクロ政治データ分析実習",
    "section": "図の保存",
    "text": "図の保存\nbar_plot3を保存する例\n\nggsave()関数を利用\n作業フォルダー内のFigsフォルダにFigure1.pngという名で保存\n\n予めFigsフォルダーを作成しておくこと\n\n図のサイズは幅6インチ、高さ3インチ\n保存形式はPNG形式 & 解像度は400\n\n画面表示のみなら最低150、印刷目的なら最低300\n\n{ragg}パッケージをインストールしておく（文字化け防止）\n\n\nggsave(filename = \"Figs/Figure1.png\", # 保存先とファイル名\n       plot     = bar_plot3,          # 保存する図のオブジェクト名\n       width    = 6,                  # 図の幅 (インチ)\n       height   = 3,                  # 図の高さ (インチ)\n       dpi      = 400,                # 解像度\n       device   = ragg::agg_png)      # 文字化け防止"
  },
  {
    "objectID": "slide/slide13.html#section-4",
    "href": "slide/slide13.html#section-4",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "ヒストグラム"
  },
  {
    "objectID": "slide/slide13.html#変数の分布を確認する方法",
    "href": "slide/slide13.html#変数の分布を確認する方法",
    "title": "ミクロ政治データ分析実習",
    "section": "変数の分布を確認する方法",
    "text": "変数の分布を確認する方法\n変数が一つの場合\n\n変数が離散変数の場合: 棒グラフ\n\n性別、国、都道府県など、数値が意味を持たないか変数\n順位など取りうる値が有限\n\n変数が連続変数の場合: ヒストグラム、箱ひげ図\n\n気温、成績、所得、身長、体重、人間開発指数、…\n取りうる値が無限個\n\n\n変数が2つの場合\n\n連続変数と連続変数: 散布図\n順序付き離散変数と連続変数: 折れ線グラフ\n離散変数と離散変数: モザイク図\n\n変数が3つ以上の場合\n\n次元を追加する形で対応"
  },
  {
    "objectID": "slide/slide13.html#ヒストグラムの棒が持つ情報",
    "href": "slide/slide13.html#ヒストグラムの棒が持つ情報",
    "title": "ミクロ政治データ分析実習",
    "section": "ヒストグラムの棒が持つ情報",
    "text": "ヒストグラムの棒が持つ情報\n棒の横軸上の位置と高さ\n\n{ggplot2}の場合、ヒストグラムを出力する変数をxにマッピングするだけで、自動的にヒストグラムを生成"
  },
  {
    "objectID": "slide/slide13.html#ヒストグラムの作成",
    "href": "slide/slide13.html#ヒストグラムの作成",
    "title": "ミクロ政治データ分析実習",
    "section": "ヒストグラムの作成",
    "text": "ヒストグラムの作成\ngeom_histogram()を使用: マッピングはxのみ\n\ndf %>%\n  ggplot() +\n  geom_histogram(aes(x = HDI_2018)) # HDI_2018のヒストグラム"
  },
  {
    "objectID": "slide/slide13.html#棒の数を調整する",
    "href": "slide/slide13.html#棒の数を調整する",
    "title": "ミクロ政治データ分析実習",
    "section": "棒の数を調整する",
    "text": "棒の数を調整する\ngeom_histogram()内、aes()の外にbins引数を指定\n\ndf %>%\n  ggplot() +\n  geom_histogram(aes(x = HDI_2018), bins = 10) # 棒を10本にする"
  },
  {
    "objectID": "slide/slide13.html#棒の幅を調整する",
    "href": "slide/slide13.html#棒の幅を調整する",
    "title": "ミクロ政治データ分析実習",
    "section": "棒の幅を調整する",
    "text": "棒の幅を調整する\ngeom_histogram()内、aes()の外にbinwidth引数を指定\n\ndf %>%\n  ggplot() +\n  geom_histogram(aes(x = HDI_2018), binwidth = 0.05) # 棒の幅を0.05にする"
  },
  {
    "objectID": "slide/slide13.html#棒の枠線を入れる",
    "href": "slide/slide13.html#棒の枠線を入れる",
    "title": "ミクロ政治データ分析実習",
    "section": "棒の枠線を入れる",
    "text": "棒の枠線を入れる\ngeom_histogram()内、aes()の外にcolor引数を指定\n\nhist_plot1 <- df %>%\n  ggplot() +\n  geom_histogram(aes(x = HDI_2018), binwidth = 0.05, color = \"white\") +\n  labs(x = \"Human Development Index (2018)\", y = \"Number of Countries\")\nhist_plot1"
  },
  {
    "objectID": "slide/slide13.html#横軸のスケール調整",
    "href": "slide/slide13.html#横軸のスケール調整",
    "title": "ミクロ政治データ分析実習",
    "section": "横軸のスケール調整",
    "text": "横軸のスケール調整\nscale_x_continuous()を使用 (xをyに変えると縦軸修正)\n\nbreaks引数: 目盛りの位置 / labels引数: 目盛りのラベル\n\n\nコード結果\n\n\n\nhist_plot2 <- hist_plot1 +\n   scale_x_continuous(breaks = seq(0.4, 1.0, by = 0.1),\n                      labels = seq(0.4, 1.0, by = 0.1))\n\n\n\n\nhist_plot2"
  },
  {
    "objectID": "slide/slide13.html#次元の追加ファセット分割",
    "href": "slide/slide13.html#次元の追加ファセット分割",
    "title": "ミクロ政治データ分析実習",
    "section": "次元の追加（ファセット分割）",
    "text": "次元の追加（ファセット分割）\n大陸ごとのHDI_2018のヒストグラム: ファセット分割を使用\n\nhist_plot1 +\n   facet_wrap(~Continent, ncol = 6)"
  },
  {
    "objectID": "slide/slide13.html#次元の追加-色分け",
    "href": "slide/slide13.html#次元の追加-色分け",
    "title": "ミクロ政治データ分析実習",
    "section": "次元の追加 (色分け)",
    "text": "次元の追加 (色分け)\nposition = \"identity\"とalpha = 0.5で可能であるが、非推奨\n\nalpha = 1の場合、棒が不透明であるため、0.5程度に調整\n\n\nコード結果\n\n\n\ndf %>%\n   mutate(OECD = if_else(OECD == 1, \"OECD Members\", \"Others\")) %>%\n   ggplot() +\n   geom_histogram(aes(x = HDI_2018, fill = OECD), position = \"identity\",\n                  binwidth = 0.05, color = \"white\", alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide05.html#r-markdownとは",
    "href": "slide/slide05.html#r-markdownとは",
    "title": "ミクロ政治データ分析実習",
    "section": "R Markdownとは",
    "text": "R Markdownとは\n\nR + Markdown\nRのコードと結果、そして文章が一つの文書としてまとまったもの\n\n文書の形式はHTML、Microsoft Word（.docx）、PDFで出力される\nスライド、ホームページなども作成可能\n本講義のスライドもR Markdownで作成（{xaringan}）\n本講義の教科書もR Markdownで作成（{bookdown}）\n宋のホームページもR Markdownで作成（{blogdown}）"
  },
  {
    "objectID": "slide/slide05.html#markdownとは",
    "href": "slide/slide05.html#markdownとは",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownとは",
    "text": "Markdownとは\nプレーンテキストとリッチテキスト\n\nPlain text: 書式情報などが含まれていない純粋なテキストのみで構成されている文書\n\nmacOSの「テキストエディット」、Windowsの「メモ帳」など\n\nRich text: 書式情報だけでなく、図表なども含まれる文書\n\nMicrosoft Word、Apple Pagesなど\n\n書式情報の例: 文書の余白、行間の幅、文字サイズ、太さ、色\nリッチテキストには文字情報以外にも様々な書式情報が含まれているため、サイズが大きく、パソコンへの負担も大きい"
  },
  {
    "objectID": "slide/slide05.html#プレーンからリッチへ",
    "href": "slide/slide05.html#プレーンからリッチへ",
    "title": "ミクロ政治データ分析実習",
    "section": "プレーンからリッチへ",
    "text": "プレーンからリッチへ\nMarkup言語とは\n\nプレーンテキストをリッチテキストへ変換するための言語\nHTMLが代表的\n\n例: <b>と</b>で囲まれた文字は太字として出力される。\n\n\nInput:\nこの文字は<b>太字</b>にしましょう。<br/>\nこの文字は<a href = \"https://www.jaysong.net\">リンク</a>にしましょう。\nOutput:\nこの文字は太字にしましょう。 この文字はリンクにしましょう。"
  },
  {
    "objectID": "slide/slide05.html#markdownとは-1",
    "href": "slide/slide05.html#markdownとは-1",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownとは",
    "text": "Markdownとは\n\nMarkdown: Markup言語の軽量版\n文章作成に必要なタグ（tag）をより簡単に記述できる。\nブラインドタッチに慣れればWordよりも素早く文書を作成することができるようになる。\n\n\n以下の2つのコードは同じ結果を返す。\nMarkupの場合（HTML）\nこの文字は<b>太字</b>にしましょう。<br/>\nこの文字は<a href = \"https://www.jaysong.net\">リンク</a>にしましょう。\nMarkdownの場合\nこの文字は**太字**にしましょう。\n\nこの文字は[リンク](https://www.jaysong.net)にしましょう。"
  },
  {
    "objectID": "slide/slide05.html#markup-vs.-markdown",
    "href": "slide/slide05.html#markup-vs.-markdown",
    "title": "ミクロ政治データ分析実習",
    "section": "Markup vs. Markdown",
    "text": "Markup vs. Markdown\n表の作成\n\n\nMarkup\n<table>\n    <thead style = \"font-weight:bold;\">\n        <td>ID</td>\n        <td>Name</td>\n    </thead>\n    <tr>\n        <td>1</td>\n        <td>Song</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Kojima</td>\n    </tr>\n</table>\n\n\n\nMarkdown\n| ID | Name |\n|----|------|\n| 1  | Song |\n| 2  |Kojima|\nOutput (どれも同じ結果)\n\n\n\nID\nName\n\n\n\n\n1\nSong\n\n\n2\nKojima"
  },
  {
    "objectID": "slide/slide05.html#markup-vs.-markdown-1",
    "href": "slide/slide05.html#markup-vs.-markdown-1",
    "title": "ミクロ政治データ分析実習",
    "section": "Markup vs. Markdown",
    "text": "Markup vs. Markdown\n箇条書き\n\n\nMarkup\n<ul>\n  <li>箇条書き1</li>\n    <ul>\n      <li>箇条書き1A</li>\n      <li>箇条書き1B</li>\n    </ul>\n  <li>箇条書き2</li>\n  <li>箇条書き3</li>\n</ul>\n\n\n\nMarkdown\n* 箇条書き1\n  * 箇条書き1A\n  * 箇条書き1B\n* 箇条書き2\n* 箇条書き3\nOutput\n\n箇条書き1\n\n箇条書き1A\n箇条書き1B\n\n箇条書き2\n箇条書き3"
  },
  {
    "objectID": "slide/slide05.html#rmdファイルの生成",
    "href": "slide/slide05.html#rmdファイルの生成",
    "title": "ミクロ政治データ分析実習",
    "section": ".Rmdファイルの生成",
    "text": ".Rmdファイルの生成\n\nRStudioを起動し、プロジェクトを作成する。\nFile > New > R Markdown…を選択する。\nOKをクリックする。\nYAMLヘッダーを修正する。\n\n\nファイルを保存する（File > Save）。\n\nショートカットキー: ⌘+S（macOS）、または Ctrl + S (Windows)\n\nSourceペイン上段のKnitをクリックする。\n\nKnitは「ニット」と読む（「クニット」ではない）。"
  },
  {
    "objectID": "slide/slide05.html#yamlヘッダー",
    "href": "slide/slide05.html#yamlヘッダー",
    "title": "ミクロ政治データ分析実習",
    "section": "YAMLヘッダー",
    "text": "YAMLヘッダー\n.Rmdファイル最上段に位置する文書の情報に関するデータ\n---\ntitle: \"はじめてのR Markdown\"\nauthor: \"関大花子\"\ndate: \"2022年 5月 12日\"\noutput: html_document\n---\n\ntitle: 文書のタイトル\n\nsubtitle:でサブタイトルも付けられる。\n\nauthor: 文書の作成者\ndate: 日付\n\ndate: `r Sys.Date()`に修正すると、Knitした日の日付が自動的につけられる。\n\noutput: 出力形式（このままで良い）\nその他オプション多数\n\nYAMLヘッダーの詳細はR Markdown Cheetsheetなどを参照"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-文章の改行",
    "href": "slide/slide05.html#markdownの文法-文章の改行",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: 文章の改行",
    "text": "Markdownの文法: 文章の改行\n\n2回改行\n\n\n\nInput\nこれは文章1です。\nこれは文章2です。\nOutput\nこれは文章1です。 これは文章2です。\n\n\n\nInput\nこれは文章1です。\n\nこれは文章2です。\nOutput\nこれは文章1です。\nこれは文章2です。"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-強調",
    "href": "slide/slide05.html#markdownの文法-強調",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: 強調",
    "text": "Markdownの文法: 強調\n\n英語の強調はイタリック、日本語の強調は太字を使用\n\nInput\n文章の一部を**太字**にしてみましょう。\n\nThe G7 consists of Canada, France, Germany, Italy, *Japan*, UK, and USA.\n\n~~取り消し線~~はあまり使わないかも。\n\n<u>アンダーライン</u>はHTMLタグを使います。\nOutput\n文章の一部を太字にしてみましょう。\nThe G7 consists of Canada, France, Germany, Italy, Japan, UK, and USA.\n取り消し線はあまり使わないかも。\nアンダーラインはHTMLタグを使います。"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-リンク",
    "href": "slide/slide05.html#markdownの文法-リンク",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: リンク",
    "text": "Markdownの文法: リンク\n\n[リンク文](URL)\n[]で囲まれた文章をクリックすると指定したURLへ移動\n\nInput\n[ここ](https://www.jaysong.net)をクリックすると、宋のHPへ移動します。\nOutput\nここをクリックすると、宋のHPへ移動します。"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-見出し",
    "href": "slide/slide05.html#markdownの文法-見出し",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: 見出し",
    "text": "Markdownの文法: 見出し\n\n# + 半角スペース + 見出し（#が多いほど小さくなる）\n\nInput\n# 見出し1 (ヘッディング1)\n## 見出し2 (ヘッディング2)\n### 見出し3 (ヘッディング3)\n#### 見出し4 (ヘッディング4)\nOutput\n\n見出し1 (ヘッディング1)\n\n\n見出し2 (ヘッディング2)\n\n\n見出し3 (ヘッディング3)\n\n\n見出し4 (ヘッディング4)"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-水平線",
    "href": "slide/slide05.html#markdownの文法-水平線",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: 水平線",
    "text": "Markdownの文法: 水平線\n\n任意の行に---を挿入\n章と章の区切り、節と節の区切りなどに使用\n\nInput\n文章1\n\n---\n\n文章2\nOutput\n文章1\n\n文章2"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-箇条書き順序なし",
    "href": "slide/slide05.html#markdownの文法-箇条書き順序なし",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: 箇条書き（順序なし）",
    "text": "Markdownの文法: 箇条書き（順序なし）\n\n* + 半角スペース + 文字列\n階層構造にする場合、*の前に半角スペースを3個以上入れる\n*の代わりに-も可\n\n\n\nInput\n* リスト1\n* リスト2\n   * リスト2-1\n      * リスト2-1-1\n      * リスト2-1-2\n   * リスト2-1\n* リスト3\n\n\n\nOutput\n\nリスト1\nリスト2\n\nリスト2-1\n\nリスト2-1-1\nリスト2-1-2\n\nリスト2-1\n\nリスト3"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-箇条書き順序付き",
    "href": "slide/slide05.html#markdownの文法-箇条書き順序付き",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: 箇条書き（順序付き）",
    "text": "Markdownの文法: 箇条書き（順序付き）\n\n1. + 半角スペース + 文字列\n1.の箇所は任意の数字でもOK。1.、2.、…も可\n階層構造にする場合、*の前に半角スペースを3個入れる\n\n\n\nInput\n1. リスト1\n2. リスト2\n   1. リスト2-1\n      1. リスト2-1-1\n      2. リスト2-1-2\n   2. リスト2-1\n3. リスト3\n\n\n\nOutput\n\nリスト1\nリスト2\n\nリスト2-1\n\nリスト2-1-1\nリスト2-1-2\n\nリスト2-1\n\nリスト3"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-数式",
    "href": "slide/slide05.html#markdownの文法-数式",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: 数式",
    "text": "Markdownの文法: 数式\n\n文中数式は$数式$、独立した行の数式は$$で囲む\n\\(\\LaTeX\\) の数式表記法を理解する必要がある\n\nInput\n文中の数式の例: $e = mc^2$\n\n独立した数式の例は、\n\n$$\ny_i \\sim \\text{Normal}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma).\n$$\n\nOutput\n文中の数式の例: \\(e = mc^2\\)\n独立した数式の例は、\n\\[\ny_i \\sim \\text{Normal}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma).\n\\]"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-表",
    "href": "slide/slide05.html#markdownの文法-表",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: 表",
    "text": "Markdownの文法: 表\n\n行は改行で、列は|で区切る\n1行目は表のヘッダーであり、|---|で区切る（-は1個以上でOK）\n\n|---|、または|:---|は左揃え、|---:|は右揃え、|:---:|は中央揃え\n\n\n\n\nInput\n|ID |Name   |Birth (Year)|Pref   |\n|:-:|-------|-----------:|-------|\n|1  |Ogura  |1852        |Tokyo  |\n|2  |Tsurumi|1858        |Tochigi|\n|3  |Yoshida|1858        |Fukuoka|\n|4  |Hotta  |1859        |Chiba  |\n|5  |Inoue  |1847        |Nagano |\n|6  |Tezuka |1862        |Tokyo  |\n|7  |Shikata|1857        |Saitama|\n|8  |Nomura |1855        |Gunma  |\n\n\n\nOutput\n\n\n\nID\nName\nBirth (Year)\nPref\n\n\n\n\n1\nOgura\n1852\nTokyo\n\n\n2\nTsurumi\n1858\nTochigi\n\n\n3\nYoshida\n1858\nFukuoka\n\n\n4\nHotta\n1859\nChiba\n\n\n5\nInoue\n1847\nNagano\n\n\n6\nTezuka\n1862\nTokyo\n\n\n7\nShikata\n1857\nSaitama\n\n\n8\nNomura\n1855\nGunma"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-コメント",
    "href": "slide/slide05.html#markdownの文法-コメント",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: コメント",
    "text": "Markdownの文法: コメント\n出力に影響されないコメントを入れる場合 * <!--と-->内に囲む * <!--と-->の間の文章は出力されない * 自分用のメモ、とりあえず出力させない内容などに使用 * チャンク内コメントは#（チャンクは後に解説）\n\n\nInput:\nこれは文章1です。\n\n<!--\nこれはコメントです。\n-->\n\nこれは文章2です。\n\n\n\nOutput:\nこれは文章1です。\n\nこれは文章2です。"
  },
  {
    "objectID": "slide/slide05.html#markdownの文法-その他",
    "href": "slide/slide05.html#markdownの文法-その他",
    "title": "ミクロ政治データ分析実習",
    "section": "Markdownの文法: その他",
    "text": "Markdownの文法: その他\n教科書第21章を参照\n\n図の挿入\n脚注\n引用など\nHTMLタグを直接入れることも可能\n\n出力形式がHTMLならJavaScriptも可\n\nR Markdown Cheetsheetも参照"
  },
  {
    "objectID": "slide/slide05.html#rコード-チャンクchunk",
    "href": "slide/slide05.html#rコード-チャンクchunk",
    "title": "ミクロ政治データ分析実習",
    "section": "Rコード: チャンク（Chunk）",
    "text": "Rコード: チャンク（Chunk）\nRのコードを挿入する領域\n\n```{r}と```で囲む\n\nチャンクの外にコードを書いても文章として認識する\n\nコードの出力 > 結果の出力の順番\n\n\nInputOutput\n\n\nここはチャンクの外\n\nここに書いたものは文章として扱われる。\n\n```{r}\nx <- 5 # 円の半径\nprint(3.14 * x^2)\n```\n\nここに書いたのも文章\n\n\nここはチャンクの外\nここに書いたものは文章として扱われる。\n\n\n[1] 78.5\n\n\nここに書いたのも文章"
  },
  {
    "objectID": "slide/slide05.html#rコード-チャンクのオプション",
    "href": "slide/slide05.html#rコード-チャンクのオプション",
    "title": "ミクロ政治データ分析実習",
    "section": "Rコード: チャンクのオプション",
    "text": "Rコード: チャンクのオプション\n{r}の箇所にオプションが指定可能（,の後）\n\nチャンクに名前を付ける: {r チャンクの名前}\n\nチャンク名の場合,は不要。オプションはチャンク名の後に付ける\n\nコードのみ出力し、結果は出力しない\n\n{r, eval = FALSE}\n\n結果のみ出力し、コードは出力しない\n\n{r, echo = FALSE}\n\n出力される図の幅を8インチ、高さを10インチに\n\n{r, fig.width = 5, fig.height = 10}\n\n出力される図を中央揃えに\n\n{r, fig.align = center}\n\n警告メッセージを隠す\n\n{r, warning = FALSE}\n\n他にも数十のオプションの指定が可能\n\n詳しくはR Markdown Cheetsheetを参照"
  },
  {
    "objectID": "slide/slide05.html#rコード-インラインコード",
    "href": "slide/slide05.html#rコード-インラインコード",
    "title": "ミクロ政治データ分析実習",
    "section": "Rコード: インラインコード",
    "text": "Rコード: インラインコード\n文章内にRコードの結果を埋め込む場合\n\n`rと`の間にコードを挿入\n\nInput:\n```{r}\nX <- c(2, 3, 5, 7, 11)\n```\n\n変数`X`の平均値は`r mean(X)`です。\nOutput:\n\nX <- c(2, 3, 5, 7, 11)\n\n変数Xの平均値は5.6です。\n\n\n参考) 単に`で囲まれたものはコードのように表示してくれるものの、そのコードは実行されない。文中に短いコードのみを入れたり、変数名、関数名を示す際に使う機能である。"
  },
  {
    "objectID": "slide/slide05.html#再現可能性と再生可能性",
    "href": "slide/slide05.html#再現可能性と再生可能性",
    "title": "ミクロ政治データ分析実習",
    "section": "再現可能性と再生可能性",
    "text": "再現可能性と再生可能性\n国里 (2020)による定義\n\n学会、分野によっては正反対の概念になる場合もある (Barba 2018)\n\n\n再生可能性 (Reproducibility)\n\n同じデータ + 同じ方法 = 同じ結果\nR Markdownの主な目的は再生可能性\n\n\n再現可能性 (Replicability)\n\n新しいデータ + 同じ方法 = 同じ結果\n新しいデータ + 違う方法 = 同じ結果\n\n\n\n参考文献\n\n国里愛彦. 2020.「再現可能な心理学研究入門」『専修大学人間科学論集:心理学篇』10. 21-33.\nLorena A. Barba. 2018. “Terminologies for Reproducible Research.” ArXiv. 1802.03311"
  },
  {
    "objectID": "slide/slide05.html#r-markdownと再生可能性",
    "href": "slide/slide05.html#r-markdownと再生可能性",
    "title": "ミクロ政治データ分析実習",
    "section": "R Markdownと再生可能性",
    "text": "R Markdownと再生可能性\n\n具体的にどのような手順で分析が行われたかが分かる\n\nコードを記録&公開\n\nコードに対する説明が付いている\n\n自分が書いたコードであっても、昔書いたコードは読みにくい\n過去、自分が行った分析の再生する出来ない場合も\n\n今、教壇に立っている人の話ではない\n\n\nコードと結果が同時に照会できる\n\nわざわざRを立ち上げなくても、その場で分析の手順が分かる"
  },
  {
    "objectID": "slide/slide05.html#再生可能な研究を目指して",
    "href": "slide/slide05.html#再生可能な研究を目指して",
    "title": "ミクロ政治データ分析実習",
    "section": "再生可能な研究を目指して",
    "text": "再生可能な研究を目指して\n\n可能な限り、詳細な説明を付ける\n\n文章領域では「以下のコードがどのような目的で書かれたコードであるか」などを明示する。\nチャンク内にもこまめにコメント（#）を付ける\n\n理想としては一行ごとにコメントを付ける\n\n\n\n悪い例 (悪くはないが、良くもない)\nx <- rep(NA, 5)\n良い例\nx <- rep(NA, 5) # 欠損値で埋められた長さ5のベクトル"
  },
  {
    "objectID": "slide/slide05.html#再生可能な研究を目指して-1",
    "href": "slide/slide05.html#再生可能な研究を目指して-1",
    "title": "ミクロ政治データ分析実習",
    "section": "再生可能な研究を目指して",
    "text": "再生可能な研究を目指して\n\nコードを分かりやすく書く\n\n長いオブジェクト名を避ける\n分かりやすいオブジェクト名\n適宜スペースと字下げを入れるなど\n読みやすいコードの書き方: 第4回の内容（教科書 第10.2章）\n\nデータについても詳細に書く\n\nどのように収集されたデータであるのか\nどのような変数があるのか"
  },
  {
    "objectID": "slide/slide05.html#課題",
    "href": "slide/slide05.html#課題",
    "title": "ミクロ政治データ分析実習",
    "section": "課題",
    "text": "課題\n今回以降の練習はR Markdownを利用する。\n\n今回課題用のプロジェクトを作成する。\nLMSの「第5回課題」から「問題ファイル（.Rmd形式）」ダウンロードし、プロジェクトのフォルダーにアップローロする。\nプロジェクトからRStudioを起動し、.Rmdファイルを開く\nKnitし、結果を確認する。\n本講義のサポートページの「課題 > 第5回課題」へアクセス\nサンプルのような体裁になるように問題ファイルを修正する。\n\n学籍番号・氏名は自分の学籍番号・氏名に直すこと。\n\n完成後、生成された.htmlファイルをダウンロードし、関大LMSに提出する。\n\nダウンロード方法はサポートページの「Rの使い方 > ファイル管理」を参照すること\n\n期限は2022年5月18日（水）の23時59分とする。\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide11.html#section",
    "href": "slide/slide11.html#section",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "{dplyr}: データの結合"
  },
  {
    "objectID": "slide/slide11.html#データの結合-行",
    "href": "slide/slide11.html#データの結合-行",
    "title": "ミクロ政治データ分析実習",
    "section": "データの結合: 行",
    "text": "データの結合: 行\nbind_rows()を利用: 変数名が一致する必要がある\n\n以下の例はいずれのdata.frameもID、Name、Scoreで構成されている。\n\nID、Name、Scoreの順番は一致しなくても良い（上のdata.frameの順番に調整される）。\n\n\n\n\n結合前\n\nData1\n\n  ID  Name Score\n1  1 Aさん    77\n2  2 Bさん    89\n3  3 Cさん    41\n\nData2\n\n  ID  Name Score\n1  4 Xさん    98\n2  5 Yさん    78\n\n\n\n\n\n結合後\n\nbind_rows(Data1, Data2)\n\n  ID  Name Score\n1  1 Aさん    77\n2  2 Bさん    89\n3  3 Cさん    41\n4  4 Xさん    98\n5  5 Yさん    78"
  },
  {
    "objectID": "slide/slide11.html#データの結合-行-1",
    "href": "slide/slide11.html#データの結合-行-1",
    "title": "ミクロ政治データ分析実習",
    "section": "データの結合: 行",
    "text": "データの結合: 行\n結合前のデータ識別変数の追加\n\n結合するデータをlist()でまとめ、.id引数を追加する\nlist()の内部では\"識別変数の値\" = 結合するデータと定義\n\n例) 結合後、Classという列を追加し、元々Data1だった行は\"1組\"、Data2だった行には\"2組\"を格納する。\n\nbind_rows(list(\"1組\" = Data1, \"2組\" = Data2),\n          .id = \"Class\")\n\n  Class ID  Name Score\n1   1組  1 Aさん    77\n2   1組  2 Bさん    89\n3   1組  3 Cさん    41\n4   2組  4 Xさん    98\n5   2組  5 Yさん    78"
  },
  {
    "objectID": "slide/slide11.html#データの結合-列",
    "href": "slide/slide11.html#データの結合-列",
    "title": "ミクロ政治データ分析実習",
    "section": "データの結合: 列",
    "text": "データの結合: 列\n*_join(): 結合に使う識別用の変数（キー変数）が必要（以下ではCity）\n\n\n結合前\n\n\n\n\nData1\n\n   City Pop Area\n1 Tokyo 927 2194\n2 Osaka 148  828\n3 Kochi  76 7104\n\n\n\n\n\n結合前\n\n\n\n\nData2\n\n   City     Food\n1 Kochi   Katsuo\n2 Osaka Takoyaki\n3 Tokyo    Ramen\n\n\n\n\n結合後\n\nleft_join(Data1, Data2, by = \"City\")\n\n   City Pop Area     Food\n1 Tokyo 927 2194    Ramen\n2 Osaka 148  828 Takoyaki\n3 Kochi  76 7104   Katsuo"
  },
  {
    "objectID": "slide/slide11.html#列結合に使う関数",
    "href": "slide/slide11.html#列結合に使う関数",
    "title": "ミクロ政治データ分析実習",
    "section": "列結合に使う関数",
    "text": "列結合に使う関数\n識別子は両データに含まれているが、一致しないケースがある。\n\nどのデータの識別子を優先するか\n\n\n\nleft_join()\n\n左側のデータの識別子を優先する\n空欄は欠損値として埋められる\n\nright_join()\n\n右側のデータの識別子を優先する\n空欄は欠損値として埋められる\n\ninner_join()\n\n両データの識別子に共通する行のみを残して結合\n\nfull_join()\n\n両データの識別子に存在する行すべて結合\n空欄は欠損値として埋められる"
  },
  {
    "objectID": "slide/slide11.html#left_joinの仕組み",
    "href": "slide/slide11.html#left_joinの仕組み",
    "title": "ミクロ政治データ分析実習",
    "section": "left_join()の仕組み",
    "text": "left_join()の仕組み\nleft_join(データ1, データ2, by = \"識別用変数名\")\n\nデータ1を温存する\n欠損しているセルは欠損値（NA）で埋められる"
  },
  {
    "objectID": "slide/slide11.html#right_joinの仕組み",
    "href": "slide/slide11.html#right_joinの仕組み",
    "title": "ミクロ政治データ分析実習",
    "section": "right_join()の仕組み",
    "text": "right_join()の仕組み\nright_join(データ1, データ2, by = \"識別用変数名\")\n\nデータ2を温存する\n欠損しているセルは欠損値（NA）で埋められる"
  },
  {
    "objectID": "slide/slide11.html#inner_joinの仕組み",
    "href": "slide/slide11.html#inner_joinの仕組み",
    "title": "ミクロ政治データ分析実習",
    "section": "inner_join()の仕組み",
    "text": "inner_join()の仕組み\ninner_join(データ1, データ2, by = \"識別用変数名\")\n\nデータ1とデータ2で識別子が共通する行のみ結合"
  },
  {
    "objectID": "slide/slide11.html#full_joinの仕組み",
    "href": "slide/slide11.html#full_joinの仕組み",
    "title": "ミクロ政治データ分析実習",
    "section": "full_join()の仕組み",
    "text": "full_join()の仕組み\nfull_join(データ1, データ2, by = \"識別用変数名\")\n\nデータ1とデータ2をすべて温存\n欠損しているセルは欠損値（NA）で埋められる"
  },
  {
    "objectID": "slide/slide11.html#比較-1",
    "href": "slide/slide11.html#比較-1",
    "title": "ミクロ政治データ分析実習",
    "section": "比較 (1)",
    "text": "比較 (1)\n\ndf1 <- tibble(Pref  = c(\"東京\", \"大阪\", \"京都\"),\n              Score = c(3.5, 4, 4.2))\ndf2 <- tibble(Pref  = c(\"東京\", \"大阪\", \"高知\"),\n              N     = c(3220, 1325, 111))\n\n\n\n\ndf1\n\n# A tibble: 3 × 2\n  Pref  Score\n  <chr> <dbl>\n1 東京    3.5\n2 大阪    4  \n3 京都    4.2\n\n\n\n\n\n\ndf2\n\n# A tibble: 3 × 2\n  Pref      N\n  <chr> <dbl>\n1 東京   3220\n2 大阪   1325\n3 高知    111"
  },
  {
    "objectID": "slide/slide11.html#比較-2",
    "href": "slide/slide11.html#比較-2",
    "title": "ミクロ政治データ分析実習",
    "section": "比較 (2)",
    "text": "比較 (2)\nby = \"識別用の変数名\"は複数用いることも可能（例: 都道府県名&年度で結合）\n\nby = c(\"識別用の変数名1\", \"識別用の変数名2\")\n\n\n\n\nleft_join(df1, df2, by = \"Pref\")\n\n# A tibble: 3 × 3\n  Pref  Score     N\n  <chr> <dbl> <dbl>\n1 東京    3.5  3220\n2 大阪    4    1325\n3 京都    4.2    NA\n\nright_join(df1, df2, by = \"Pref\")\n\n# A tibble: 3 × 3\n  Pref  Score     N\n  <chr> <dbl> <dbl>\n1 東京    3.5  3220\n2 大阪    4    1325\n3 高知   NA     111\n\n\n\n\n\n\ninner_join(df1, df2, by = \"Pref\")\n\n# A tibble: 2 × 3\n  Pref  Score     N\n  <chr> <dbl> <dbl>\n1 東京    3.5  3220\n2 大阪    4    1325\n\nfull_join(df1, df2, by = \"Pref\")\n\n# A tibble: 4 × 3\n  Pref  Score     N\n  <chr> <dbl> <dbl>\n1 東京    3.5  3220\n2 大阪    4    1325\n3 京都    4.2    NA\n4 高知   NA     111"
  },
  {
    "objectID": "slide/slide11.html#section-1",
    "href": "slide/slide11.html#section-1",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "{tidyr}: 整然データ構造"
  },
  {
    "objectID": "slide/slide11.html#整然データ構造とは",
    "href": "slide/slide11.html#整然データ構造とは",
    "title": "ミクロ政治データ分析実習",
    "section": "整然データ構造とは",
    "text": "整然データ構造とは\nTidy data: Hadley Wickhamが提唱したデータ分析に適したデータ構造\n\n\n\n整然データ、簡潔データと呼ばれる\nパソコンにとって読みやすいデータ \\(\\neq\\) 人間にとって読みやすいデータ\n{tidyr}パッケージは雑然データを整然データへ変形するパッケージ\n次回紹介する{ggplot2}は整然データを前提として開発されたパッケージ\n\n4つの原則\n\n1つの列は、1つの変数を表す\n1つの行は、1つの観測を表す\n1つのセルは、1つの値を表す\n1つの表は、1つの観測単位をもつ"
  },
  {
    "objectID": "slide/slide11.html#原則1-1列1変数",
    "href": "slide/slide11.html#原則1-1列1変数",
    "title": "ミクロ政治データ分析実習",
    "section": "原則1: 1列1変数",
    "text": "原則1: 1列1変数\n\n1列には1つの変数のみ\n\n3人の被験者に対し、薬を飲む前後の数学成績を測定した場合\n薬を飲む前: Control / 薬を飲んだ後: Treatment"
  },
  {
    "objectID": "slide/slide11.html#原則2-1行1観察",
    "href": "slide/slide11.html#原則2-1行1観察",
    "title": "ミクロ政治データ分析実習",
    "section": "原則2: 1行1観察",
    "text": "原則2: 1行1観察\n\n1観察 \\(\\neq\\) 1値\n\n観察: 観察単位ごとに測定された値の集合\n観察単位: 人、企業、国、時間など\n\n以下の例の場合、観察単位は「人 \\(\\times\\) 時間 」"
  },
  {
    "objectID": "slide/slide11.html#原則3-1セル1値",
    "href": "slide/slide11.html#原則3-1セル1値",
    "title": "ミクロ政治データ分析実習",
    "section": "原則3: 1セル1値",
    "text": "原則3: 1セル1値\n\nこの原則に反するケースは多くない\n例外) 1セルに2020年8月24日という値がある場合\n\n分析の目的によっては年月日を全て異なるセルに割り当てる必要もある\nこのままで問題とならないケースも"
  },
  {
    "objectID": "slide/slide11.html#原則4-1表1単位",
    "href": "slide/slide11.html#原則4-1表1単位",
    "title": "ミクロ政治データ分析実習",
    "section": "原則4: 1表1単位",
    "text": "原則4: 1表1単位\n\n政府統計: 日本を代表する雑然データ\n\nデータの中身は良いが、構造が…\n表に「国」、「都道府県」、「市区町村」、「行政区」の単位が混在"
  },
  {
    "objectID": "slide/slide11.html#原則4-1表1単位-1",
    "href": "slide/slide11.html#原則4-1表1単位-1",
    "title": "ミクロ政治データ分析実習",
    "section": "原則4: 1表1単位",
    "text": "原則4: 1表1単位\n\n「1表1単位」原則を満たさない場合、filter()関数等で、異なる単位の行を除外\n\n以降、解説する{tidyr}でなく、{dplyr}で対応可能"
  },
  {
    "objectID": "slide/slide11.html#tidyrパッケージ",
    "href": "slide/slide11.html#tidyrパッケージ",
    "title": "ミクロ政治データ分析実習",
    "section": "{tidyr}パッケージ",
    "text": "{tidyr}パッケージ\n\n\n\n\n\n\n\n\n\n雑然データから整然データへ変形をサポートするパッケージ\n\npivot_longer(): Wide型データからLong型データへ\n\n原則1・2に反するデータを整然データへ変換 (最も頻繁に使われる)\n\npivot_wider(): Long型データからWide型データへ\n\n人間には雑然データの方が読みやすい場合がある（原則1の例）\n\nseparate(): セルの分割（「年月日」から「年」、「月」、「日」へ）\n\n原則3に反するデータを整然データへ変換\n\n原則4に反するデータは単位がずれている行をfilter()などで除外"
  },
  {
    "objectID": "slide/slide11.html#実習用データ",
    "href": "slide/slide11.html#実習用データ",
    "title": "ミクロ政治データ分析実習",
    "section": "実習用データ",
    "text": "実習用データ\nMicro11.csv: 中国、日本、韓国、モンゴル、台湾の5日間COVID-19新規感染者数\n\nサポートページからダウンロード\nデータ出典:Johns Hopkins University Center for Systems Science and Engineering\n\n\nCOVID_df <- read_csv(\"Data/Micro11.csv\")\nCOVID_df\n\n# A tibble: 5 × 7\n  Country  Population `2022/06/09` `2022/06/10` `2022/06/11` `2022/06/12`\n  <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n1 China    1447470092          819          848         1114          990\n2 Japan     126476461        16788        15584        15338        13381\n3 Korea      51269185         9304         8428         7382         3828\n4 Mongolia    3278290            0            0            0            0\n5 Taiwan     23816775        72846        68293        79616        50567\n# … with 1 more variable: `2022/06/13` <dbl>"
  },
  {
    "objectID": "slide/slide11.html#このデータの問題点",
    "href": "slide/slide11.html#このデータの問題点",
    "title": "ミクロ政治データ分析実習",
    "section": "このデータの問題点",
    "text": "このデータの問題点\n\n観察単位は? 測定した変数は?\n\n観察単位: 地域 \\(\\times\\) 時間\n変数: 新規感染者数、人口\n2つの観察時点 + 2つの変数 = 計4つの変数 \\(\\rightarrow\\) 整然データ\n\n新規感染者数が5列にわたって格納されている \\(\\rightarrow\\) 雑然データ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\nPopulation\n2022/06/09\n2022/06/10\n2022/06/11\n2022/06/12\n2022/06/13\n\n\n\n\nChina\n1447470092\n819\n848\n1114\n990\n957\n\n\nJapan\n126476461\n16788\n15584\n15338\n13381\n7942\n\n\nKorea\n51269185\n9304\n8428\n7382\n3828\n9768\n\n\nMongolia\n3278290\n0\n0\n0\n0\n1055\n\n\nTaiwan\n23816775\n72846\n68293\n79616\n50567\n45100"
  },
  {
    "objectID": "slide/slide11.html#wide型からlong型へ",
    "href": "slide/slide11.html#wide型からlong型へ",
    "title": "ミクロ政治データ分析実習",
    "section": "Wide型からLong型へ",
    "text": "Wide型からLong型へ\n\n整然なCOVID_dfの構造は?\n\n5列を1列にまとめるため、縦に長くなる\nWideからLongへ\n\n\n\n\n\n\n\nCountry\nPopulation\nDate\nNew_Cases\n\n\n\n\nChina\n1447470092\n2022/06/09\n819\n\n\nChina\n1447470092\n2022/06/10\n848\n\n\nChina\n1447470092\n2022/06/11\n1114\n\n\nChina\n1447470092\n2022/06/12\n990\n\n\nChina\n1447470092\n2022/06/13\n957\n\n\nJapan\n126476461\n2022/06/09\n16788\n\n\nJapan\n126476461\n2022/06/10\n15584\n\n\nJapan\n126476461\n2022/06/11\n15338\n\n\nJapan\n126476461\n2022/06/12\n13381\n\n\nJapan\n126476461\n2022/06/13\n7942\n\n\nKorea\n51269185\n2022/06/09\n9304\n\n\nKorea\n51269185\n2022/06/10\n8428\n\n\nKorea\n51269185\n2022/06/11\n7382\n\n\nKorea\n51269185\n2022/06/12\n3828\n\n\nKorea\n51269185\n2022/06/13\n9768\n\n\nMongolia\n3278290\n2022/06/09\n0\n\n\nMongolia\n3278290\n2022/06/10\n0\n\n\nMongolia\n3278290\n2022/06/11\n0\n\n\nMongolia\n3278290\n2022/06/12\n0\n\n\nMongolia\n3278290\n2022/06/13\n1055\n\n\nTaiwan\n23816775\n2022/06/09\n72846\n\n\nTaiwan\n23816775\n2022/06/10\n68293\n\n\nTaiwan\n23816775\n2022/06/11\n79616\n\n\nTaiwan\n23816775\n2022/06/12\n50567\n\n\nTaiwan\n23816775\n2022/06/13\n45100"
  },
  {
    "objectID": "slide/slide11.html#pivot_longer-wide-to-long",
    "href": "slide/slide11.html#pivot_longer-wide-to-long",
    "title": "ミクロ政治データ分析実習",
    "section": "pivot_longer(): Wide to Long",
    "text": "pivot_longer(): Wide to Long\n\ncolsはdplyr::select()と同じ使い方\n\nc()で個別の変数名を指定することも、:やstarts_with()を使うこともOK\n注意: 変数名が数字で始まったり、記号が含まれている場合、変数名を`か\"で囲む\n\n列名が日付の場合、数字で始まったり、記号（/や-など）が含まれるケースが多い\n\n\n\n\nデータ %>%\n  pivot_longer(cols      = 変数が格納されている列,\n               names_to  = \"元の列名が入る変数名\",\n               values_to = \"変数の値が入る変数名\")"
  },
  {
    "objectID": "slide/slide11.html#pivot_longer-wideからlongへ",
    "href": "slide/slide11.html#pivot_longer-wideからlongへ",
    "title": "ミクロ政治データ分析実習",
    "section": "pivot_longer(): WideからLongへ",
    "text": "pivot_longer(): WideからLongへ\n\ncols = starts_with(\"2022\")もOK\n\n\nCOVID_Long <- COVID_df %>% \n  pivot_longer(cols      = \"2022/06/09\":\"2022/06/13\",\n               names_to  = \"Date\",\n               values_to = \"New_Cases\")\nCOVID_Long\n\n# A tibble: 25 × 4\n   Country Population Date       New_Cases\n   <chr>        <dbl> <chr>          <dbl>\n 1 China   1447470092 2022/06/09       819\n 2 China   1447470092 2022/06/10       848\n 3 China   1447470092 2022/06/11      1114\n 4 China   1447470092 2022/06/12       990\n 5 China   1447470092 2022/06/13       957\n 6 Japan    126476461 2022/06/09     16788\n 7 Japan    126476461 2022/06/10     15584\n 8 Japan    126476461 2022/06/11     15338\n 9 Japan    126476461 2022/06/12     13381\n10 Japan    126476461 2022/06/13      7942\n# … with 15 more rows"
  },
  {
    "objectID": "slide/slide11.html#pivot_wider-longからwideへ",
    "href": "slide/slide11.html#pivot_wider-longからwideへ",
    "title": "ミクロ政治データ分析実習",
    "section": "pivot_wider(): LongからWideへ",
    "text": "pivot_wider(): LongからWideへ\n\nLong型をWide型へ戻す関数\n\n人間にとってはLong型よりWide型の方が読みやすいケースも多い\n1列に2つの変数が入っている場合もある\n\n\n\nCOVID_Long %>%\n  pivot_wider(names_from  = \"Date\",\n              values_from = \"New_Cases\")\n\n# A tibble: 5 × 7\n  Country  Population `2022/06/09` `2022/06/10` `2022/06/11` `2022/06/12`\n  <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n1 China    1447470092          819          848         1114          990\n2 Japan     126476461        16788        15584        15338        13381\n3 Korea      51269185         9304         8428         7382         3828\n4 Mongolia    3278290            0            0            0            0\n5 Taiwan     23816775        72846        68293        79616        50567\n# … with 1 more variable: `2022/06/13` <dbl>"
  },
  {
    "objectID": "slide/slide11.html#separate-列の分割",
    "href": "slide/slide11.html#separate-列の分割",
    "title": "ミクロ政治データ分析実習",
    "section": "separate(): 列の分割",
    "text": "separate(): 列の分割\nCOVID_LongのDate列をYear、Month、Dayに分けたい\n\n例) Date列を\"/\"を基準に分割する\n\n\nデータ %>%\n  separate(col  = \"分割する列名\",\n           into = c(\"分割後の列名1\", \"分割後の列名2\", ...),\n           sep  = \"分割する基準\")"
  },
  {
    "objectID": "slide/slide11.html#separate-列の分割-1",
    "href": "slide/slide11.html#separate-列の分割-1",
    "title": "ミクロ政治データ分析実習",
    "section": "separate(): 列の分割",
    "text": "separate(): 列の分割\n\nCOVID_Long %>%\n  separate(col  = \"Date\",\n           into = c(\"Year\", \"Month\", \"Day\"),\n           sep  = \"/\")\n\n# A tibble: 25 × 6\n   Country Population Year  Month Day   New_Cases\n   <chr>        <dbl> <chr> <chr> <chr>     <dbl>\n 1 China   1447470092 2022  06    09          819\n 2 China   1447470092 2022  06    10          848\n 3 China   1447470092 2022  06    11         1114\n 4 China   1447470092 2022  06    12          990\n 5 China   1447470092 2022  06    13          957\n 6 Japan    126476461 2022  06    09        16788\n 7 Japan    126476461 2022  06    10        15584\n 8 Japan    126476461 2022  06    11        15338\n 9 Japan    126476461 2022  06    12        13381\n10 Japan    126476461 2022  06    13         7942\n# … with 15 more rows"
  },
  {
    "objectID": "slide/slide11.html#列の分割番外編-特定の記号がない場合",
    "href": "slide/slide11.html#列の分割番外編-特定の記号がない場合",
    "title": "ミクロ政治データ分析実習",
    "section": "列の分割（番外編）: 特定の記号がない場合",
    "text": "列の分割（番外編）: 特定の記号がない場合\n例) City_DataのCity列が「都道府県名+市区町村」\n\n「最初の3文字」と「残り」で分割することは出来ない（神奈川、和歌山、鹿児島）\n任意の2文字の後に「都」、「道」、「府」、「県」が付くか、任意の3文字の後に「県」が付く箇所を見つけて分割\n\nかなり複雑\n\n\n\n\n# A tibble: 4 × 2\n  City                Pop\n  <chr>             <dbl>\n1 北海道音威子府村    693\n2 大阪府高槻市     347424\n3 広島県府中市      36471\n4 鹿児島県指宿市    38207"
  },
  {
    "objectID": "slide/slide11.html#列の分割番外編-特定の記号がない場合続",
    "href": "slide/slide11.html#列の分割番外編-特定の記号がない場合続",
    "title": "ミクロ政治データ分析実習",
    "section": "列の分割（番外編）: 特定の記号がない場合（続）",
    "text": "列の分割（番外編）: 特定の記号がない場合（続）\n正則表現（regular expression）の知識が必要\n\nテキスト分析に興味があるなら必須（前期・後期含めて、本講義では解説しない）\n\n\nCity_Data %>%\n   # 任意の2文字の後に「都道府県」のいずれかが来るか、\n   # 任意の3文字の後に「県」が来たら、そこまでをブロック1、残りをブロック2とする\n   # Cityの値を「ブロック1-ブロック2」に置換する\n   mutate(City = str_replace(City, \"^(.{2}[都道府県]|.{3}県)(.+)\", \n                             \"\\\\1-\\\\2\")) %>%\n   # 「-」を基準に列を分割\n   separate(col  = \"City\", into = c(\"Pref\", \"City\"), sep  = \"-\")\n\n# A tibble: 4 × 3\n  Pref     City          Pop\n  <chr>    <chr>       <dbl>\n1 北海道   音威子府村    693\n2 大阪府   高槻市     347424\n3 広島県   府中市      36471\n4 鹿児島県 指宿市      38207"
  },
  {
    "objectID": "slide/slide11.html#tidyrとdplyrの組み合わせ",
    "href": "slide/slide11.html#tidyrとdplyrの組み合わせ",
    "title": "ミクロ政治データ分析実習",
    "section": "{tidyr}と{dplyr}の組み合わせ",
    "text": "{tidyr}と{dplyr}の組み合わせ\n{tidyr}と{dplyr}を組み合わせることも可能\n\n例) 100万人当たりの新規感染者数を計算し、国ごとに平均値を計算\n\n\nCOVID_df %>% \n  pivot_longer(cols      = \"2022/06/09\":\"2022/06/13\",\n               names_to  = \"Date\",\n               values_to = \"New_Cases\") %>%\n   mutate(New_Case_per_1M = New_Cases / Population * 1000000) %>%\n   group_by(Country) %>%\n   summarise(New_Case_per_1M = mean(New_Case_per_1M))\n\n# A tibble: 5 × 2\n  Country  New_Case_per_1M\n  <chr>              <dbl>\n1 China              0.653\n2 Japan            109.   \n3 Korea            151.   \n4 Mongolia          64.4  \n5 Taiwan          2657."
  },
  {
    "objectID": "slide/slide11.html#section-2",
    "href": "slide/slide11.html#section-2",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "まとめ"
  },
  {
    "objectID": "slide/slide11.html#データハンドリングに慣れるためには",
    "href": "slide/slide11.html#データハンドリングに慣れるためには",
    "title": "ミクロ政治データ分析実習",
    "section": "データハンドリングに慣れるためには",
    "text": "データハンドリングに慣れるためには\n\nとりあえず、たくさんのデータをいじってみる\nたくさんのエラーメッセージに出会うこと\nパイプ（%>%）を使いすぎないように\n\n中級以上になると、自分が書いたコードの結果が予想できるため、たくさんのパイプを使っても問題は大きくない\n一方、初心者の場合、パイプを使いすぎず、2〜3回ごとに別途のオブジェクトとして保存したり、結果を確認していくこと\nパイプが多すぎるとどこがエラーの原因かの特定が困難に（慣れたらすぐに見つかるが）"
  },
  {
    "objectID": "slide/slide11.html#長過ぎるコードブロックの例",
    "href": "slide/slide11.html#長過ぎるコードブロックの例",
    "title": "ミクロ政治データ分析実習",
    "section": "長過ぎるコードブロックの例",
    "text": "長過ぎるコードブロックの例\n慣れたらこれくらいは長い方ではないが…\n\nCOVID_df %>% \n  pivot_longer(cols      = \"2022/06/09\":\"2022/06/13\",\n               names_to  = \"Date\",\n               values_to = \"New_Cases\") %>%\n  mutate(New_Case_per_1M = New_Cases / Population * 1000000,\n         Country         = recode(Country,\n                                  \"China\"    = \"中国\",\n                                  \"Japan\"    = \"日本\",\n                                  \"Korea\"    = \"韓国\",\n                                  \"Mongolia\" = \"モンゴル\",\n                                  \"Taiwan\"   = \"台湾\"),\n         Country         = factor(Country, levels = c(\"中国\", \"日本\", \"韓国\", \n                                                      \"モンゴル\", \"台湾\")),\n         Date            = as.Date(Date),\n         Date            = format(Date, \"%Y-%m-%d\")) %>%\n  ggplot(aes(x = Date, y = New_Case_per_1M, group = Country, color = Country)) +\n  geom_line(size = 2) +\n  labs(x = \"日付\", y = \"100万人当たり新規感染者数 (人)\", color = \"国\") +\n  theme_minimal(base_size = 16) +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "slide/slide11.html#来週以降の内容",
    "href": "slide/slide11.html#来週以降の内容",
    "title": "ミクロ政治データ分析実習",
    "section": "来週以降の内容",
    "text": "来週以降の内容\n次回からは{ggplot2}を利用したデータの可視化方法を紹介\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide10.html#section",
    "href": "slide/slide10.html#section",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "データのグルーピングと要約"
  },
  {
    "objectID": "slide/slide10.html#目標",
    "href": "slide/slide10.html#目標",
    "title": "ミクロ政治データ分析実習",
    "section": "目標",
    "text": "目標\n\n変数の記述統計量を計算する\n\n記述統計量: 平均値、中央値、標準偏差、分散、ケース数など\n\nグループごとに記述統計量を計算する\n\n例) 大陸ごとに政治的権利（FH_PR）と市民的自由（FH_CL）の平均値を計算する\n\n\n# A tibble: 5 × 3\n  Continent Politial_Right Civil_Liberty\n  <chr>              <dbl>         <dbl>\n1 Africa              15.8          25.8\n2 America             29.4          42.6\n3 Asia                14.7          24.2\n4 Europe              31.9          47.6\n5 Oceania             31.8          47.2"
  },
  {
    "objectID": "slide/slide10.html#記述統計量",
    "href": "slide/slide10.html#記述統計量",
    "title": "ミクロ政治データ分析実習",
    "section": "記述統計量",
    "text": "記述統計量\n変数が持つ情報を要約した数値\n元の情報:\n\nMathScore <- c(82, 45, 69, 94, 88, 73, NA, 51, 90, 63)\n\n\n\nMathScoreを代表する値\n\n# 平均値\nmean(MathScore, na.rm = TRUE) \n\n[1] 72.77778\n\n# 中央値\nmedian(MathScore, na.rm = TRUE)\n\n[1] 73\n\n\n\n\n\nMathScoreのばらつきの具合\n\n# 不偏分散\nvar(MathScore, na.rm = TRUE)\n\n[1] 302.4444\n\n# 不偏標準偏差\nsd(MathScore, na.rm = TRUE)\n\n[1] 17.39093\n\n# 四分位範囲\nIQR(MathScore, na.rm = TRUE)\n\n[1] 25"
  },
  {
    "objectID": "slide/slide10.html#summariseの使い方",
    "href": "slide/slide10.html#summariseの使い方",
    "title": "ミクロ政治データ分析実習",
    "section": "summarise()の使い方",
    "text": "summarise()の使い方\nsummarise(): 記述統計量を計算する{dplyr}の関数\nデータフレーム %>%\n  summarise(記述統計の関数(変数名, ...))\n記述統計の関数の例\n\nmean(): 平均値\nmedian(): 中央値\nsd(): 不偏標準偏差\nvar(): 不偏分散\nIQR(): 四分位範囲\nmin()、max(): 最小値と最大値\nn(): ケース数（引数不要）\nその他（教科書第13.1.2章）"
  },
  {
    "objectID": "slide/slide10.html#記述統計量の計算1",
    "href": "slide/slide10.html#記述統計量の計算1",
    "title": "ミクロ政治データ分析実習",
    "section": "記述統計量の計算（1）",
    "text": "記述統計量の計算（1）\n\nlibrary(tidyverse)\ndf <- read_csv(\"Data/Micro08.csv\") # 第8回の実習用データ\n\n例) dfのPopulationとAreaの平均値（mean()）を計算\n\ndf %>%\n  summarise(mean(Population),\n            mean(Area))\n\n# A tibble: 1 × 2\n  `mean(Population)` `mean(Area)`\n               <dbl>        <dbl>\n1          41737773.      696069."
  },
  {
    "objectID": "slide/slide10.html#記述統計量の計算2",
    "href": "slide/slide10.html#記述統計量の計算2",
    "title": "ミクロ政治データ分析実習",
    "section": "記述統計量の計算（2）",
    "text": "記述統計量の計算（2）\nsummarise()内に異なる関数を使うことも可能\n例) dfのPopulationとAreaの平均値（mean()）と標準偏差（sd()）を計算\n\ndf %>%\n  summarise(mean(Population),\n            sd(Population),\n            mean(Area),\n            sd(Area))\n\n# A tibble: 1 × 4\n  `mean(Population)` `sd(Population)` `mean(Area)` `sd(Area)`\n               <dbl>            <dbl>        <dbl>      <dbl>\n1          41737773.       151270298.      696069.   1872412."
  },
  {
    "objectID": "slide/slide10.html#出力された結果をより見やすく",
    "href": "slide/slide10.html#出力された結果をより見やすく",
    "title": "ミクロ政治データ分析実習",
    "section": "出力された結果をより見やすく",
    "text": "出力された結果をより見やすく\nsummarise()内に出力される結果の列名 = 関数()を指定\n例) dfのPopulationとAreaの平均値（mean()）と標準偏差（sd()）を計算し、結果の列名をMean_Pop、SD_Popなどとする\n\nPop_Area_df <- df %>%\n  summarise(Mean_Pop  = mean(Population),\n            SD_Pop    = sd(Population),\n            Mean_Area = mean(Area),\n            SD_Area   = sd(Area))\nPop_Area_df\n\n# A tibble: 1 × 4\n   Mean_Pop     SD_Pop Mean_Area  SD_Area\n      <dbl>      <dbl>     <dbl>    <dbl>\n1 41737773. 151270298.   696069. 1872412."
  },
  {
    "objectID": "slide/slide10.html#グループごとの記述統計量1",
    "href": "slide/slide10.html#グループごとの記述統計量1",
    "title": "ミクロ政治データ分析実習",
    "section": "グループごとの記述統計量（1）",
    "text": "グループごとの記述統計量（1）\n{dplyr}を使わずに大陸ごとのPPP_per_capitaの平均値を計算する例\n\nPPP_per_capitaは欠損値が含まれているため、na.rm = TRUEを指定（指定しないと結果はNAとなる）\n\n\nmean(df$PPP_per_capita[df$Continent == \"Africa\"], na.rm = TRUE)\n\n[1] 5667.087\n\nmean(df$PPP_per_capita[df$Continent == \"America\"], na.rm = TRUE)\n\n[1] 18100.29\n\nmean(df$PPP_per_capita[df$Continent == \"Asia\"], na.rm = TRUE)\n\n[1] 22728.13\n\nmean(df$PPP_per_capita[df$Continent == \"Europe\"], na.rm = TRUE)\n\n[1] 37782.59\n\nmean(df$PPP_per_capita[df$Continent == \"Oceania\"], na.rm = TRUE)\n\n[1] 27572.65"
  },
  {
    "objectID": "slide/slide10.html#グループごとの記述統計量2",
    "href": "slide/slide10.html#グループごとの記述統計量2",
    "title": "ミクロ政治データ分析実習",
    "section": "グループごとの記述統計量（2）",
    "text": "グループごとの記述統計量（2）\n{dplyr}のgroup_by()を使用\n\nデータフレーム名 %>%\n  group_by(グループ化する変数名) %>%\n  summarise(...)\n\n例) dfのContinentでデータをグループ化し、PPP_per_capitaの平均値を計算\n\n# PPP_per_capitaが欠損している国もあるので、na.rm = TRUEを追加\ndf %>%\n  group_by(Continent) %>%\n  summarise(Mean_PPP = mean(PPP_per_capita, na.rm = TRUE))\n\n# A tibble: 5 × 2\n  Continent Mean_PPP\n  <chr>        <dbl>\n1 Africa       5667.\n2 America     18100.\n3 Asia        22728.\n4 Europe      37783.\n5 Oceania     27573."
  },
  {
    "objectID": "slide/slide10.html#複数の変数でグルーピング",
    "href": "slide/slide10.html#複数の変数でグルーピング",
    "title": "ミクロ政治データ分析実習",
    "section": "複数の変数でグルーピング",
    "text": "複数の変数でグルーピング\n例) dfのContinentとG20でデータをグループ化し、HDI_2018の平均値を計算\n\ndf %>%\n  group_by(Continent, G20) %>%\n  summarise(Mean_HDI = mean(HDI_2018, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Continent'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 10 × 3\n# Groups:   Continent [5]\n   Continent   G20 Mean_HDI\n   <chr>     <dbl>    <dbl>\n 1 Africa        0    0.550\n 2 Africa        1    0.705\n 3 America       0    0.727\n 4 America       1    0.84 \n 5 Asia          0    0.710\n 6 Asia          1    0.798\n 7 Europe        0    0.859\n 8 Europe        1    0.877\n 9 Oceania       0    0.729\n10 Oceania       1    0.938"
  },
  {
    "objectID": "slide/slide10.html#グルービング後のsummarise",
    "href": "slide/slide10.html#グルービング後のsummarise",
    "title": "ミクロ政治データ分析実習",
    "section": "グルービング後のsummarise()",
    "text": "グルービング後のsummarise()\n謎のメッセージが出力される\n## `summarise()` has grouped output by 'Continent'. You can override using \nthe `.groups` argument.\nとりあえず、group_by()の後にsummarise()を使う場合、summarise()の最後に.groups = \"drop\"を追加する。\n\n理由は割愛するが、詳細は教科書第13.2章を参照\n多くの場合、メッセージが出力されるだけで、問題が生じることはあまりない。\nしかし、複数の変数でグルーピングしたり、記述統計量が複数計算される関数（quantile()など）を使う場合、問題が生じる可能性あり\n\n特にsummarise()の後に更にパイプ（%>%）を使って計算を続ける場合\n\nとりあえず、.groups = \"drop\"をしておけば安全"
  },
  {
    "objectID": "slide/slide10.html#groups-dropを追加する",
    "href": "slide/slide10.html#groups-dropを追加する",
    "title": "ミクロ政治データ分析実習",
    "section": ".groups = \"drop\"を追加する",
    "text": ".groups = \"drop\"を追加する\n謎のメッセージが出力されなくなる\n\ndf %>%\n  group_by(Continent, G20) %>%\n  summarise(Mean_HDI = mean(HDI_2018, na.rm = TRUE),\n            .groups  = \"drop\")\n\n# A tibble: 10 × 3\n   Continent   G20 Mean_HDI\n   <chr>     <dbl>    <dbl>\n 1 Africa        0    0.550\n 2 Africa        1    0.705\n 3 America       0    0.727\n 4 America       1    0.84 \n 5 Asia          0    0.710\n 6 Asia          1    0.798\n 7 Europe        0    0.859\n 8 Europe        1    0.877\n 9 Oceania       0    0.729\n10 Oceania       1    0.938"
  },
  {
    "objectID": "slide/slide10.html#便利な関数-グループごとのケース数を計算",
    "href": "slide/slide10.html#便利な関数-グループごとのケース数を計算",
    "title": "ミクロ政治データ分析実習",
    "section": "便利な関数) グループごとのケース数を計算",
    "text": "便利な関数) グループごとのケース数を計算\nsummarise()の中にn()を使用\n\ndf %>%\n  group_by(Continent) %>%\n  summarise(Mean_PPP = mean(PPP_per_capita, na.rm = TRUE),\n            SD_PPP   = sd(PPP_per_capita, na.rm = TRUE),\n            Cases    = n())\n\n# A tibble: 5 × 4\n  Continent Mean_PPP SD_PPP Cases\n  <chr>        <dbl>  <dbl> <int>\n1 Africa       5667.  6015.    54\n2 America     18100. 12601.    36\n3 Asia        22728. 24067.    42\n4 Europe      37783. 21276.    50\n5 Oceania     27573. 21984.     4"
  },
  {
    "objectID": "slide/slide10.html#おまけ-効率的な方法",
    "href": "slide/slide10.html#おまけ-効率的な方法",
    "title": "ミクロ政治データ分析実習",
    "section": "おまけ: 効率的な方法",
    "text": "おまけ: 効率的な方法\nacross()関数を利用: 詳細は教科書第13.1章を参照\n例) dfのPopulationからPPP列まで平均値と標準偏差を計算し、結果の変数名は元の変数名_Mean、元の変数名_SDとする\n\ndf %>%\n  summarise(across(Population:PPP,\n                   .fns = list(Mean = ~mean(.x, na.rm = TRUE),\n                               SD   = ~mean(.x, na.rm = TRUE))))\n\n# A tibble: 1 × 8\n  Population_Mean Population_SD Area_Mean Area_SD GDP_Mean  GDP_SD PPP_Mean\n            <dbl>         <dbl>     <dbl>   <dbl>    <dbl>   <dbl>    <dbl>\n1       41737773.     41737773.   696069. 696069.  473031. 473031.  717953.\n# … with 1 more variable: PPP_SD <dbl>"
  },
  {
    "objectID": "slide/slide10.html#section-1",
    "href": "slide/slide10.html#section-1",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "変数の計算"
  },
  {
    "objectID": "slide/slide10.html#変数の計算",
    "href": "slide/slide10.html#変数の計算",
    "title": "ミクロ政治データ分析実習",
    "section": "変数の計算",
    "text": "変数の計算\nmutate(): データフレームの変数を用いた計算を行い、新しい列として追加\n\n新しい列名として既存の列名を指定すると上書きされる\n新しく追加された列は最後に位置する（指定可能）\n\n\nデータフレーム名 %>%\n  mutate(新しい列名 = 計算式)\n\n例) dfのPopulationをAreaで割り（=人口密度）、Densityという名の列として追加する\n\n\n{dplyr}を使わない方法\n\ndf$Density <- df$Population / df$Area\n\n\n\n\n{dplyr}を使う方法\n\ndf %>%\n  mutate(Density = Population / Area)"
  },
  {
    "objectID": "slide/slide10.html#dplyrの例",
    "href": "slide/slide10.html#dplyrの例",
    "title": "ミクロ政治データ分析実習",
    "section": "{dplyr}の例",
    "text": "{dplyr}の例\n例) dfのPopulationをAreaで割り（人口密度）、Densityという名の列として追加する\n\n新しく追加された列は最後に位置する\n\nただし、上書きの場合、位置はそのまま\n\n\n\ndf %>%\n  mutate(Density = Population / Area) %>%\n  print(n = 5) # 最初の5行のみ出力\n\n# A tibble: 186 × 19\n  Country   Population   Area    GDP     PPP GDP_per_capita PPP_per_capita    G7\n  <chr>          <dbl>  <dbl>  <dbl>   <dbl>          <dbl>          <dbl> <dbl>\n1 Afghanis…   38928346 6.53e5 1.91e4  82737.           491.          2125.     0\n2 Albania      2877797 2.74e4 1.53e4  39658.          5309.         13781.     0\n3 Algeria     43851044 2.38e6 1.70e5 496572.          3876.         11324.     0\n4 Andorra        77265 4.7 e2 3.15e3     NA          40821.            NA      0\n5 Angola      32866272 1.25e6 9.46e4 218533.          2879.          6649.     0\n# … with 181 more rows, and 11 more variables: G20 <dbl>, OECD <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>,\n#   Density <dbl>"
  },
  {
    "objectID": "slide/slide10.html#新しい列の位置指定",
    "href": "slide/slide10.html#新しい列の位置指定",
    "title": "ミクロ政治データ分析実習",
    "section": "新しい列の位置指定",
    "text": "新しい列の位置指定\nmutate()内に.after、または.beforeを指定\n\nrelocate()関数と同じ仕組み（第9回）\n\n例) PopulationをAreaで割り、Densityという名の新しい列Areaの後に追加する。\n\ndf %>%\n  mutate(Density = Population / Area, \n         .after  = Area)\n\n# A tibble: 186 × 19\n   Country             Population    Area Density     GDP     PPP GDP_per_capita\n   <chr>                    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>          <dbl>\n 1 Afghanistan           38928346  652860   59.6   1.91e4  8.27e4           491.\n 2 Albania                2877797   27400  105.    1.53e4  3.97e4          5309.\n 3 Algeria               43851044 2381740   18.4   1.70e5  4.97e5          3876.\n 4 Andorra                  77265     470  164.    3.15e3 NA              40821.\n 5 Angola                32866272 1246700   26.4   9.46e4  2.19e5          2879.\n 6 Antigua and Barbuda      97929     440  223.    1.73e3  2.08e3         17643.\n 7 Argentina             45195774 2736690   16.5   4.50e5  1.04e6          9949.\n 8 Armenia                2963243   28470  104.    1.37e4  3.84e4          4614.\n 9 Australia             25499884 7682300    3.32  1.39e6  1.28e6         54615.\n10 Austria                9006398   82409  109.    4.46e5  5.03e5         49555.\n# … with 176 more rows, and 12 more variables: PPP_per_capita <dbl>, G7 <dbl>,\n#   G20 <dbl>, OECD <dbl>, HDI_2018 <dbl>, Polity_Score <dbl>,\n#   Polity_Type <chr>, FH_PR <dbl>, FH_CL <dbl>, FH_Total <dbl>,\n#   FH_Status <chr>, Continent <chr>"
  },
  {
    "objectID": "slide/slide10.html#変数の計算いろいろ1",
    "href": "slide/slide10.html#変数の計算いろいろ1",
    "title": "ミクロ政治データ分析実習",
    "section": "変数の計算いろいろ（1）",
    "text": "変数の計算いろいろ（1）\n各国が世界人口に占める割合を計算し、降順で出力\n\ndfのPopulationの合計をTotal_Popという列として追加する。\nPopulationをTotal_Popで割り、100を掛ける。結果はShare_Popという名の列としてPopulation後に追加する。\nCountryからShare_Popまでの列のみ残す。\nTotal_Pop列を除外する。\nShare_Popが大きい順で行を並び替える"
  },
  {
    "objectID": "slide/slide10.html#変数の計算いろいろ1-1",
    "href": "slide/slide10.html#変数の計算いろいろ1-1",
    "title": "ミクロ政治データ分析実習",
    "section": "変数の計算いろいろ（1）",
    "text": "変数の計算いろいろ（1）\n\ndf %>% \n  # Total_Popを作らずにShare_Pop作成時に直接sum(Population)を入れてもOK\n  mutate(Total_Pop = sum(Population),\n         Share_Pop = Population / Total_Pop * 100,\n         .after    = Population) %>%\n  select(Country:Share_Pop) %>%\n  select(!Total_Pop) %>%\n  arrange(desc(Share_Pop))\n\n# A tibble: 186 × 3\n   Country       Population Share_Pop\n   <chr>              <dbl>     <dbl>\n 1 China         1447470092     18.6 \n 2 India         1380004385     17.8 \n 3 United States  334308644      4.31\n 4 Indonesia      273523615      3.52\n 5 Pakistan       220892340      2.85\n 6 Brazil         212559417      2.74\n 7 Nigeria        206139589      2.66\n 8 Bangladesh     164689383      2.12\n 9 Russia         145934462      1.88\n10 Mexico         128932753      1.66\n# … with 176 more rows"
  },
  {
    "objectID": "slide/slide10.html#変数の計算いろいろ2",
    "href": "slide/slide10.html#変数の計算いろいろ2",
    "title": "ミクロ政治データ分析実習",
    "section": "変数の計算いろいろ（2）",
    "text": "変数の計算いろいろ（2）\nG7、G20、OECDのいずれかに加盟している国を「先進国」、それ以外は「その他」とし、二つのグループの人口密度、人間開発指数、民主主義度の平均値を出力する。\n\ndfを利用する\nDevelopedという列を追加し、G7、G20、OECDのいずれかに加盟した国なら\"先進国\"、それ以外なら\"その他\"とする。\n人口密度をDensityという名の列として追加する。\nHDI_2018とPolity_Scoreのいずれかが欠損した行を除外する。\nDeveloped変数でデータをグルーピングする。\nHDI_2018、Polity_Score、Densityの平均値を求める。\ndf2という名前のオブジェクトとして作業環境内に格納する。"
  },
  {
    "objectID": "slide/slide10.html#変数の計算いろいろ2-1",
    "href": "slide/slide10.html#変数の計算いろいろ2-1",
    "title": "ミクロ政治データ分析実習",
    "section": "変数の計算いろいろ（2）",
    "text": "変数の計算いろいろ（2）\n\ndf2 <- df %>%\n  mutate(Developed = G7 + G20 + OECD,\n         Developed = if_else(Developed > 1, \"先進国\", \"その他\"), # 上書き\n         Density   = Population / Area) %>%\n  filter(!is.na(HDI_2018), !is.na(Polity_Score)) %>%\n  group_by(Developed) %>%\n  summarise(Density = mean(Density),\n            HDI     = mean(HDI_2018),\n            Polity  = mean(Polity_Score))\n\ndf2\n\n# A tibble: 2 × 4\n  Developed Density   HDI Polity\n  <chr>       <dbl> <dbl>  <dbl>\n1 その他       197. 0.695   3.92\n2 先進国       174. 0.892   7.91"
  },
  {
    "objectID": "slide/slide10.html#summariseの結果を並び替えたい",
    "href": "slide/slide10.html#summariseの結果を並び替えたい",
    "title": "ミクロ政治データ分析実習",
    "section": "summarise()の結果を並び替えたい",
    "text": "summarise()の結果を並び替えたい\ndf2を\"先進国\" > \"その他\"の順番で表示させたい。\n\nsummarise()を行う場合、グルーピング変数のアルファベット順で表示される。\nただし、日本語の場合、50音順にはならない。\n\nひらがな、カタカナなら50音順になるが、漢字は \\(\\times\\)\n\nしたがって、summarise()の前にグルーピング変数をFactor型に変換する必要がある。\n\nFactor型: 順序付きの文字型"
  },
  {
    "objectID": "slide/slide10.html#developedをfactor型に",
    "href": "slide/slide10.html#developedをfactor型に",
    "title": "ミクロ政治データ分析実習",
    "section": "DevelopedをFactor型に",
    "text": "DevelopedをFactor型に\n\ndf %>%\n  mutate(Developed = G7 + G20 + OECD,\n         Developed = if_else(Developed > 1, \"先進国\", \"その他\"), # 上書き\n         Density   = Population / Area) %>%\n  filter(!is.na(HDI_2018), !is.na(Polity_Score)) %>%\n  group_by(Developed) %>%\n  # ここでなく、filter()前のmutate()内でやるのが効率的\n  mutate(Developed = factor(Developed, levels = c(\"先進国\", \"その他\"))) %>%\n  summarise(Density = mean(Density),\n            HDI     = mean(HDI_2018),\n            Polity  = mean(Polity_Score))\n\n# A tibble: 2 × 4\n  Developed Density   HDI Polity\n  <fct>       <dbl> <dbl>  <dbl>\n1 先進国       174. 0.892   7.91\n2 その他       197. 0.695   3.92"
  },
  {
    "objectID": "slide/slide10.html#変数のリコーディング-2値の例",
    "href": "slide/slide10.html#変数のリコーディング-2値の例",
    "title": "ミクロ政治データ分析実習",
    "section": "変数のリコーディング: 2値の例",
    "text": "変数のリコーディング: 2値の例\nmutate()内にif_else()を使用（または、ifelse()）\n\ndfのOECDが1なら\"OECD加盟国\"、それ以外なら\"OECD非加盟国\"に変換し、OECD_Jという列として追加\n\n\ndf %>%\n  mutate(OECD_J = if_else(OECD == 1, \"OECD加盟国\", \"OECD非加盟国\"))\n\n例) 変換前\n\ndf %>%\n  group_by(OECD) %>%\n  summarise(PPP = mean(PPP_per_capita, na.rm = TRUE),\n            HDI = mean(HDI_2018, na.rm = TRUE),\n            FH  = mean(FH_Total, na.rm = TRUE))\n\n# A tibble: 2 × 4\n   OECD    PPP   HDI    FH\n  <dbl>  <dbl> <dbl> <dbl>\n1     0 14229. 0.667  49.9\n2     1 46000. 0.894  89.1"
  },
  {
    "objectID": "slide/slide10.html#変数のリコーディング-2値の例-1",
    "href": "slide/slide10.html#変数のリコーディング-2値の例-1",
    "title": "ミクロ政治データ分析実習",
    "section": "変数のリコーディング: 2値の例",
    "text": "変数のリコーディング: 2値の例\n例) 変換後\n\ndf %>%\n  mutate(OECD_J = if_else(OECD == 1, \"OECD加盟国\", \"OECD非加盟国\")) %>%\n  group_by(OECD = OECD_J) %>% # 「=」で列名の変更が可能\n  summarise(PPP = mean(PPP_per_capita, na.rm = TRUE),\n            HDI = mean(HDI_2018, na.rm = TRUE),\n            FH  = mean(FH_Total, na.rm = TRUE))\n\n# A tibble: 2 × 4\n  OECD            PPP   HDI    FH\n  <chr>         <dbl> <dbl> <dbl>\n1 OECD加盟国   46000. 0.894  89.1\n2 OECD非加盟国 14229. 0.667  49.9"
  },
  {
    "objectID": "slide/slide10.html#変数のリコーディング-3値以上の例",
    "href": "slide/slide10.html#変数のリコーディング-3値以上の例",
    "title": "ミクロ政治データ分析実習",
    "section": "変数のリコーディング: 3値以上の例",
    "text": "変数のリコーディング: 3値以上の例\nmutate()内にcase_when()を使用\n\nデータフレーム名 %>%\n  mutate(新しい変数名 = case_when(条件1 ~ 新しい値,\n                                条件2 ~ 新しい値,\n                                ...\n                                TRUE ~ 新しい値))\n\n\nTRUE ~ 新しい値は「上記の条件全てが満たされない場合の値」を意味する"
  },
  {
    "objectID": "slide/slide10.html#変数のリコーディング-3値以上の例-1",
    "href": "slide/slide10.html#変数のリコーディング-3値以上の例-1",
    "title": "ミクロ政治データ分析実習",
    "section": "変数のリコーディング: 3値以上の例",
    "text": "変数のリコーディング: 3値以上の例\n例) dfのContinentを日本語にし、Continent_Jとして追加\n\ndf %>%\n  mutate(Continent_J = case_when(Continent == \"Africa\"  ~ \"アフリカ\",\n                                 Continent == \"America\" ~ \"アメリカ\",\n                                 Continent == \"Asia\"    ~ \"アジア\",\n                                 Continent == \"Europe\"  ~ \"ヨーロッパ\",\n                                 TRUE                   ~ \"オセアニア\")) %>%\n  group_by(大陸 = Continent_J) %>%\n  # 日本語は非推奨だが、一応使える（_と.を除く特殊記号不可）\n  summarise(OECD加盟国比率 = mean(OECD),\n            国家数        = n())\n\n# A tibble: 5 × 3\n  大陸       OECD加盟国比率 国家数\n  <chr>               <dbl>  <int>\n1 アジア             0.0714     42\n2 アフリカ           0          54\n3 アメリカ           0.139      36\n4 オセアニア         0.5         4\n5 ヨーロッパ         0.54       50"
  },
  {
    "objectID": "slide/slide10.html#変数のリコーディング-応用",
    "href": "slide/slide10.html#変数のリコーディング-応用",
    "title": "ミクロ政治データ分析実習",
    "section": "変数のリコーディング: 応用",
    "text": "変数のリコーディング: 応用\n例) ContinentがAP列を追加し、\"Asia\"か\"Oceania\"、\"America\"なら1、以外は0\n方法1: if_else()の利用\n\ndf %>%\n  mutate(AP = if_else(Continent %in% c(\"Asia\", \"America\", \"Oceania\"),\n                      1, 0))\n\n方法2: case_when()の利用\n\ndf %>%\n  mutate(AP = case_when(Continent == \"Asia\"    ~ 1, \n                        Continent == \"America\" ~ 1, \n                        Continent == \"Oceania\" ~ 1,\n                        TRUE                   ~ 0))\n\n方法3: case_when() + %in%の利用\n\ndf %>%\n  mutate(AP = case_when(Continent %in% c(\"Asia\", \"America\", \"Oceania\") ~ 1, \n                        TRUE                                           ~ 0))"
  },
  {
    "objectID": "slide/slide10.html#注意-欠損値を指定する場合",
    "href": "slide/slide10.html#注意-欠損値を指定する場合",
    "title": "ミクロ政治データ分析実習",
    "section": "注意) 欠損値を指定する場合",
    "text": "注意) 欠損値を指定する場合\n世論調査などの場合、欠損値がNAでなく、9や99、\"\"などの場合がある。\n例) my_dataの例\n\nYoungAge変数を作成し、Ageが39以下なら1、それ以外は0にする。ただし、999ならNAとする。\nHighEduc2変数を作成し、HighEducが1なら\"大卒以上\"、それ以外は\"大卒未満\"にする。ただし、9ならNAとする。\n\n\n\n\nmy_data <- tibble(ID       = 1:10,\n                  Age      = c(32, 35, 57, 999, 74, \n                               66, 999, 49, 78, 67),\n                  HighEduc = c(1, 0, 0, 1, 0,\n                               9, 1, 1, 9, 9))\n\n\n\nmy_data\n\n# A tibble: 10 × 3\n      ID   Age HighEduc\n   <int> <dbl>    <dbl>\n 1     1    32        1\n 2     2    35        0\n 3     3    57        0\n 4     4   999        1\n 5     5    74        0\n 6     6    66        9\n 7     7   999        1\n 8     8    49        1\n 9     9    78        9\n10    10    67        9"
  },
  {
    "objectID": "slide/slide10.html#注意-欠損値を指定する場合-1",
    "href": "slide/slide10.html#注意-欠損値を指定する場合-1",
    "title": "ミクロ政治データ分析実習",
    "section": "注意) 欠損値を指定する場合",
    "text": "注意) 欠損値を指定する場合\n注意: 条件 ~ NAではエラーが発生する。\n\nif_else()も同様。ただし、ifelse()はNAで作動\n\n\nmy_data %>%\n  mutate(YoungAge  = case_when(Age == 999 ~ NA,\n                               Age <=  39 ~ 1,\n                               TRUE       ~ 0),\n         HighEduc2 = case_when(HighEduc == 9 ~ NA,\n                               HighEduc == 1 ~ \"大卒以上\",\n                               TRUE          ~ \"大卒未満\"))\n\nError in `mutate()`:\n! Problem while computing `YoungAge = case_when(Age == 999 ~ NA, Age <=\n  39 ~ 1, TRUE ~ 0)`.\nCaused by error in `` names(message) <- `*vtmp*` ``:\n! 'names' attribute [1] must be the same length as the vector [0]"
  },
  {
    "objectID": "slide/slide10.html#注意-欠損値を指定する場合-2",
    "href": "slide/slide10.html#注意-欠損値を指定する場合-2",
    "title": "ミクロ政治データ分析実習",
    "section": "注意) 欠損値を指定する場合",
    "text": "注意) 欠損値を指定する場合\nNAでなく、生成される列のデータ型に応じてNA_real_（numeric型）、またはNA_character_（character型）を使用（logical型ならNAのままでOK）\n\nmy_data %>%\n  mutate(YoungAge  = case_when(Age == 999 ~ NA_real_,\n                               Age <=  39 ~ 1,\n                               TRUE       ~ 0),\n         HighEduc2 = case_when(HighEduc == 9 ~ NA_character_,\n                               HighEduc == 1 ~ \"大卒以上\",\n                               TRUE          ~ \"大卒未満\"))\n\n# A tibble: 10 × 5\n      ID   Age HighEduc YoungAge HighEduc2\n   <int> <dbl>    <dbl>    <dbl> <chr>    \n 1     1    32        1        1 大卒以上 \n 2     2    35        0        1 大卒未満 \n 3     3    57        0        0 大卒未満 \n 4     4   999        1       NA 大卒以上 \n 5     5    74        0        0 大卒未満 \n 6     6    66        9        0 <NA>     \n 7     7   999        1       NA 大卒以上 \n 8     8    49        1        0 大卒以上 \n 9     9    78        9        0 <NA>     \n10    10    67        9        0 <NA>"
  },
  {
    "objectID": "slide/slide10.html#特定の値を欠損値にコーディング場合",
    "href": "slide/slide10.html#特定の値を欠損値にコーディング場合",
    "title": "ミクロ政治データ分析実習",
    "section": "特定の値を欠損値にコーディング場合",
    "text": "特定の値を欠損値にコーディング場合\n特定の値を欠損値とし、それ以外の値は元も値にする場合\n\n主にif_else()を使用し、条件に合致した場合はNA_real_かNA_character_を、合致しない場合は元の変数のままにする。\n\n\nmy_data %>%\n  mutate(Age      = if_else(Age == 999, NA_real_, Age),\n         HighEduc = if_else(HighEduc == 9, NA_real_, HighEduc))\n\n# A tibble: 10 × 3\n      ID   Age HighEduc\n   <int> <dbl>    <dbl>\n 1     1    32        1\n 2     2    35        0\n 3     3    57        0\n 4     4    NA        1\n 5     5    74        0\n 6     6    66       NA\n 7     7    NA        1\n 8     8    49        1\n 9     9    78       NA\n10    10    67       NA"
  },
  {
    "objectID": "slide/slide10.html#特定の値を欠損値にコーディング場合-1",
    "href": "slide/slide10.html#特定の値を欠損値にコーディング場合-1",
    "title": "ミクロ政治データ分析実習",
    "section": "特定の値を欠損値にコーディング場合",
    "text": "特定の値を欠損値にコーディング場合\nif_else()でなく、case_when()を使うことも可能\n\n欠損を意味する値が複数の場合、case_when()を使うか、OR演算子（| / %in%）を用いたif_else()を使用する。\n\n\nmy_data %>%\n  mutate(Age      = case_when(Age == 999 ~ NA_real_, \n                              TRUE       ~ Age),\n         HighEduc = case_when(HighEduc == 9 ~ NA_real_, \n                              TRUE          ~ HighEduc))\n\n# A tibble: 10 × 3\n      ID   Age HighEduc\n   <int> <dbl>    <dbl>\n 1     1    32        1\n 2     2    35        0\n 3     3    57        0\n 4     4    NA        1\n 5     5    74        0\n 6     6    66       NA\n 7     7    NA        1\n 8     8    49        1\n 9     9    78       NA\n10    10    67       NA"
  },
  {
    "objectID": "slide/slide10.html#特定の値を欠損値にコーディング場合-2",
    "href": "slide/slide10.html#特定の値を欠損値にコーディング場合-2",
    "title": "ミクロ政治データ分析実習",
    "section": "特定の値を欠損値にコーディング場合",
    "text": "特定の値を欠損値にコーディング場合\n{naniar}パッケージのreplace_with_na()関数を利用\n\n引数はリスト型オブジェクトであり、リストの中には変数名 = 欠損値の値\n欠損値の値が複数の場合、変数名 = c(値1, 値2, ...)\n似たような関数として{expss}のna_if()関数\n\n\nlibrary(naniar) # 事前に install.package(naniar) でインストール\nmy_data %>%\n  # Ageは999、HighEducは9が欠損値\n  replace_with_na(list(Age = 999, HighEduc = 9))\n\n# A tibble: 10 × 3\n      ID   Age HighEduc\n   <int> <dbl>    <dbl>\n 1     1    32        1\n 2     2    35        0\n 3     3    57        0\n 4     4    NA        1\n 5     5    74        0\n 6     6    66       NA\n 7     7    NA        1\n 8     8    49        1\n 9     9    78       NA\n10    10    67       NA\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide04.html#プログラミングの基礎概念",
    "href": "slide/slide04.html#プログラミングの基礎概念",
    "title": "ミクロ政治データ分析実習",
    "section": "プログラミングの基礎概念",
    "text": "プログラミングの基礎概念\n\n\n\n\nオブジェクト（object）\nクラス（class）\n関数（function）\n引数\n\n仮引数（parameter）と実引数（argument）"
  },
  {
    "objectID": "slide/slide04.html#オブジェクト",
    "href": "slide/slide04.html#オブジェクト",
    "title": "ミクロ政治データ分析実習",
    "section": "オブジェクト",
    "text": "オブジェクト\nオブジェクト (object) : メモリに割り当てられた「何か」\n\nベクトル (vector)、行列 (matrix)、データフレーム (data frame)、リスト (list)、関数 (function) など\nそれぞれ固有の（=他のオブジェクトと重複しない）名前が付いている。\n1から5までの自然数の数列をmy_vec1という名前のオブジェクトとして格納\n\n\nmy_vec1 <- c(1, 2, 3, 4, 5) # my_vec1 <- 1:5  も同じ\n\n\nRに存在するあらゆるものはオブジェクトである（Chambers 2016）\n\n“Everything that exists in R is an object”\n\n\nmy_vec1 * 2\n\n\n以上のコードの場合、2もオブジェクト\n\n計算が終わった瞬間、メモリから削除されるだけ\n\n演算子*もオブジェクト"
  },
  {
    "objectID": "slide/slide04.html#クラス",
    "href": "slide/slide04.html#クラス",
    "title": "ミクロ政治データ分析実習",
    "section": "クラス",
    "text": "クラス\nクラス (class): オブジェクトを特徴づける属性\n\nclass()関数で確認可能\nすべてのオブジェクトは何らかのクラスを持つ\n\n\nclass(my_vec1) # my_vec1 のクラス\n\n[1] \"numeric\"\n\nclass(2)       # 2 のクラス\n\n[1] \"numeric\"\n\nclass(`*`)     # * のクラス\n\n[1] \"function\"\n\nclass(class)   # class() のクラス\n\n[1] \"function\""
  },
  {
    "objectID": "slide/slide04.html#なぜクラスが重要か",
    "href": "slide/slide04.html#なぜクラスが重要か",
    "title": "ミクロ政治データ分析実習",
    "section": "なぜクラスが重要か",
    "text": "なぜクラスが重要か\n\nある関数の引数（後述）には使用可能なクラスが指定されている。\n?関数名で確認可能\nmean()関数の例（Consoleペイン上で?mean）\n\nmean()に使用可能な引数はx、trim、na.rm\nx: numeric型ベクトル、logical型ベクトルなどが使用可能\nna.rm: 長さ1のlogical型ベクトル（a logical value）のみ使用可能\n\n\nmean(c(1, 2, 3, NA, 5), na.rm = TRUE)\n\n関数を使いこなすためには関数のヘルプを確認する\n\n必要な引数、返されるデータの構造、サンプルコードなど豊富な情報が載っている。"
  },
  {
    "objectID": "slide/slide04.html#関数と引数",
    "href": "slide/slide04.html#関数と引数",
    "title": "ミクロ政治データ分析実習",
    "section": "関数と引数",
    "text": "関数と引数\n関数 (function): 入力されたデータを内部で決められた手順に従って処理し、その結果を返すもの\n\nRで起こるあらゆることは関数の呼び出しである (Chambers, 2016)\n\nEverything that happens in R is a function call。\n\n使い方: 関数名(関数の入力となるオブジェクト)\n\n例) class(my_vec1)、sum(my_vec1)\n\n自分で関数を作成することも可能\n関数には引数（ひきすう）が必要"
  },
  {
    "objectID": "slide/slide04.html#引数",
    "href": "slide/slide04.html#引数",
    "title": "ミクロ政治データ分析実習",
    "section": "引数",
    "text": "引数\nsum()関数の例\nsum(c(1, 2, 3, NA, 5), na.rm = TRUE)\n\n関数名はsum\n仮引数 (parameter): na.rm\n実引数 (argument): c(1, 2, 3, NA, 5)、TRUE\n\nc(1, 2, 3, NA, 5)の仮引数名はない（ヘルプを見ると...と表示される）。このように仮引数名が存在しないケースもある。\n\n第一引数の仮引数は省略するケースが多い\n第二引数以降は仮引数名を明記（実引数がどの仮引数に対応するかを明示）\n\n関数によっては引数は数十個ある場合も\n\n引数には既定値 (default value)が指定されているものもあり、省略可能。既定値がない引数はすべて指定する。\n\nたとえば、mean()のtrim引数の既定値は0（?mean参照）\nUsageに仮引数 = 実引数と表記されている場合、既定値が存在する\nArguemntsにan optional…と書いていれば、既定値はないが、指定しなくても関数は動くことを意味する。"
  },
  {
    "objectID": "slide/slide04.html#コーディングスタイル",
    "href": "slide/slide04.html#コーディングスタイル",
    "title": "ミクロ政治データ分析実習",
    "section": "コーディング・スタイル",
    "text": "コーディング・スタイル\n\nオブジェクト名の付け方\n改行\nスペースと字下げ（インデント）\n代入の演算子は=でなく、<-を使用\n\n\n参考\n\nThe tidyverse style guide\nGoogle’s Style Guide\n{styler}パッケージと{lintr}パッケージ"
  },
  {
    "objectID": "slide/slide04.html#オブジェクト名1",
    "href": "slide/slide04.html#オブジェクト名1",
    "title": "ミクロ政治データ分析実習",
    "section": "オブジェクト名（1）",
    "text": "オブジェクト名（1）\n原則1: オブジェクト名は英数字と一部の記号（_と.）のみにする\n\nローマ字以外の文字も使える場合もあるが、絶対に使わないこと！\n\n\nvariable1 <- \"R is fun!\"\nvariable1\n\n[1] \"R is fun!\"\n\n変数2 <- \"Rは楽しいよ！\"\n変数2\n\n[1] \"Rは楽しいよ！\"\n\nへんすう3 <- \"Rはええでー\"\nへんすう3\n\n[1] \"Rはええでー\"\n\n변수4 <- \"매일 아침 눈을 뜨면 R부터 기동시킵니다.\"\n변수4\n\n[1] \"매일 아침 눈을 뜨면 R부터 기동시킵니다.\""
  },
  {
    "objectID": "slide/slide04.html#オブジェクト名2",
    "href": "slide/slide04.html#オブジェクト名2",
    "title": "ミクロ政治データ分析実習",
    "section": "オブジェクト名（2）",
    "text": "オブジェクト名（2）\n原則2: 数字で始まる変数名、記号が含まれた変数名は指定できない\n\n裏技で使うことも可能だが、なるべく使わないこと\n\n\n100ABC <- c(1, 2, 3, 5, 7, 11)\n\nError: <text>:1:4: unexpected symbol\n1: 100ABC\n       ^\n\n\n\nSmile^^ <- \"マクドでスマイルを頼んでみたい！\"\n\nError: <text>:1:7: unexpected '^'\n1: Smile^^\n          ^\n\n\n\nWeather_2022/03/30 <- \"最高気温22度\"\n\nError in Weather_2022/3/30 <- \"最高気温22度\": object 'Weather_2022' not found\n\n\nただし、_と.は使用可能であり、.より_を推奨\n\nWeather_2022_03_30 <- \"最高気温22度\"\nWeather_2022_03_30\n\n[1] \"最高気温22度\""
  },
  {
    "objectID": "slide/slide04.html#オブジェクト名3",
    "href": "slide/slide04.html#オブジェクト名3",
    "title": "ミクロ政治データ分析実習",
    "section": "オブジェクト名（3）",
    "text": "オブジェクト名（3）\n原則3: 予約語を避ける\n\nRがデフォルトで提供する組込の関数やオブジェクトと重複する名前を自分で作成するオブジェクトに付けることは避ける（できない場合もある）。\n\n例) pi（円周率）、if、forなど\n\n\n例1: 指定は出来るが、非推奨\n\npi # 円周率\n\n[1] 3.141593\n\n\n\npi <- \"3月14日はpie day!\"\npi # もはや円周率ではない\n\n[1] \"3月14日はpie day!\"\n\n\n例2: そもそも指定できない\n\nfor <- \"フォー！\"\n\nError: <text>:1:5: unexpected assignment\n1: for <-\n        ^"
  },
  {
    "objectID": "slide/slide04.html#オブジェクト名4",
    "href": "slide/slide04.html#オブジェクト名4",
    "title": "ミクロ政治データ分析実習",
    "section": "オブジェクト名（4）",
    "text": "オブジェクト名（4）\n原則4: 短さと分かりやすさの両立\n\nオブジェクト名を付けるセンスはプログラマーのレベルが測れる指標の一つ\n\n例1: 変数の中身を見るまでは、どのような内容が入っているか分からない\n\nvar2   <- c(\"female\", \"male\", \"male\", \"female\") # 分かりにくい\ngender <- c(\"female\", \"male\", \"male\", \"female\") # 分かりやすい\n\n\n例2: 長すぎて今後、打つのが面倒くさい\n\nmathematicsscore <- c(30, 91, 43, 77, 100) # 長い!!\nMathScore        <- c(30, 91, 43, 77, 100) # 大文字キャメルケース\nmathScore        <- c(30, 91, 43, 77, 100) # 小文字キャメルケース\nmath_score       <- c(30, 91, 43, 77, 100) # スネークケース"
  },
  {
    "objectID": "slide/slide04.html#改行",
    "href": "slide/slide04.html#改行",
    "title": "ミクロ政治データ分析実習",
    "section": "改行",
    "text": "改行\n\nコードは1行が長すぎないように適宜改行すること。\n\n1行に何文字までするかはモニター・サイズと相談すること（昔は80文字という非公式的なルールがあった）。\n\n\n良い例: 改行あり\n\nfit1 <- glm(Voted ~ Female + Age + Education + Income + Region +\n              Attitude1 + Attitude2 + Attitude3, \n            family = binomial(\"logit\"), data = my_data)\n\n悪い例: 改行なし\n\nfit1 <- glm(Voted ~ Female + Age + Education + Income + Region + Attitude1 + Attitude2 + Attitude3, family = binomial(\"logit\"), data = my_data)"
  },
  {
    "objectID": "slide/slide04.html#スペースと字下げ1",
    "href": "slide/slide04.html#スペースと字下げ1",
    "title": "ミクロ政治データ分析実習",
    "section": "スペースと字下げ（1）",
    "text": "スペースと字下げ（1）\n\nコードが長くなるほどスペースの字下げは重要\n全ての演算子の前後には半角スペースを入れる。\n\n+、-、*、%%、&、|、<-など\nただし、^は例外\n全角スペースは絶対に使わないこと\n\n同じブロック（()、{}）内なら字下げも可読性の観点から重要\n\nただし、字下げはRStudioを手伝ってくれる。\n\n\n良い例:\n\nsum(my_vec2, na.rm = TRUE)\n\n悪い例:\n\nsum(my_vec2,na.rm=TRUE)"
  },
  {
    "objectID": "slide/slide04.html#スペースと字下げ2",
    "href": "slide/slide04.html#スペースと字下げ2",
    "title": "ミクロ政治データ分析実習",
    "section": "スペースと字下げ（2）",
    "text": "スペースと字下げ（2）\n以下のコードは全て同じであるが、可読性が桁違い（表形式データ作成の例）\n良い例: 改行あり、字下げあり、スペースあり\n\ndata.frame(\n  name     = c(\"Song\",  \"Yanai\", \"Wickham\"),\n  favorite = c(\"Ramen\", \"Cat\",   \"R\"),\n  gender   = c(\"Male\",  \"Male\",  \"Male\")\n)\n\n悪い例: 改行あり、字下げなし、スペースあり\n\ndata.frame(\nname = c(\"Song\", \"Yanai\", \"Hadley\"),\nfavorite = c(\"Ramen\", \"Cat\", \"R\"),\ngender = c(\"Male\", \"Male\", \"Male\")\n)\n\n邪悪な例: 改行なし（=字下げなし）、スペースなし\n\ndata.frame(name=c(\"Song\",\"Yanai\",\"Hadley\"),favorite=c(\"Ramen\",\"Cat\",\"R\"),fender=c(\"Male\",\"Male\",\"Male\"))"
  },
  {
    "objectID": "slide/slide04.html#本格的なプログラミングの世界へ",
    "href": "slide/slide04.html#本格的なプログラミングの世界へ",
    "title": "ミクロ政治データ分析実習",
    "section": "本格的なプログラミングの世界へ",
    "text": "本格的なプログラミングの世界へ\n中級者以上を目指すなら以下のようなプログラミングの知識は必須であるものの、本講義では一部を除き、解説しない。\n詳細は教科書の第10章を参照\n\n反復\n\nfor()\nwhile()\n\n条件分岐\n\nif()、else if()、else()\nifelse()（\\(\\simeq\\) if_else()）\n\n本講義ではかなり頻繁に使うため、第9回以降に解説する。\n\nswitch()"
  },
  {
    "objectID": "slide/slide04.html#プログラミングは簡単だから難しい",
    "href": "slide/slide04.html#プログラミングは簡単だから難しい",
    "title": "ミクロ政治データ分析実習",
    "section": "プログラミングは簡単だから難しい",
    "text": "プログラミングは簡単だから難しい\nチューリング完全な言語の2条件\n\nデータの読み書き\n条件分岐\nデータの読み書きと条件分岐を組み合わせると反復処理が可能\n\n\nプログラミングが簡単な理由\nデータの読み書き、条件分岐、反復処理を覚えるだけで、パソコンで出来るすべてのことができる。\n\nプログラミングが難しい理由\nデータの読み書き、条件分岐、反復処理だけですべてを処理しなければならない。"
  },
  {
    "objectID": "slide/slide04.html#例-bubble-sortアルゴリズム",
    "href": "slide/slide04.html#例-bubble-sortアルゴリズム",
    "title": "ミクロ政治データ分析実習",
    "section": "例) Bubble Sortアルゴリズム",
    "text": "例) Bubble Sortアルゴリズム\n\n代入（<-）、条件分岐（if()）、反復（for()）だけでベクトルのソート\n\n\nbubble_sort <- function(x){\n  n <- length(x)\n  for (i in 1 : (n - 1)) {\n    for (j in 1 : (n - i)) {\n      if (x[j] > x[j + 1]) {\n        temp <- x[j]\n        x[j] <- x[j + 1]\n        x[j + 1] <- temp\n      }\n    }\n  }\n  return(x)\n}\n\n\n\nx <- c(4, 2, 6, 3, 1, 11, 5, 9)\nbubble_sort(x)\n\n[1]  1  2  3  4  5  6  9 11\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide09.html#section",
    "href": "slide/slide09.html#section",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "Tidyverseとパイプ演算子"
  },
  {
    "objectID": "slide/slide09.html#tidyverseの世界",
    "href": "slide/slide09.html#tidyverseの世界",
    "title": "ミクロ政治データ分析実習",
    "section": "Tidyverseの世界",
    "text": "Tidyverseの世界\n\nデータサイエンスのために考案された、強い信念と思想に基づいたRパッケージの集合\n\n{tidyverse}をインストールすることで導入可能\nTidyverseに属するパッケージは思想、文法およびデータ構造を共有\n\n{dplyr}、{tidyr}、{readr}、{ggplot2}など\n\nオブジェクトをパイプ演算子 (%>%)で繋ぐ\n\nRのコードはlibrary(tidyverse)で始めよう!"
  },
  {
    "objectID": "slide/slide09.html#パイプ演算子",
    "href": "slide/slide09.html#パイプ演算子",
    "title": "ミクロ政治データ分析実習",
    "section": "パイプ演算子",
    "text": "パイプ演算子\nTidyverseにおいてオブジェクトは%>%で繋がっている。\n\n既存の書き方: 書き方と読み方が逆\n\n一般的なプログラミング言語共通\n書き方: print(sum(X)) (print、sum、Xの順で書く)\n読み方1: Xをsum()し、print()する (コードの順番と逆)\n読み方2: print()する内容はsum()で、sum()はXに対して行う（直感的でない読み方）\n\nTidyverseな書き方: 書き方と読み方が一致\n\n今どきのRの書き方\n書き方: X %>% sum() %>% print()\n読み方: Xをsum()し、print()する"
  },
  {
    "objectID": "slide/slide09.html#パイプ演算子の仕組み",
    "href": "slide/slide09.html#パイプ演算子の仕組み",
    "title": "ミクロ政治データ分析実習",
    "section": "パイプ演算子の仕組み",
    "text": "パイプ演算子の仕組み\n\n%>%の左側を右側の最初の引数として渡すだけ\nX %>% 関数(Y)は関数(X, Y)と同じ\n\nX %>% sum(na.rm = TRUE)はsum(X, na.rm = TRUE)と同じ\n\n二番目以降の引数として渡すことも可能（適宜、解説）\n\n\n\n既存の書き方\n\nX <- c(2, 3, 5, NA, 11)\nprint(sum(X, na.rm = TRUE))\n\n[1] 21\n\n\n\n\n\nTidyverseな書き方\n\nlibrary(tidyverse)\nX %>%\n    sum(na.rm = TRUE) %>%\n    print()\n\n[1] 21"
  },
  {
    "objectID": "slide/slide09.html#参考-r-4.1以降のパイプ演算子",
    "href": "slide/slide09.html#参考-r-4.1以降のパイプ演算子",
    "title": "ミクロ政治データ分析実習",
    "section": "参考) R 4.1以降のパイプ演算子",
    "text": "参考) R 4.1以降のパイプ演算子\nR内蔵演算子としてパイプ演算子（|>）が追加\n\n2021年5月リリースされたR 4.1以降実装\n\nNIIオンライン分析システムのRは4.1.2\n\n既存のパイプ演算子（%>%）はR内蔵演算子でなく、{magrittr}が提供する演算子\n\n{magrittr}は{tidyverse}を読み込むと自動的に読み込まれる\n\n使い方はほぼ同じ\n\nただし、演算子の左側のオブジェクトを右側の第一引数として渡す場合のみ\n第一引数以外の引数として渡す場合は使い方が異なる\n\n今後、仕様変更がある可能性があるため、本講義では%>%を使用"
  },
  {
    "objectID": "slide/slide09.html#との比較",
    "href": "slide/slide09.html#との比較",
    "title": "ミクロ政治データ分析実習",
    "section": "%>%と|>の比較",
    "text": "%>%と|>の比較\n\n\n渡す先が第一引数の場合\n\n{magrittr}のパイプ（%>%）、R内蔵のパイプ（native pipe; |>）の使い方は同じ\n\n\n# {magrittr}のパイプ演算子\nX %>%\n    sum(na.rm = TRUE) %>%\n    print()\n# R内蔵のパイプ演算子\nX |>\n    sum(na.rm = TRUE) |>\n    print()\n\n\n\n\n渡す先が第一引数でない場合\n\n実引数として渡す箇所に. (tidyverse)、_ (native pipe)を入力\n\nただし、_はR 4.2.0以上から使用可能 (NIIオンライン分析システムはR 4.1.2)\n\n\n\n# {magrittr}のパイプ演算子\nmy_data %>% \n  lm(y ~ x1 + x2 + x3, data = .)\n# R内蔵のパイプ演算子\nmy_data |>\n  lm(y ~ x1 + x2 + x3, data = _)"
  },
  {
    "objectID": "slide/slide09.html#section-1",
    "href": "slide/slide09.html#section-1",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "{dplyr}: 列の抽出"
  },
  {
    "objectID": "slide/slide09.html#dplyrとは",
    "href": "slide/slide09.html#dplyrとは",
    "title": "ミクロ政治データ分析実習",
    "section": "{dplyr}とは",
    "text": "{dplyr}とは\n\n\n表形式データ (データフレームやtibble)を操作するパッケージ\n第8回の講義で解説した行・列の抽出も簡単に可能\n{tidyverse}を読み込む際に自動的に読み込まれる\n\n{tidyverse}はパッケージを集めたパッケージであり、{dplyr}もその一部\n\n\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "slide/slide09.html#実習用データ",
    "href": "slide/slide09.html#実習用データ",
    "title": "ミクロ政治データ分析実習",
    "section": "実習用データ",
    "text": "実習用データ\nMicro09.csv: 186カ国の社会経済・政治体制のデータ\n\n# Dataフォルダー内のMicro09.csvを読み込み、dfという名のオブジェクトとして作業環境に格納\ndf <- read_csv(\"Data/Micro09.csv\")\ndf\n\n# A tibble: 186 × 18\n   Country  Population   Area    GDP     PPP GDP_per_capita PPP_per_capita    G7\n   <chr>         <dbl>  <dbl>  <dbl>   <dbl>          <dbl>          <dbl> <dbl>\n 1 Afghani…   38928346 6.53e5 1.91e4  8.27e4           491.          2125.     0\n 2 Albania     2877797 2.74e4 1.53e4  3.97e4          5309.         13781.     0\n 3 Algeria    43851044 2.38e6 1.70e5  4.97e5          3876.         11324.     0\n 4 Andorra       77265 4.7 e2 3.15e3 NA              40821.            NA      0\n 5 Angola     32866272 1.25e6 9.46e4  2.19e5          2879.          6649.     0\n 6 Antigua…      97929 4.4 e2 1.73e3  2.08e3         17643.         21267.     0\n 7 Argenti…   45195774 2.74e6 4.50e5  1.04e6          9949.         22938.     0\n 8 Armenia     2963243 2.85e4 1.37e4  3.84e4          4614.         12974.     0\n 9 Austral…   25499884 7.68e6 1.39e6  1.28e6         54615.         50001.     0\n10 Austria     9006398 8.24e4 4.46e5  5.03e5         49555.         55824.     0\n# … with 176 more rows, and 10 more variables: G20 <dbl>, OECD <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>"
  },
  {
    "objectID": "slide/slide09.html#実習用データの確認",
    "href": "slide/slide09.html#実習用データの確認",
    "title": "ミクロ政治データ分析実習",
    "section": "実習用データの確認",
    "text": "実習用データの確認\n186行、18列のデータ（= 186カ国、18変数）\n\ndim(df)\n\n[1] 186  18\n\n\n変数の一覧\n\nnames(df)\n\n [1] \"Country\"        \"Population\"     \"Area\"           \"GDP\"           \n [5] \"PPP\"            \"GDP_per_capita\" \"PPP_per_capita\" \"G7\"            \n [9] \"G20\"            \"OECD\"           \"HDI_2018\"       \"Polity_Score\"  \n[13] \"Polity_Type\"    \"FH_PR\"          \"FH_CL\"          \"FH_Total\"      \n[17] \"FH_Status\"      \"Continent\""
  },
  {
    "objectID": "slide/slide09.html#各変数について",
    "href": "slide/slide09.html#各変数について",
    "title": "ミクロ政治データ分析実習",
    "section": "各変数について",
    "text": "各変数について\n詳細は教科書第18.2章を参照\n\n\n\n変数名\n説明\n\n変数名\n説明\n\n\n\n\nCountry\n国名\n\nOECD\nOECD加盟有無\n\n\nPopulation\n人口\n\nHDI_2018\n人間開発指数 (2018年)\n\n\nArea\n面積( \\(\\text{km}^2\\) )\n\nPolity_Score\n政治体制のスコア\n\n\nGDP\n国内総生産（ドル）\n\nPolity_Type\n政治体制\n\n\nPPP\n購買力平価国内総生産\n\nFH_PR\n政治的自由\n\n\nGDP_per_capita\n一人当たりGDP\n\nFH_CL\n市民的自由\n\n\nPPP_per_capita\n一人当たりPPP\n\nFH_Total\nFH_PR + FH_CL\n\n\nG7\nG7加盟有無\n\nFH_Status\n自由の状態\n\n\nG20\nG20加盟有無\n\nContinent\n大陸"
  },
  {
    "objectID": "slide/slide09.html#列の選択抽出-書き方",
    "href": "slide/slide09.html#列の選択抽出-書き方",
    "title": "ミクロ政治データ分析実習",
    "section": "列の選択（抽出）: 書き方",
    "text": "列の選択（抽出）: 書き方\nselect()関数を使用\n\n\nパイプを使わない書き方\n\nselect(データ, 変数名1, 変数名2, ...)\n\n\n\n\nパイプを使う書き方\n\nデータ %>%\n    select(変数名1, 変数名2, ...)\n\n\n\n\n\n\n注意: select()関数は複数ある!\n\n\nselect()関数は{dplyr}だけでなく、{MASS}からも提供されるが、別の関数である。\n\n{MASS}もデータ分析において頻繁に使われるパッケージであるため、select()だけだと、どのパッケージのselect()か分からなくなる場合がある。\nエラーが生じる場合は、dplyr::select()など、パッケージ名を指定すること"
  },
  {
    "objectID": "slide/slide09.html#列の選択抽出-例",
    "href": "slide/slide09.html#列の選択抽出-例",
    "title": "ミクロ政治データ分析実習",
    "section": "列の選択（抽出）: 例",
    "text": "列の選択（抽出）: 例\ndfからCountry、Population、HDI_2018列を抽出し、最初の5行のみ出力\n\ndf %>%                                      # dfから\n  select(Country, Population, HDI_2018) %>% # Country, Population, HDI_2018のみ抽出して\n  head(n = 5)                               # 最初の5行を出力する\n\n# A tibble: 5 × 3\n  Country     Population HDI_2018\n  <chr>            <dbl>    <dbl>\n1 Afghanistan   38928346    0.496\n2 Albania        2877797    0.791\n3 Algeria       43851044    0.759\n4 Andorra          77265    0.857\n5 Angola        32866272    0.574\n\n\nこの時点では抽出・出力されただけ。抽出した結果をdf2という名で作業環境内に格納するためには\n\ndf2 <- df %>%\n    select(Country, Population, HDI_2018)\n\n\n\n\n課題では格納が必要な場合もある\n\n\n課題の問題には「出力せよ」だけでなく、「格納した上で出力せよ」といった形式もある。加工したデータを引き続き使うためには格納が必須であるため、問題文を注意深く読むこと。"
  },
  {
    "objectID": "slide/slide09.html#列の選択と変数名の変更",
    "href": "slide/slide09.html#列の選択と変数名の変更",
    "title": "ミクロ政治データ分析実習",
    "section": "列の選択と変数名の変更",
    "text": "列の選択と変数名の変更\n変数名の変更と抽出を同時に行うことも可能\n\n新しい変数名 = 既存の変数名\n\n例) HDI_2018の変数名をHDIに変更\n\ndf %>%\n    select(Country, Population, HDI = HDI_2018)\n\n# A tibble: 186 × 3\n   Country             Population   HDI\n   <chr>                    <dbl> <dbl>\n 1 Afghanistan           38928346 0.496\n 2 Albania                2877797 0.791\n 3 Algeria               43851044 0.759\n 4 Andorra                  77265 0.857\n 5 Angola                32866272 0.574\n 6 Antigua and Barbuda      97929 0.776\n 7 Argentina             45195774 0.83 \n 8 Armenia                2963243 0.76 \n 9 Australia             25499884 0.938\n10 Austria                9006398 0.914\n# … with 176 more rows"
  },
  {
    "objectID": "slide/slide09.html#抽出せず変数名のみ変更",
    "href": "slide/slide09.html#抽出せず変数名のみ変更",
    "title": "ミクロ政治データ分析実習",
    "section": "抽出せず、変数名のみ変更",
    "text": "抽出せず、変数名のみ変更\nrename()関数を使用\n\nデータ %>%\n    rename(新しい変数名 = 既存の変数名)\n\n例) PopulationをJinkoに、AreaをMensekiに変更\n\ndf %>%\n    rename(Jinko = Population, Menseki = Area)\n\n# A tibble: 186 × 18\n   Country      Jinko Menseki    GDP     PPP GDP_per_capita PPP_per_capita    G7\n   <chr>        <dbl>   <dbl>  <dbl>   <dbl>          <dbl>          <dbl> <dbl>\n 1 Afghanistan 3.89e7  652860 1.91e4  8.27e4           491.          2125.     0\n 2 Albania     2.88e6   27400 1.53e4  3.97e4          5309.         13781.     0\n 3 Algeria     4.39e7 2381740 1.70e5  4.97e5          3876.         11324.     0\n 4 Andorra     7.73e4     470 3.15e3 NA              40821.            NA      0\n 5 Angola      3.29e7 1246700 9.46e4  2.19e5          2879.          6649.     0\n 6 Antigua an… 9.79e4     440 1.73e3  2.08e3         17643.         21267.     0\n 7 Argentina   4.52e7 2736690 4.50e5  1.04e6          9949.         22938.     0\n 8 Armenia     2.96e6   28470 1.37e4  3.84e4          4614.         12974.     0\n 9 Australia   2.55e7 7682300 1.39e6  1.28e6         54615.         50001.     0\n10 Austria     9.01e6   82409 4.46e5  5.03e5         49555.         55824.     0\n# … with 176 more rows, and 10 more variables: G20 <dbl>, OECD <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>"
  },
  {
    "objectID": "slide/slide09.html#列の除外",
    "href": "slide/slide09.html#列の除外",
    "title": "ミクロ政治データ分析実習",
    "section": "列の除外",
    "text": "列の除外\n変数名の前に! (推奨)、または-を付ける\n\n2つ以上の変数を除外する場合、変数名をc()でまとめる。\n\n例) dfからGDP_per_capitaとPPP_per_capitaを除外\n\ndf %>%\n    select(!c(GDP_per_capita, PPP_per_capita))\n\n# A tibble: 186 × 16\n   Country           Population   Area    GDP     PPP    G7   G20  OECD HDI_2018\n   <chr>                  <dbl>  <dbl>  <dbl>   <dbl> <dbl> <dbl> <dbl>    <dbl>\n 1 Afghanistan         38928346 6.53e5 1.91e4  8.27e4     0     0     0    0.496\n 2 Albania              2877797 2.74e4 1.53e4  3.97e4     0     0     0    0.791\n 3 Algeria             43851044 2.38e6 1.70e5  4.97e5     0     0     0    0.759\n 4 Andorra                77265 4.7 e2 3.15e3 NA          0     0     0    0.857\n 5 Angola              32866272 1.25e6 9.46e4  2.19e5     0     0     0    0.574\n 6 Antigua and Barb…      97929 4.4 e2 1.73e3  2.08e3     0     0     0    0.776\n 7 Argentina           45195774 2.74e6 4.50e5  1.04e6     0     1     0    0.83 \n 8 Armenia              2963243 2.85e4 1.37e4  3.84e4     0     0     0    0.76 \n 9 Australia           25499884 7.68e6 1.39e6  1.28e6     0     1     1    0.938\n10 Austria              9006398 8.24e4 4.46e5  5.03e5     0     0     1    0.914\n# … with 176 more rows, and 7 more variables: Polity_Score <dbl>,\n#   Polity_Type <chr>, FH_PR <dbl>, FH_CL <dbl>, FH_Total <dbl>,\n#   FH_Status <chr>, Continent <chr>"
  },
  {
    "objectID": "slide/slide09.html#隣接する列の同時選択",
    "href": "slide/slide09.html#隣接する列の同時選択",
    "title": "ミクロ政治データ分析実習",
    "section": "隣接する列の同時選択",
    "text": "隣接する列の同時選択\n:を使用\n\nCountryからPPPまでの列: Country:PPP\nCountry:PPPはCountry, Population, Area, GDP, PPPと同じ意味\n\n例) dfのCountry〜PPP, HDI_2018列を抽出\n\ndf %>%\n    select(Country:PPP, HDI_2018)\n\n# A tibble: 186 × 6\n   Country             Population    Area      GDP      PPP HDI_2018\n   <chr>                    <dbl>   <dbl>    <dbl>    <dbl>    <dbl>\n 1 Afghanistan           38928346  652860   19101.   82737.    0.496\n 2 Albania                2877797   27400   15278.   39658.    0.791\n 3 Algeria               43851044 2381740  169988.  496572.    0.759\n 4 Andorra                  77265     470    3154.      NA     0.857\n 5 Angola                32866272 1246700   94635.  218533.    0.574\n 6 Antigua and Barbuda      97929     440    1728.    2083.    0.776\n 7 Argentina             45195774 2736690  449663. 1036721.    0.83 \n 8 Armenia                2963243   28470   13673.   38446.    0.76 \n 9 Australia             25499884 7682300 1392681. 1275027.    0.938\n10 Austria                9006398   82409  446315.  502771.    0.914\n# … with 176 more rows"
  },
  {
    "objectID": "slide/slide09.html#高度な変数選択",
    "href": "slide/slide09.html#高度な変数選択",
    "title": "ミクロ政治データ分析実習",
    "section": "高度な変数選択",
    "text": "高度な変数選択\n\n特定の文字列で始まる列を選択: starts_with()\n\n例)FHで始まる列の選択: starts_with(\"FH\")\n\n特定の文字列で終わる列を選択: ends_with()\n特定の文字列を含む列を選択: contains()\n\n例) dfからCountry, \"FH\"で始まる列を抽出\n\ndf %>%\n    select(Country, starts_with(\"FH\"))\n\n# A tibble: 186 × 5\n   Country             FH_PR FH_CL FH_Total FH_Status\n   <chr>               <dbl> <dbl>    <dbl> <chr>    \n 1 Afghanistan            13    14       27 NF       \n 2 Albania                27    40       67 PF       \n 3 Algeria                10    24       34 NF       \n 4 Andorra                39    55       94 F        \n 5 Angola                 11    21       32 NF       \n 6 Antigua and Barbuda    33    52       85 F        \n 7 Argentina              35    50       85 F        \n 8 Armenia                21    32       53 PF       \n 9 Australia              40    57       97 F        \n10 Austria                37    56       93 F        \n# … with 176 more rows\n\n\n\n応用) !starts_with(\"FH\"): \"FH\"で始まる列を除外"
  },
  {
    "objectID": "slide/slide09.html#列の順番変更-select使用",
    "href": "slide/slide09.html#列の順番変更-select使用",
    "title": "ミクロ政治データ分析実習",
    "section": "列の順番変更: select()使用",
    "text": "列の順番変更: select()使用\n抽出後のデータフレームにおける変数はselect()内で指定された順番に\n例) G7からOECD列をCountryとPopulationの間へ移動\n\ndf %>%\n    select(Country, G7:OECD, Population:PPP_per_capita, HDI_2018:Continent)\n\n# A tibble: 186 × 18\n   Country        G7   G20  OECD Population   Area    GDP     PPP GDP_per_capita\n   <chr>       <dbl> <dbl> <dbl>      <dbl>  <dbl>  <dbl>   <dbl>          <dbl>\n 1 Afghanistan     0     0     0   38928346 6.53e5 1.91e4  8.27e4           491.\n 2 Albania         0     0     0    2877797 2.74e4 1.53e4  3.97e4          5309.\n 3 Algeria         0     0     0   43851044 2.38e6 1.70e5  4.97e5          3876.\n 4 Andorra         0     0     0      77265 4.7 e2 3.15e3 NA              40821.\n 5 Angola          0     0     0   32866272 1.25e6 9.46e4  2.19e5          2879.\n 6 Antigua an…     0     0     0      97929 4.4 e2 1.73e3  2.08e3         17643.\n 7 Argentina       0     1     0   45195774 2.74e6 4.50e5  1.04e6          9949.\n 8 Armenia         0     0     0    2963243 2.85e4 1.37e4  3.84e4          4614.\n 9 Australia       0     1     1   25499884 7.68e6 1.39e6  1.28e6         54615.\n10 Austria         0     0     1    9006398 8.24e4 4.46e5  5.03e5         49555.\n# … with 176 more rows, and 9 more variables: PPP_per_capita <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>"
  },
  {
    "objectID": "slide/slide09.html#列の順番変更-relocate使用",
    "href": "slide/slide09.html#列の順番変更-relocate使用",
    "title": "ミクロ政治データ分析実習",
    "section": "列の順番変更: relocate()使用",
    "text": "列の順番変更: relocate()使用\nrelocate()の使い方\n\n.after = XXX: XXX列の後ろへ移動 / .before = YYY: YYY列の前へ移動\n\n\nデータ %>%\n    relocate(移動したい変数名, .after = 変更先)\n\n例) G7からOECD列をCountryの後ろへ移動\n\ndf %>%\n    relocate(G7:OECD, .after = Country)  # .before = PopulationもOK\n\n# A tibble: 186 × 18\n   Country        G7   G20  OECD Population   Area    GDP     PPP GDP_per_capita\n   <chr>       <dbl> <dbl> <dbl>      <dbl>  <dbl>  <dbl>   <dbl>          <dbl>\n 1 Afghanistan     0     0     0   38928346 6.53e5 1.91e4  8.27e4           491.\n 2 Albania         0     0     0    2877797 2.74e4 1.53e4  3.97e4          5309.\n 3 Algeria         0     0     0   43851044 2.38e6 1.70e5  4.97e5          3876.\n 4 Andorra         0     0     0      77265 4.7 e2 3.15e3 NA              40821.\n 5 Angola          0     0     0   32866272 1.25e6 9.46e4  2.19e5          2879.\n 6 Antigua an…     0     0     0      97929 4.4 e2 1.73e3  2.08e3         17643.\n 7 Argentina       0     1     0   45195774 2.74e6 4.50e5  1.04e6          9949.\n 8 Armenia         0     0     0    2963243 2.85e4 1.37e4  3.84e4          4614.\n 9 Australia       0     1     1   25499884 7.68e6 1.39e6  1.28e6         54615.\n10 Austria         0     0     1    9006398 8.24e4 4.46e5  5.03e5         49555.\n# … with 176 more rows, and 9 more variables: PPP_per_capita <dbl>,\n#   HDI_2018 <dbl>, Polity_Score <dbl>, Polity_Type <chr>, FH_PR <dbl>,\n#   FH_CL <dbl>, FH_Total <dbl>, FH_Status <chr>, Continent <chr>"
  },
  {
    "objectID": "slide/slide09.html#section-2",
    "href": "slide/slide09.html#section-2",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "{dplyr}: 行の抽出"
  },
  {
    "objectID": "slide/slide09.html#行の抽出-書き方",
    "href": "slide/slide09.html#行の抽出-書き方",
    "title": "ミクロ政治データ分析実習",
    "section": "行の抽出: 書き方",
    "text": "行の抽出: 書き方\nfilter()関数を使用\nパイプを使わない書き方\n\nfilter(データ, 条件1, 条件2, ...)\n\nパイプを使う書き方\n\nデータ %>%\n    filter(条件1, 条件2, ...)"
  },
  {
    "objectID": "slide/slide09.html#行の抽出-例",
    "href": "slide/slide09.html#行の抽出-例",
    "title": "ミクロ政治データ分析実習",
    "section": "行の抽出: 例",
    "text": "行の抽出: 例\n例) dfからContinentが\"Europe\"の行を抽出し、Country〜PPP, HDI_2018列を抽出し、HDI_2018はHDIに変更\n\nfilter()とselect()の組み合わせ\n以下の例の場合、filter()とselect()の順番を逆にすることは不可\n\nselect()後、Continent変数がなくなるため\n\n\n\ndf %>%\n    filter(Continent == \"Oceania\") %>%\n    select(Country:PPP, HDI = HDI_2018)\n\n# A tibble: 4 × 6\n  Country          Population    Area      GDP      PPP   HDI\n  <chr>                 <dbl>   <dbl>    <dbl>    <dbl> <dbl>\n1 Australia          25499884 7682300 1392681. 1275027. 0.938\n2 Fiji                 896445   18270    5536.   12496. 0.724\n3 New Zealand         4842780  263820  206929.  204260. 0.921\n4 Papua New Guinea    8947024  452860   24970.   37319. 0.543"
  },
  {
    "objectID": "slide/slide09.html#行の抽出-2つ以上の条件and",
    "href": "slide/slide09.html#行の抽出-2つ以上の条件and",
    "title": "ミクロ政治データ分析実習",
    "section": "行の抽出: 2つ以上の条件（AND）",
    "text": "行の抽出: 2つ以上の条件（AND）\n2つ以上の条件を同時に満たす行を抽出\n\n,で条件式を追加するだけ (&もOK)\n\n例) dfからContinentが\"Asia\" (条件1)、HDI_2018が0.8以上 (条件2)の行を抽出し、CountryとHDI_2018列を抽出\n\ndf %>%\n    filter(Continent == \"Asia\", HDI_2018 >= 0.8) %>%\n    select(Country, HDI_2018)\n\n# A tibble: 13 × 2\n   Country              HDI_2018\n   <chr>                   <dbl>\n 1 Bahrain                 0.838\n 2 Brunei                  0.845\n 3 Israel                  0.906\n 4 Japan                   0.915\n 5 Kazakhstan              0.817\n 6 South Korea             0.906\n 7 Kuwait                  0.808\n 8 Malaysia                0.804\n 9 Oman                    0.834\n10 Qatar                   0.848\n11 Saudi Arabia            0.857\n12 Singapore               0.935\n13 United Arab Emirates    0.866"
  },
  {
    "objectID": "slide/slide09.html#行の抽出-2つ以上の条件or",
    "href": "slide/slide09.html#行の抽出-2つ以上の条件or",
    "title": "ミクロ政治データ分析実習",
    "section": "行の抽出: 2つ以上の条件（OR）",
    "text": "行の抽出: 2つ以上の条件（OR）\n2つ以上の条件を片方か両方に満たす行を抽出\n\n|で条件式を追加するだけ\n\n例) dfからContinentが\"Asia\" (条件1)か\"Oceania\" (条件2)であり、HDI_2018が0.9以上 (条件3)の行を抽出し、CountryとHDI_2018、Continent列を抽出\n\ndf %>%\n    filter((Continent == \"Asia\" | Continent == \"Oceania\"), HDI_2018 >= 0.9) %>%\n    select(Country, HDI_2018, Continent)\n\n# A tibble: 6 × 3\n  Country     HDI_2018 Continent\n  <chr>          <dbl> <chr>    \n1 Australia      0.938 Oceania  \n2 Israel         0.906 Asia     \n3 Japan          0.915 Asia     \n4 South Korea    0.906 Asia     \n5 New Zealand    0.921 Oceania  \n6 Singapore      0.935 Asia"
  },
  {
    "objectID": "slide/slide09.html#参考-in演算子",
    "href": "slide/slide09.html#参考-in演算子",
    "title": "ミクロ政治データ分析実習",
    "section": "参考) %in%演算子",
    "text": "参考) %in%演算子\n%in%: |の代わりに使用可能な便利な演算子\n例) Continentの値がc(\"Asia\", \"Oceainia\")の要素に含まれている場合\n\ndf %>%\n    filter(Continent %in% c(\"Asia\", \"Oceania\"), HDI_2018 >= 0.9) %>%\n    select(Country, HDI_2018, Continent)\n\n# A tibble: 6 × 3\n  Country     HDI_2018 Continent\n  <chr>          <dbl> <chr>    \n1 Australia      0.938 Oceania  \n2 Israel         0.906 Asia     \n3 Japan          0.915 Asia     \n4 South Korea    0.906 Asia     \n5 New Zealand    0.921 Oceania  \n6 Singapore      0.935 Asia"
  },
  {
    "objectID": "slide/slide09.html#欠損値が含まれた行の扱い",
    "href": "slide/slide09.html#欠損値が含まれた行の扱い",
    "title": "ミクロ政治データ分析実習",
    "section": "欠損値が含まれた行の扱い",
    "text": "欠損値が含まれた行の扱い\ndfのPPPが欠損している行を抽出し、CountryからPPP列まで出力\n\n変数名 == NAを条件にしてはいけない\n\n\ndf %>%\n    filter(PPP == NA) %>%\n    select(Country:PPP)\n\n# A tibble: 0 × 5\n# … with 5 variables: Country <chr>, Population <dbl>, Area <dbl>, GDP <dbl>,\n#   PPP <dbl>"
  },
  {
    "objectID": "slide/slide09.html#欠損値が含まれた行の扱い-1",
    "href": "slide/slide09.html#欠損値が含まれた行の扱い-1",
    "title": "ミクロ政治データ分析実習",
    "section": "欠損値が含まれた行の扱い",
    "text": "欠損値が含まれた行の扱い\ndfのPPPが欠損している行を抽出し、CountryからPPP列まで出力\n\n正解: is.na(変数名)\n\n\ndf %>%\n    filter(is.na(PPP)) %>%\n    select(Country:PPP)\n\n# A tibble: 8 × 5\n  Country        Population   Area     GDP   PPP\n  <chr>               <dbl>  <dbl>   <dbl> <dbl>\n1 Andorra             77265    470   3154.    NA\n2 Cuba             11326616 106440 100023     NA\n3 Holy See              801      0     NA     NA\n4 Liechtenstein       38128    160   6553.    NA\n5 Monaco              39242      1   7188.    NA\n6 Somalia          15893222 627340    917.    NA\n7 Syria            17500658 183630  40405.    NA\n8 Western Sahara     597339 266000    909.    NA"
  },
  {
    "objectID": "slide/slide09.html#欠損値が含まれた行の除外",
    "href": "slide/slide09.html#欠損値が含まれた行の除外",
    "title": "ミクロ政治データ分析実習",
    "section": "欠損値が含まれた行の除外",
    "text": "欠損値が含まれた行の除外\ndfのPPPが欠損している行を除外し、CountryからPPP列まで出力\n\n否定を意味する!を使用する\n\n\ndf %>%\n    filter(!is.na(PPP)) %>%\n    select(Country:PPP)\n\n# A tibble: 178 × 5\n   Country             Population    Area      GDP      PPP\n   <chr>                    <dbl>   <dbl>    <dbl>    <dbl>\n 1 Afghanistan           38928346  652860   19101.   82737.\n 2 Albania                2877797   27400   15278.   39658.\n 3 Algeria               43851044 2381740  169988.  496572.\n 4 Angola                32866272 1246700   94635.  218533.\n 5 Antigua and Barbuda      97929     440    1728.    2083.\n 6 Argentina             45195774 2736690  449663. 1036721.\n 7 Armenia                2963243   28470   13673.   38446.\n 8 Australia             25499884 7682300 1392681. 1275027.\n 9 Austria                9006398   82409  446315.  502771.\n10 Azerbaijan            10139177   82658   48048.  144556.\n# … with 168 more rows"
  },
  {
    "objectID": "slide/slide09.html#もう一つの方法",
    "href": "slide/slide09.html#もう一つの方法",
    "title": "ミクロ政治データ分析実習",
    "section": "もう一つの方法",
    "text": "もう一つの方法\ndrop_na()関数を利用\n\n()内で指定した変数が欠損している行をすべて除外（複数指定可）\n\n\ndf %>%\n  drop_na(PPP, Polity_Score) %>% # PPPとPolity_Scoreどちらか欠損した行を除外\n  select(Country:PPP, Polity_Score)\n\n# A tibble: 155 × 6\n   Country     Population    Area      GDP      PPP Polity_Score\n   <chr>            <dbl>   <dbl>    <dbl>    <dbl>        <dbl>\n 1 Afghanistan   38928346  652860   19101.   82737.           -1\n 2 Albania        2877797   27400   15278.   39658.            9\n 3 Algeria       43851044 2381740  169988.  496572.            2\n 4 Angola        32866272 1246700   94635.  218533.           -2\n 5 Argentina     45195774 2736690  449663. 1036721.            9\n 6 Armenia        2963243   28470   13673.   38446.            7\n 7 Australia     25499884 7682300 1392681. 1275027.           10\n 8 Austria        9006398   82409  446315.  502771.           10\n 9 Azerbaijan    10139177   82658   48048.  144556.           -7\n10 Bahrain        1701575     760   38574.   74230.          -10\n# … with 145 more rows"
  },
  {
    "objectID": "slide/slide09.html#section-3",
    "href": "slide/slide09.html#section-3",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "{dplyr}: 行のソート"
  },
  {
    "objectID": "slide/slide09.html#行のソート-書き方",
    "href": "slide/slide09.html#行のソート-書き方",
    "title": "ミクロ政治データ分析実習",
    "section": "行のソート: 書き方",
    "text": "行のソート: 書き方\narrange()関数を使用\nパイプを使わない書き方\n\narrange(データ, 変数名1, 変数名2, ...)\n\nパイプを使う書き方\n\nデータ %>%\n    arrange(変数名1, 変数名2, ...)\n\n基本的には昇順 (値が小さい行が先にくる)\n\n降順にする場合はdesc(変数名)\n変数名1を基準にソートし、同点の場合は変数名2を基準に"
  },
  {
    "objectID": "slide/slide09.html#行のソート-例",
    "href": "slide/slide09.html#行のソート-例",
    "title": "ミクロ政治データ分析実習",
    "section": "行のソート: 例",
    "text": "行のソート: 例\n例) dfからContinentの値が\"Africa\"の行のみを抽出し、Polity_Scoreが高い行を上位にする。そして、CountryとPPP_per_capita、Polity_Score列のみ残す。\n\nPolity Scoreが高い (低い) = より民主主義 (権威主義)に近い\n\n\ndf %>%\n    filter(Continent == \"Africa\") %>%\n    arrange(desc(Polity_Score)) %>%\n    select(Country, PPP_per_capita, Polity_Score)\n\n# A tibble: 54 × 3\n   Country      PPP_per_capita Polity_Score\n   <chr>                 <dbl>        <dbl>\n 1 Mauritius            22637.           10\n 2 Kenya                 4105.            9\n 3 South Africa         12605.            9\n 4 Botswana             17311.            8\n 5 Ghana                 5097.            8\n 6 Lesotho               3019.            8\n 7 Benin                 3067.            7\n 8 Liberia               1461.            7\n 9 Nigeria               5018.            7\n10 Senegal               3248.            7\n# … with 44 more rows"
  },
  {
    "objectID": "slide/slide09.html#行のソート-応用",
    "href": "slide/slide09.html#行のソート-応用",
    "title": "ミクロ政治データ分析実習",
    "section": "行のソート: 応用",
    "text": "行のソート: 応用\n\ndfからアフリカのみを抽出し、Polity_Scoreが低い行を上位に\nPolity_Scoreが同点の場合、PPP_per_capitaが高い行を上位に\nCountryとPolity_Score, PPP_per_capita列のみ残す\nPolity_ScoreはPolityに、PPP_per_capitaはPPPと名前を変更\n\n\ndf %>%\n    filter(Continent == \"Africa\") %>%\n    arrange(Polity_Score, desc(PPP_per_capita)) %>%\n    select(Country, Polity = Polity_Score, PPP = PPP_per_capita)\n\n# A tibble: 54 × 3\n   Country             Polity    PPP\n   <chr>                <dbl>  <dbl>\n 1 Eswatini                -9  8634.\n 2 Eritrea                 -7  1860.\n 3 Equatorial Guinea       -6 19458.\n 4 Egypt                   -4 11198.\n 5 Morocco                 -4  7554.\n 6 Sudan                   -4  4063.\n 7 Cameroon                -4  3506.\n 8 Congo (Brazzaville)     -4  3191.\n 9 Comoros                 -3  3007.\n10 Rwanda                  -3  2008.\n# … with 44 more rows\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "slide/slide08.html#データ構造とは",
    "href": "slide/slide08.html#データ構造とは",
    "title": "ミクロ政治データ分析実習",
    "section": "データ構造とは",
    "text": "データ構造とは\n\nデータ構造 (data structure): 一つ以上のベクトルの集合\n\nベクトルはRにおけるデータの最小単位\n\n\"Cat\"や5も長さ1のベクトルであり、原子ベクトル (atomic vector) とも呼ばれ、中でもnumeric型の長さ1のベクトルはスカラー (scalar) とも呼ばれる。\n\n\n\n\n\n行列構造\n\n\n\n\n\n\n\n\n\n\n\n\nデータ・フレーム構造"
  },
  {
    "objectID": "slide/slide08.html#データ構造の種類",
    "href": "slide/slide08.html#データ構造の種類",
    "title": "ミクロ政治データ分析実習",
    "section": "データ構造の種類",
    "text": "データ構造の種類\n本講義で使うデータ構造は主にベクトル (vector) とデータ・フレーム (data.frame) とその拡張版のティブル (tibble) のみであるため、行列 (matrix) 、配列 (array) 、リスト (array) の説明は割愛する。\n\nベクトル (vector)\n行列 (matrix)\n\n配列 (array)\n行列は層 (layer) が1つのみの配列\n\nデータ・フレーム (data.frame)\n\nティブル (tibble): データ・フレームの拡張版\n\nリスト (list)\n\n他にもRには数百、数千種類のデータ構造があるが、その中身は実質リスト構造である場合が多い。"
  },
  {
    "objectID": "slide/slide08.html#ベクトル-vector",
    "href": "slide/slide08.html#ベクトル-vector",
    "title": "ミクロ政治データ分析実習",
    "section": "ベクトル (vector)",
    "text": "ベクトル (vector)\n同じデータ型が一つ以上格納されているオブジェクト\n\nRにおけるデータの最小単位\n\nRには数百、数千種類のデータ構造が存在するが、その最小単位はベクトルである。\n\n長さは1以上\n\n\nmy_vec1 <- \"R is fun!\"      # 長さ1のcharacter型ベクトル\nmy_vec2 <- c(1, 3, 5, 6, 7) # 長さ5のnumeric型ベクトル\n\n\n一つのベクトル内の全ての要素は同じデータ型\n\n優先順位はcharacter型 > numeric型 > logical型\n\n\n\n# 長さ6のベクトルであるが、2つのデータ型が混在しているため、character型が優先\nmy_vec3 <- c(\"A\", \"B\", \"C\", 1, 2, 3)\nmy_vec3\n\n[1] \"A\" \"B\" \"C\" \"1\" \"2\" \"3\"\n\n# 長さ4のベクトルであるが、2つのデータ型が混在しているため、numeric型が優先される \n# 参考1) TRUEは1に、FALSEは0に変換される。\n# 参考2) logical -> characterの場合、TRUEは\"TRUE\"に、FALSEは\"FALSE\"に\nmy_vec4 <- c(10, 20, TRUE, FALSE)\nmy_vec4\n\n[1] 10 20  1  0"
  },
  {
    "objectID": "slide/slide08.html#ベクトルの操作-復習",
    "href": "slide/slide08.html#ベクトルの操作-復習",
    "title": "ミクロ政治データ分析実習",
    "section": "ベクトルの操作 (復習)",
    "text": "ベクトルの操作 (復習)\nデータ型、長さなど\n\nclass(オブジェクト名): データ型\nlength(オブジェクト名): ベクトルの長さ（要素数）\nnchar(オブジェクト名): Character型の場合、各要素の文字数\n\n要素の抽出\n\nオブジェクト名[n]: n番目の要素を抽出\nオブジェクト名[n:k]: n番目からk番目の要素を抽出\nオブジェクト名[c(i, j, k, ...)]: i、j、k、…番目の要素を抽出\nオブジェクト名[c(TRUE, FALSE, TRUE, ...)]: TRUEに対応する位置の要素を抽出"
  },
  {
    "objectID": "slide/slide08.html#numeric型ベクトルの演算-復習",
    "href": "slide/slide08.html#numeric型ベクトルの演算-復習",
    "title": "ミクロ政治データ分析実習",
    "section": "Numeric型ベクトルの演算 (復習)",
    "text": "Numeric型ベクトルの演算 (復習)\n\nケース1: 同じ長さのベクトル同士\n\n同じ位置の要素同士の演算\n\nケース2: 異なる長さのベクトル同士\n\n短い方のベクトルがリサイクルされる"
  },
  {
    "objectID": "slide/slide08.html#行列-matrix",
    "href": "slide/slide08.html#行列-matrix",
    "title": "ミクロ政治データ分析実習",
    "section": "行列 (matrix)",
    "text": "行列 (matrix)\n\nnumeric型、またはcomplex型の縦ベクトルを横に並べたデータ構造\n3 \\(\\times\\) 4の行列の例\n\n\nmy_mat1 <- matrix(1:12, nrow = 3)\nmy_mat1\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n\n長さ3のnumeric型縦ベクトルが4つ並んでいる模様\n長さ4のnumeric型横ベクトルが3つ積まれているとも読めるが、データ分析では一般的に縦ベクトルの集合として行列を捉える。"
  },
  {
    "objectID": "slide/slide08.html#行列の作成",
    "href": "slide/slide08.html#行列の作成",
    "title": "ミクロ政治データ分析実習",
    "section": "行列の作成",
    "text": "行列の作成\n\nmatrix()関数を使用\n\n第1引数としてnumericまたはcomplex型ベクトル、nrow引数で行列の行数を指定\n要素が入る順番に注意\n\n\n\n\n\\[\n\\begin{bmatrix}\n5 & 2 & 9 & 6 \\\\\n5 & 4 & -8 & 2 \\\\\n-3 & 3 & 0 & 7\n\\end{bmatrix}\n\\]\n\nmy_mat2 <- matrix(c(5, 5, -3, 2, 4, 3, \n                    9, -8, 0, 6, 2, 7), \n                  nrow = 3)\nmy_mat2\n\n     [,1] [,2] [,3] [,4]\n[1,]    5    2    9    6\n[2,]    5    4   -8    2\n[3,]   -3    3    0    7"
  },
  {
    "objectID": "slide/slide08.html#行列の操作",
    "href": "slide/slide08.html#行列の操作",
    "title": "ミクロ政治データ分析実習",
    "section": "行列の操作",
    "text": "行列の操作\n本講義では使用しないため、説明は割愛する。\n\nclass(my_mat1) # my_mat1のデータ構造\n\n[1] \"matrix\" \"array\" \n\ndim(my_mat1)   # 行列の行数と列数\n\n[1] 3 4\n\nnrow(my_mat1)  # 行列の行数\n\n[1] 3\n\nncol(my_mat1)  # 行列の列数\n\n[1] 4\n\nmy_mat1[1, ]   # my_matの1「行」目を抽出\n\n[1]  1  4  7 10\n\nmy_mat1[, 3]   # my_matの3「列」目を抽出\n\n[1] 7 8 9\n\nmy_mat1[2, 4]  # my_matの2「行」、4「列」目を抽出\n\n[1] 11"
  },
  {
    "objectID": "slide/slide08.html#行列の演算",
    "href": "slide/slide08.html#行列の演算",
    "title": "ミクロ政治データ分析実習",
    "section": "行列の演算",
    "text": "行列の演算\n本講義では使用しないため、説明は割愛する。\n\n線形代数を勉強する人には便利な演算子\n\n\n\n\n演算子/関数\n説明\n\n\n\n\n+\n行列の足し算\n\n\n-\n行列の引き算\n\n\n%*%\n行列の掛け算\n\n\n/\n行列の割り算\n\n\n*\n行列のアダマール積 (Hadamard product)\n\n\nt(オブジェクト名)\n行列の転置\n\n\nqr(オブジェクト名)$rank\n行列の階数\n\n\nsolve(オブジェクト名)\n逆行列\n\n\neigen(オブジェクト名)\n行列の固有値"
  },
  {
    "objectID": "slide/slide08.html#配列-array",
    "href": "slide/slide08.html#配列-array",
    "title": "ミクロ政治データ分析実習",
    "section": "配列 (array)",
    "text": "配列 (array)\n行列を重ねたもの\n\n行列は層 (layer) が1つのみの配列\n3次元のデータ構造であり、要素抽出の際、[x, y, z]で指定する必要がある。\n\n配列から行列を抽出したら、あとは行列の同じ操作\n3番目のzが配列の層 (layer)を意味する\n\n各層の行列の大きさは全て同じ"
  },
  {
    "objectID": "slide/slide08.html#データフレーム-紹介",
    "href": "slide/slide08.html#データフレーム-紹介",
    "title": "ミクロ政治データ分析実習",
    "section": "データフレーム: 紹介",
    "text": "データフレーム: 紹介\n\n表形式データ\n縦ベクトルを横に並べたもの\n一つ一つの列はベクトルであるため、一つの列は同じデータ型\n\n全列が同じデータ型である必要はない。\n\n詳しい操作方法は次回以降（データ・ハンドリング）の講義で解説"
  },
  {
    "objectID": "slide/slide08.html#データフレームの作成-1",
    "href": "slide/slide08.html#データフレームの作成-1",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレームの作成 (1)",
    "text": "データ・フレームの作成 (1)\n自分で作成する場合\n\ndata.frame()、またはtibble()関数を使用\n\ntibble()関数を使う前に{tidyverse}パッケージを読み込む\n\n\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "slide/slide08.html#データフレームの作成-2",
    "href": "slide/slide08.html#データフレームの作成-2",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレームの作成 (2)",
    "text": "データ・フレームの作成 (2)\nデータ・フレームを直接作成する方法\n\nmy_df1 <- tibble(Name       = c(\"Kansai\", \"Kangaku\", \"Doshisha\", \"Ritsumeikan\"),\n                 Foundation = c(1886, 1889, 1875, 1900),\n                 Students   = c(27736, 23671, 25974, 32467))\n\nmy_df1\n\n# A tibble: 4 × 3\n  Name        Foundation Students\n  <chr>            <dbl>    <dbl>\n1 Kansai            1886    27736\n2 Kangaku           1889    23671\n3 Doshisha          1875    25974\n4 Ritsumeikan       1900    32467"
  },
  {
    "objectID": "slide/slide08.html#データフレームの作成-3",
    "href": "slide/slide08.html#データフレームの作成-3",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレームの作成 (3)",
    "text": "データ・フレームの作成 (3)\nベクトルから作成する方法\n\nName <- c(\"Tokyo\", \"Nagoya\", \"Osaka\", \"Fukuoka\")\nFood <- c(\"Monja\", \"Tebasaki\", \"Takoyaki\", \"Ramen\")\nPop  <- c(1396, 755, 882, 511)\nArea <- c(2194, 5173, 1899, 4987)\n\nmy_df2 <- tibble(Name, Pop, Area, Food)\n\nmy_df2\n\n# A tibble: 4 × 4\n  Name      Pop  Area Food    \n  <chr>   <dbl> <dbl> <chr>   \n1 Tokyo    1396  2194 Monja   \n2 Nagoya    755  5173 Tebasaki\n3 Osaka     882  1899 Takoyaki\n4 Fukuoka   511  4987 Ramen"
  },
  {
    "objectID": "slide/slide08.html#データフレームの作成-4",
    "href": "slide/slide08.html#データフレームの作成-4",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレームの作成 (4)",
    "text": "データ・フレームの作成 (4)\n表形式ファイルの読み込み\n\nread_csv()を使用する前に{tidyverse}を読み込んでおく（今回は読み込み済み）。\n\n\nmy_df3 <- read_csv(\"Data/BuildingData.csv\") # 第6回のデータ\n\nmy_df3\n\n# A tibble: 47 × 5\n      ID Pref   Finance Over65 Turnout\n   <dbl> <chr>    <dbl>  <dbl>   <dbl>\n 1     1 北海道   0.462   32.3    58.8\n 2     2 青森県   0.358   33.7    52.9\n 3     3 岩手県   0.372   33.8    60.4\n 4     4 宮城県   0.626   28.4    55.9\n 5     5 秋田県   0.322   37.6    58.2\n 6     6 山形県   0.379   34.0    64.3\n 7     7 福島県   0.545   31.8    58.0\n 8     8 茨城県   0.656   30.3    52.5\n 9     9 栃木県   0.648   29.6    53.1\n10    10 群馬県   0.638   30.9    53.9\n# … with 37 more rows"
  },
  {
    "objectID": "slide/slide08.html#データフレームの確認-1",
    "href": "slide/slide08.html#データフレームの確認-1",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレームの確認 (1)",
    "text": "データ・フレームの確認 (1)\n\nclass(): データ構造の確認\n\n\nclass(my_df3) # my_df2のデータ構造\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\n\nis.data.frame(): データ・フレームか否かを判定\n\n\nis.data.frame(my_df3)\n\n[1] TRUE\n\n\n\nnrow(): データ・フレームの行数\n\n\nnrow(my_df1) # my_df1の行数\n\n[1] 4\n\n\n\nncol(): データ・フレームの列数\n\n\nncol(my_df2) # my_df2の列数\n\n[1] 4"
  },
  {
    "objectID": "slide/slide08.html#データフレームの確認-2",
    "href": "slide/slide08.html#データフレームの確認-2",
    "title": "ミクロ政治データ分析実習",
    "section": "データフレームの確認 (2)",
    "text": "データフレームの確認 (2)\n\nhead(): 最初の6行のみ出力\ntail(): 最後の6行を出力\n\nn = 5を追加すると、最初 (最後) の5行を出力（任意の数字）\n\nnames(): 変数名のみ出力\n\n\nhead()tail()names()\n\n\n\n\n\nhead(my_df3)\n\n# A tibble: 6 × 5\n     ID Pref   Finance Over65 Turnout\n  <dbl> <chr>    <dbl>  <dbl>   <dbl>\n1     1 北海道   0.462   32.3    58.8\n2     2 青森県   0.358   33.7    52.9\n3     3 岩手県   0.372   33.8    60.4\n4     4 宮城県   0.626   28.4    55.9\n5     5 秋田県   0.322   37.6    58.2\n6     6 山形県   0.379   34.0    64.3\n\n\n\n\n\n\nhead(my_df3, n = 10)\n\n# A tibble: 10 × 5\n      ID Pref   Finance Over65 Turnout\n   <dbl> <chr>    <dbl>  <dbl>   <dbl>\n 1     1 北海道   0.462   32.3    58.8\n 2     2 青森県   0.358   33.7    52.9\n 3     3 岩手県   0.372   33.8    60.4\n 4     4 宮城県   0.626   28.4    55.9\n 5     5 秋田県   0.322   37.6    58.2\n 6     6 山形県   0.379   34.0    64.3\n 7     7 福島県   0.545   31.8    58.0\n 8     8 茨城県   0.656   30.3    52.5\n 9     9 栃木県   0.648   29.6    53.1\n10    10 群馬県   0.638   30.9    53.9\n\n\n\n\n\n\n\n\n\ntail(my_df3)\n\n# A tibble: 6 × 5\n     ID Pref     Finance Over65 Turnout\n  <dbl> <chr>      <dbl>  <dbl>   <dbl>\n1    42 長崎県     0.348   33.2    56.9\n2    43 熊本県     0.427   31.7    56.4\n3    44 大分県     0.395   33.5    57.3\n4    45 宮崎県     0.358   32.9    53.7\n5    46 鹿児島県   0.353   32.7    57.7\n6    47 沖縄県     0.375   22.7    54.9\n\n\n\n\n\n\ntail(my_df3, n = 3)\n\n# A tibble: 3 × 5\n     ID Pref     Finance Over65 Turnout\n  <dbl> <chr>      <dbl>  <dbl>   <dbl>\n1    45 宮崎県     0.358   32.9    53.7\n2    46 鹿児島県   0.353   32.7    57.7\n3    47 沖縄県     0.375   22.7    54.9\n\n\n\n\n\n\n\nnames(my_df3)\n\n[1] \"ID\"      \"Pref\"    \"Finance\" \"Over65\"  \"Turnout\""
  },
  {
    "objectID": "slide/slide08.html#データフレーム-行の抽出",
    "href": "slide/slide08.html#データフレーム-行の抽出",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレーム: 行の抽出",
    "text": "データ・フレーム: 行の抽出\n\n\n\nmy_df3[27, ]\n\n# A tibble: 1 × 5\n     ID Pref   Finance Over65 Turnout\n  <dbl> <chr>    <dbl>  <dbl>   <dbl>\n1    27 大阪府   0.792   27.7    56.2\n\nclass(my_df3[27, ])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\nmy_df3[c(13, 27, 40), ]\n\n# A tibble: 3 × 5\n     ID Pref   Finance Over65 Turnout\n  <dbl> <chr>    <dbl>  <dbl>   <dbl>\n1    13 東京都   1.15    23.3    57.2\n2    27 大阪府   0.792   27.7    56.2\n3    40 福岡県   0.658   28.2    52.1\n\nclass(my_df3[c(13, 27, 40), ])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "slide/slide08.html#データフレーム-列の抽出-1",
    "href": "slide/slide08.html#データフレーム-列の抽出-1",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレーム: 列の抽出 (1)",
    "text": "データ・フレーム: 列の抽出 (1)\n\n\n\nmy_df3[, 2]\n\n# A tibble: 47 × 1\n   Pref  \n   <chr> \n 1 北海道\n 2 青森県\n 3 岩手県\n 4 宮城県\n 5 秋田県\n 6 山形県\n 7 福島県\n 8 茨城県\n 9 栃木県\n10 群馬県\n# … with 37 more rows\n\nclass(my_df3[, 2])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\nmy_df3[, c(2, 4, 5)]\n\n# A tibble: 47 × 3\n   Pref   Over65 Turnout\n   <chr>   <dbl>   <dbl>\n 1 北海道   32.3    58.8\n 2 青森県   33.7    52.9\n 3 岩手県   33.8    60.4\n 4 宮城県   28.4    55.9\n 5 秋田県   37.6    58.2\n 6 山形県   34.0    64.3\n 7 福島県   31.8    58.0\n 8 茨城県   30.3    52.5\n 9 栃木県   29.6    53.1\n10 群馬県   30.9    53.9\n# … with 37 more rows\n\nclass(my_df3[, c(2, 4, 5)])\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "slide/slide08.html#データフレーム-列の抽出-1-1",
    "href": "slide/slide08.html#データフレーム-列の抽出-1-1",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレーム: 列の抽出 (1)",
    "text": "データ・フレーム: 列の抽出 (1)\n\nmy_df3$Pref\n\n [1] \"北海道\"   \"青森県\"   \"岩手県\"   \"宮城県\"   \"秋田県\"   \"山形県\"  \n [7] \"福島県\"   \"茨城県\"   \"栃木県\"   \"群馬県\"   \"埼玉県\"   \"千葉県\"  \n[13] \"東京都\"   \"神奈川県\" \"新潟県\"   \"富山県\"   \"石川県\"   \"福井県\"  \n[19] \"山梨県\"   \"長野県\"   \"岐阜県\"   \"静岡県\"   \"愛知県\"   \"三重県\"  \n[25] \"滋賀県\"   \"京都府\"   \"大阪府\"   \"兵庫県\"   \"奈良県\"   \"和歌山県\"\n[31] \"鳥取県\"   \"島根県\"   \"岡山県\"   \"広島県\"   \"山口県\"   \"徳島県\"  \n[37] \"香川県\"   \"愛媛県\"   \"高知県\"   \"福岡県\"   \"佐賀県\"   \"長崎県\"  \n[43] \"熊本県\"   \"大分県\"   \"宮崎県\"   \"鹿児島県\" \"沖縄県\"  \n\n\n返り値はデータ・フレームでなく、ベクトル\n\nデータ構造がベクトルの場合、class()はデータ型が出力される。\n\n\nclass(my_df3$Pref)\n\n[1] \"character\""
  },
  {
    "objectID": "slide/slide08.html#データフレーム-抽出方法の比較",
    "href": "slide/slide08.html#データフレーム-抽出方法の比較",
    "title": "ミクロ政治データ分析実習",
    "section": "データ・フレーム: 抽出方法の比較",
    "text": "データ・フレーム: 抽出方法の比較\n抽出方法によって返り値のデータ構造が異なる。\n\n[]を用いた抽出は返り値がデータ・フレーム\n$を用いた抽出は返り値がベクトル\n\n\n\n\n\n\n\n\n\n\nコード\n意味\n返り値\n備考\n\n\n\n\nデータ・フレーム名[i, ]\ni番目の行を抽出\nデータ・フレーム\niは任意のベクトル\n\n\nデータ・フレーム名[, i]\ni番目の列を抽出\nデータ・フレーム\niは任意のベクトル\n\n\nデータ・フレーム名$列名\n当該列を抽出\nベクトル"
  },
  {
    "objectID": "slide/slide08.html#リスト",
    "href": "slide/slide08.html#リスト",
    "title": "ミクロ政治データ分析実習",
    "section": "リスト",
    "text": "リスト\n\nあらゆるデータ構造が格納できるデータ構造\n\nRに存在する多くのオブジェクトはリストであるため、Rでデータを自由自在に操るためにはリストの知識が必須\nただし、本講義ではリストは使わない。\n\n\n\n作成中身抽出 (1)抽出 (2)\n\n\n\nmy_list <- list(Vector1 = my_vec1,\n                Vector2 = my_vec4,\n                Matrix  = my_mat1)\n\n\n\n\nmy_list\n\n$Vector1\n[1] \"R is fun!\"\n\n$Vector2\n[1] 10 20  1  0\n\n$Matrix\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n\n\nリスト名[[i]]の場合、リストのi番目要素が抽出される。\n\nmy_list[[2]]\n\n[1] 10 20  1  0\n\n\n\n\n要素に名前がついてある場合、リスト名$要素名でも抽出可能\n\nmy_list$Matrix\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n\n\n\n\n\n\n\nhttps://www.jaysong.net/micro-book"
  },
  {
    "objectID": "HW/HW05.html",
    "href": "HW/HW05.html",
    "title": "第5回課題",
    "section": "",
    "text": "Step2: NIIオンライン分析システムを起動し、課題用のプロジェクトを作成する。\nStep3: プロジェクト・フォルダーに課題用ファイルをアップロードする。\nStep4: アップロードしたファイルを開き、一旦、Knitしてみる。\nStep5: 以下のボタンをクリックし、サンプルファイルを確認する。\n サンプルファイルの表示\nStep6: サンプルファイルと同じ結果が得られるように課題用ファイルを修正する。\nStep7: 完成したら出力物（.htmlファイル）を自分のPCにダウンロードする。\nStep8: ダウンロードしたファイルをLMSに提出する。提出する前にダウンロードしたファイルを開き、正しくダウンロードされているかを確認すること。\n注意: 課題の取り組み方が分からない場合、オフィスアワーなどを利用し担当教員と相談すること。"
  },
  {
    "objectID": "HW/HW11.html",
    "href": "HW/HW11.html",
    "title": "「ミクロ政治データ分析実習」第11回課題",
    "section": "",
    "text": "課題用ファイル、課題用データ (1)、課題用データ (2)\n\nStep2: NIIオンライン分析システムを起動し、課題用のプロジェクトを作成する。\nStep3: プロジェクト・フォルダー内にDataフォルダーを作成する。\nStep4: プロジェクト・フォルダーに課題用ファイル（Micro_HW11.Rmd）をアップロードする。\nStep5: Dataフォルダーに課題用データ（Micro_HW11_1.csvとMicro_HW11_2.csv）をアップロードする。\nStep6: 課題用ファイル（Micro_HW11.Rmd）を開き、一旦、Knitしてみる。\nStep7: 以下のボタンをクリックし、サンプルファイルを確認する。\n サンプルファイルの表示\nStep8: サンプルファイルと同じ結果が得られるように課題用ファイルを修正する。\n\n提出者の学籍番号・氏名の修正を忘れないこと。\nチャンク内の# この行を削除し、コードを入力の部分を削除し、コードを入力する。\n\nStep9: 完成したら出力物（.htmlファイル）を自分のPCにダウンロードする。\nStep10: ダウンロードしたファイルをLMSに提出する。提出する前にダウンロードしたファイルを開き、正しくダウンロードされているかを確認すること。\n注意: 課題の取り組み方が分からない場合、オフィスアワーなどを利用し担当教員と相談すること。"
  },
  {
    "objectID": "HW/HW10.html",
    "href": "HW/HW10.html",
    "title": "第10回課題",
    "section": "",
    "text": "Step2: NIIオンライン分析システムを起動し、課題用のプロジェクトを作成する。\nStep3: プロジェクト・フォルダー内にDataフォルダーを作成する。\nStep4: プロジェクト・フォルダーに課題用ファイル（Micro_HW10.Rmd）をアップロードする。\nStep5: Dataフォルダーに課題用データ（Micro_HW10.csv）をアップロードする。\nStep6: 課題用ファイル（Micro_HW10.Rmd）を開き、一旦、Knitしてみる。\nStep7: 以下のボタンをクリックし、サンプルファイルを確認する。\n サンプルファイルの表示\nStep8: サンプルファイルと同じ結果が得られるように課題用ファイルを修正する。\n\n提出者の学籍番号・氏名の修正を忘れないこと。\n\nStep9: 完成したら出力物（.htmlファイル）を自分のPCにダウンロードする。\nStep10: ダウンロードしたファイルをLMSに提出する。提出する前にダウンロードしたファイルを開き、正しくダウンロードされているかを確認すること。\n注意: 課題の取り組み方が分からない場合、オフィスアワーなどを利用し担当教員と相談すること。"
  },
  {
    "objectID": "HW/Final.html",
    "href": "HW/Final.html",
    "title": "期末テスト実施要領",
    "section": "",
    "text": "日時: 2022年7月21日（木）4限（14時40分〜16時10分）\n\n宋から開始の合図があれば開始\n\n場所: TC302教室（指定席; 座席表は授業日までにLMSで公開する）\n持参物: 学生証のみ。PCは大学のPCを使用（持ち込みPC不可）\n\n学生証は宋/TAがいつでも確認できるように机の上に置くこと\n\n持ち込み: 可（インターネット/書籍など使用可能）\n\n携帯は使用禁止（不正行為とみなす）\n\n宋/TAは問題そのものに関する質問（問題の誤りなど）以外、一切受け付けない\n\nエラーメッセージへの対処もテストの一部\n\n不正行為厳禁"
  },
  {
    "objectID": "HW/Final.html#概要",
    "href": "HW/Final.html#概要",
    "title": "期末テスト実施要領",
    "section": "概要",
    "text": "概要\n\n日時: 2022年7月21日（木）4限（14時40分〜16時10分）\n\n宋から開始の合図があれば開始\n\n場所: TC302教室（指定席; 座席表は授業日までにLMSで公開する）\n持参物: 学生証のみ。PCは大学のPCを使用（持ち込みPC不可）\n\n学生証は宋/TAがいつでも確認できるように机の上に置くこと\n\n持ち込み: 可（インターネット/書籍など使用可能）\n\n携帯は使用禁止（不正行為とみなす）\n\n宋/TAは問題そのものに関する質問（問題の誤りなど）以外、一切受け付けない\n\nエラーメッセージへの対処もテストの一部\n\n不正行為厳禁"
  },
  {
    "objectID": "HW/Final.html#実施手順",
    "href": "HW/Final.html#実施手順",
    "title": "期末テスト実施要領",
    "section": "実施手順",
    "text": "実施手順\n本講義の課題と同じ形式\n\nStep1: LMSから課題用ファイル一式をダウンロードする。\nStep2: NIIオンライン分析システムを起動し、課題用のプロジェクトを作成する。\nStep3: プロジェクト・フォルダー内にDataフォルダーを作成する。\nStep4: プロジェクト・フォルダーに課題用ファイル（Micro_Final.Rmd）をアップロードする。\nStep5: Dataフォルダーに課題用データ（Micro_Final.csv）をアップロードする。\nStep6: 課題用ファイル（Micro_Final.Rmd）を開き、一旦、Knitしてみる。\nStep7: サンプルファイル（Final_Sample.html）を確認する。\nStep8: サンプルファイルと同じ結果が得られるように課題用ファイルを修正する。\n\n提出者の学籍番号・氏名の修正を忘れないこと。\n\nStep9: 完成したら出力物（.htmlファイル）を自分のPCにダウンロードする。\nStep10: ダウンロードしたファイルをLMSに提出する。提出する前にダウンロードしたファイルを開き、正しくダウンロードされているかを確認すること。"
  },
  {
    "objectID": "HW/Final.html#期末テストの時間について",
    "href": "HW/Final.html#期末テストの時間について",
    "title": "期末テスト実施要領",
    "section": "期末テストの時間について",
    "text": "期末テストの時間について\n\n時間内（〜16:20）の完成を目指す。\n時間内に完成した場合\n\n4限中に提出物（.htmlファイル）をLMSに提出\n\n時間内に完成できなかった場合\n\n4限中に途中経過の提出物（.htmlファイル）をLMSに提出\n\n4限中に7問以上に回答すること\n\n持ち帰り後、そのまま引き続き、残りの問題に取り組む。\n再提出窓口に提出\n\n再提出の期限は授業日当日の23時59分\n\n\n持ち帰り解答の扱いについて\n\n（1）4限中に提出した問題に対して採点を行う。\n（2）持ち帰り解答は5割減点。\n\n4限中に提出した回答以降の回答のみが対象\nつまり、4限中に提出した回答を修正しても、これらは反映されない。\n\n期末テストの点数は(1) + (2)とする。"
  },
  {
    "objectID": "HW/Final.html#成績の例",
    "href": "HW/Final.html#成績の例",
    "title": "期末テスト実施要領",
    "section": "成績の例",
    "text": "成績の例\n\n期限内に24点相当を提出し、20点正解\n期限外に16点相当を提出し、12点正解\n20点 + 16点 \\(\\times\\) 0.5 = 28点\n各問題の配点は難易度に応じて調整される。"
  },
  {
    "objectID": "intro/file.html",
    "href": "intro/file.html",
    "title": "ファイル管理",
    "section": "",
    "text": "フォルダー/ファイルの管理はJupyterHub内でも、RStudio内でもできるが、ここではRStudio側で管理する方法を紹介する。RStudioを起動し、作業するプロジェクトを開き、Filesペインを確認しよう。RStudioを経由したフォルダー/ファイルの管理は全てFilesペイン上で行われる。"
  },
  {
    "objectID": "intro/file.html#フォルダーの管理",
    "href": "intro/file.html#フォルダーの管理",
    "title": "ファイル管理",
    "section": "1 フォルダーの管理",
    "text": "1 フォルダーの管理\n　講義、または課題ごとのプロジェクトを作ったら、JupyterHubにプロジェクトのフォルダーが生成される。各プロジェクトごとにRスクリプト、Markdownファイル、出力物（図、文書など）が管理できるが、プロジェクト内のファイルが多くなる可能性もある。この場合、プロジェクト・フォルダー内に更に下位フォルダーを作成し、ファイルを管理した方が望ましい。\n\n1.1 フォルダーの作成\n手順1: 現在、Filesペインで表示されているフォルダーがプロジェクトの最上位フォルダーであることを確認する。「Home > プロジェクト名」と表示されていれば問題ない。\n\n\n\n\n\n\n\n\n\n手順2: New Folderをクリックする。\n\n\n\n\n\n\n\n\n\n手順3: 作成するフォルダーの名前を入力する。ここではデータなどを集めておくDataという名のフォルダーを作成する。\n\n\n\n\n\n\n\n\n\n手順4: 正しくフォルダーが作成されているかを確認する。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nフォルダー名の付け方\n\n\n\nフォルダー名にはローマ字、数字のみを使おう。スペースもなるべく使わず、空白を入れたい場合はスペースの代わりにアンダースコア（_）を使おう。\n\n\n\n\n\n\n\n\nフォルダー in フォルダー\n\n\n\nフォルダー内に更にフォルダーを作成することもできる。一つのフォルダー内にファイルが多すぎる場合、更にフォルダー分けして管理した方が効率的だろう。\n\n\n\n\n1.2 フォルダーの削除\n\n\n\n\n\n\nフォルダーの削除は慎重に!\n\n\n\nフォルダーを削除するとフォルダー内のファイルも全て削除される。削除する前には慎重にフォルダー内のファイルを確認しておくこと。\n\n\n手順1: 削除するフォルダーの左にチェックを付け、Deleteをクリックする。\n\n\n\n\n\n\n\n\n\n手順2: Yesをクリックする。"
  },
  {
    "objectID": "intro/file.html#ファイルの管理",
    "href": "intro/file.html#ファイルの管理",
    "title": "ファイル管理",
    "section": "2 ファイルの管理",
    "text": "2 ファイルの管理\n　分析に使用するデータセットを自分のPCにダウンロードしてもそのままNIIオンライン分析システムで使うことはできない。NIIオンライン分析システムで使用するためには、ファイルをアップロードする必要がある。これはデータだけでなく、本講義の課題用ファイルについても同様である。\n\n2.1 ファイルのアップロード\n手順1: ファイルをアップロードしたいフォルダーへ移動する。\n\n下位フォルダーへの移動: フォルダー名をクリックする。\n上位フォルダーへの移動: 「..」をクリックするか、パスが表示されているバーで移動先をクリックする。\n\n手順2: ファイルのアップロード先が正しいかを確認し、Uploadをクリックする。\n\n以下の例はHomework_01プロジェクト・フォルダー内のDataフォルダーがアップロード先である。\n\n\n\n\n\n\n\n\n\n\n手順3: File to upload:でアップロードしたいファイルを選択する。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n複数のファイルをアップロードしたい場合\n\n\n\nRStudio上でファイルは一度の一つしかアップロードできない。複数のファイルを同時にアップロードしたい場合は、この作業を繰り返すか、JupyterHubのホーム画面でアップロードする必要がある。\n\n\n手順4: アップロードするファイルをダブルクリックする。\n\n以下ではPrev_Vote.csvというファイルをアップロードする例である。\n\n\n\n\n\n\n\n\n\n\n手順5: OKをクリックする。\n\n\n\n\n\n\n\n\n\n手順6: 正しくファイルがアップロードされているかを確認する。\n\n\n\n\n\n\n\n\n\n\n\n2.2 ファイルのダウンロード\n　作成した図表をLaTex/Microsoft Word/Powerpoint/Pages/Keynoteなどで使うためには、その図表を自分のPCにダウンロードする必要がある。同様に、課題の出力物をLMSに提出するためにも、出力物を一旦自分のPCにダウンロードしてから提出する必要がある。\n\n\n\n\n\n\n複数ファイルのダウンロード\n\n\n\nアップロードは一度ごとに一つのファイルしかアップロードできないが、ダウンロードは複数のファイルを同時にダウンロードできる。ただし、個別のファイルがダウンロードされるのではなく、一つのファイルととして圧縮（zip形式）されてからダウンロードされる。ダウンロード後はファイルを解凍すること。\n\n\n手順1: ダウンロードするファイル名の左にチェックを付ける。\n\n以下ではMicro_HW01.htmlというファイルをダウンロードする例である。\n\n\n\n\n\n\n\n\n\n\n手順2: More > Export…をクリックする。\n\n\n\n\n\n\n\n\n\n手順3: Downloadをクリックする。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n課題の出力物は提出する前に必ず確認を!!\n\n\n\nLMSで課題を提出するためには出力物を提出する必要があるが、提出する前にダウンロードしたファイルを必ず確認しよう。間違ったファイルを提出した場合でも提出期限内なら差し替え可能だが、期限が過ぎた場合、理由を問わず差し替えは認めない。また、間違ったファイルが提出されたことを宋が個別に知らせることもないため注意しよう。\n\n\n\n\n2.3 ファイルの削除\nフォルダーの削除と同じ手順で削除できる。"
  },
  {
    "objectID": "intro/homework.html",
    "href": "intro/homework.html",
    "title": "課題の取り組み方",
    "section": "",
    "text": "課題の取り組み方が分からない?\n\n\n\n必ず宋と相談すること。"
  },
  {
    "objectID": "intro/homework.html#step1-課題ファイル一式の入手",
    "href": "intro/homework.html#step1-課題ファイル一式の入手",
    "title": "課題の取り組み方",
    "section": "Step1: 課題ファイル一式の入手",
    "text": "Step1: 課題ファイル一式の入手\n手順1: LMSの授業ページから「第XX回 課題資料」を選択する。\n\n以下の画面は2021年度のページである。\nタイトルは「第XX回 課題資料」でなく「第XX回 課題用ファイル」など変更される可能性もある。\n\n\n\n\n\n\n\n\n\n\n手順2: 通常、課題ファイルは2つであるが、1つのみ、または3つ以上の場合もある。それぞれの資料の「添付資料」クリックする。\n\n\n\n\n\n\n\n\n\n手順3: 新しいウィンドウが表示される。ここでファイル名をクリックするとファイルがダウンロードされる。この作業を全ファイルに対して行うこと。"
  },
  {
    "objectID": "intro/homework.html#step2-課題ファイルのアップロード",
    "href": "intro/homework.html#step2-課題ファイルのアップロード",
    "title": "課題の取り組み方",
    "section": "Step2: 課題ファイルのアップロード",
    "text": "Step2: 課題ファイルのアップロード\n手順1: NIIオンライン分析システムへアクセスし、RStudioを起動する。\n手順2: 課題用のプロジェクトを作成する。プロジェクト名は任意だが、Homework_XXやHW_XXなど、分かりやすい名前を付けよう。\n手順3: ダウンロードしたファイルにデータ（.csvなど）がある場合、プロジェクト・フォルダー内にDataというフォルダーを作成する。\n手順4: ダウンロードしたファイルをアップロードする。課題用ファイル（.Rmdファイル）はプロジェクト・フォルダー直に、課題用データ（.csv、.xlsxなど）は手順3で作成したDataにアップロードする。\n\n\n\n\n\n\nプロジェクト、フォルダー、ファイルの管理\n\n\n\n以下のページを参照すること。\n\nプロジェクト管理\nファイル管理"
  },
  {
    "objectID": "intro/homework.html#step3-頑張る",
    "href": "intro/homework.html#step3-頑張る",
    "title": "課題の取り組み方",
    "section": "Step3: 頑張る",
    "text": "Step3: 頑張る\n一部の課題を除き、本講義の課題は本サポートページの「課題」メニューに掲載されている画面と同じ結果が得られるようにコードを書くことである。\n\n\n\n\n\n\n学籍番号と名前を忘れずに!\n\n\n\n課題用ファイル（.Rmd）の2行目には「情20-0012 関大太郎」と名前が記入されている。課題に取り組む前にまず学籍番号と名前を修正しよう。毎年、関大太郎と関大花子さんから提出された課題が散見されるが、この場合、課題未提出とみなす。むろん、自分の名前が関大太郎/関大花子なら学籍番号のみ修正しても良い。\n\n\n一部の課題を除き、履修者がやることは「学籍番号と氏名の修正」と「チャンク（chunk）内にコードを入力すること」、そして最後に「Knit」することだけである。チャンク内には# ここにコードと既に何かが書いてあるが、この# ここにコードの行は消してからコードを書くこと。あっても減点にはならない（印象は悪くなるかも知れない）。"
  },
  {
    "objectID": "intro/homework.html#step4-出力物のダウンロード",
    "href": "intro/homework.html#step4-出力物のダウンロード",
    "title": "課題の取り組み方",
    "section": "Step4: 出力物のダウンロード",
    "text": "Step4: 出力物のダウンロード\n本講義の課題は一部を除き、成果として.htmlファイルを提出する。Knit後のHTMLファイルは元のRmdファイル名.htmlである。こちらのファイルをダウンロードしよう。.Rmdも一緒にダウンロードして良いが、指定された形式のファイルを提出すること。.htmlファイルを提出しなければならないのに、.Rmdファイルを提出した場合は未提出とみなす。\n\n\n\n\n\n\n右クリックしてダウンロードは厳禁!!!\n\n\n\n出力物のダウンロード方法はファイル管理を参考すること。JupyterHubのホーム画面でファイルを右クリックして保存することは絶対にしないこと。開いてみれば分かるが、なんの情報もない（ほぼ）空っぽのファイルがダウンロードされる。提出期限が過ぎてから「知りませんでした！ごめんなさい！てへっ」と言われても、宋は「そうか、残念！てへっ」としか言わないので、ダウンロードしたファイルは必ず一回自分で開いてみよう。"
  },
  {
    "objectID": "intro/homework.html#step5-提出",
    "href": "intro/homework.html#step5-提出",
    "title": "課題の取り組み方",
    "section": "Step5: 提出",
    "text": "Step5: 提出\n手順1: LMSの授業ページから「第XX回 課題提出窓口」をクリックする。\n\n\n\n\n\n\n\n\n\n手順2: 指定された形式のファイルを添付し、「レポート提出」クリックする。\n\n提出されたら「202X-XX-XX XX:XX:XX にファイル xxxxxxxx が提出済みです。」と表示される。ここまでできたら終了ボタンをクリックする。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n課題がちゃんと提出されているか不安です…\n\n\n\n自分が提出した課題はLMSの「マイレポート」から確認できる。\n\n\n\n\n\n\n\n\n\n以下のように自分が提出した課題のリストが表示される。提出物のダウンロードもできるため、ファイルが問題なくアップロードされているかも確認できる。"
  },
  {
    "objectID": "intro/install.html",
    "href": "intro/install.html",
    "title": "Rの導入",
    "section": "",
    "text": "本講義の実習はNIIオンライン分析システムの使用を推奨する。自分のPCにインストールしたR + RStudio、RStuio.cloud、大学PCにインストールされているR + RStudioなどの使用を妨げないが1、本ページの資料と同じ結果が得られることは保証しない。また、実習・分析中に起きた不具合についても授業中には対応しない（オフィスアワーなどでは対応可能）。\n　以下ではNIIオンライン分析システムを用いたRおよびRStudioの導入方法について解説する。\n\n\n\n\n\n\n注意!!!\n\n\n\n初期設定は国立情報学研究所（以下、NII）のサーバーに自分の作業用スペースを借りる作業である。つまり、初期設定を繰り返すことはNIIのサーバー（のスペース）をいくつも借りることとなり、サーバーを圧迫してしまう可能性がある。したがって、初期設定は授業全体を通じて1回のみ実行すること。\n\n\n手順1: 以下のアドレスにアクセスする。\n\nhttps://binder.cs.rcos.nii.ac.jp/v2/gh/JaehyunSong/Binder_R/HEAD\n\n手順2: 所属機関に「関西大学」、または「Kansai University」を入力・選択し、「選択」をクリックする。このような画面が表示されない場合は手順2から5は飛ばしても良い。\n\n\n\n\n\n\n\n\n\n手順3: 自分の関西大学のIDをパスワードを入力する。こちらのIDとパスワードは関西大学インフォメーション・システムおよびLMSのID/パスワードと同じである。\n\n\n\n\n\n\n\n\n\n手順4: このまま「同意します」をクリックする。\n\n\n\n\n\n\n\n\n\n手順5: 以下のような画面が表示されたらしばらく待つ。\n\n\n\n\n\n\n\n\n\n手順6: 以下のような画面が表示されたら初期設定は完了\n\n\n\n\n\n\n\n\n\n手順7: 初期設定が終わったら、すぐRおよびRStudioが利用可能だが、ここでは一旦右上の「Logout」をクリックし、タブ (or ウィンドウ) を閉じる。"
  },
  {
    "objectID": "intro/install.html#niiオンライン分析システムの起動",
    "href": "intro/install.html#niiオンライン分析システムの起動",
    "title": "Rの導入",
    "section": "2 NIIオンライン分析システムの起動",
    "text": "2 NIIオンライン分析システムの起動\n初期設定が終わったら、今後、以下の手順でNIIオンライン分析システムを起動する。\n手順1: 以下のアドレスにアクセスするか、本ページの右上にある右上の  ボタンをクリックする（右クリックし、新しいタブ or ウィンドウで開くことを推奨する）。\n\nhttps://jupyter.cs.rcos.nii.ac.jp/\n\n手順2: 必要に応じて認証を行う（初期設定の手順2, 3, 4と同じ）。\n手順3: サーバーリストが表示される。URL列のアドレスをクリックする。\n\n参考) 初期設定を1回のみ行ったら1行のみ表示されるため混同することはないが、個人利用などを目的に初期設定を複数回行った場合は2行以上が表示されるだろう。本講義に使うサーバーのURLをクリックすること。\n\n\n\n\n\n\n\n\n\n\n手順4: 以下のような画面が表示されたらNIIオンライン分析システムの起動完了である。この画面を今後、「JupyterHub（ジュピターハブ）のホーム画面」と呼ぶ。"
  },
  {
    "objectID": "intro/install.html#rstudioの起動",
    "href": "intro/install.html#rstudioの起動",
    "title": "Rの導入",
    "section": "3 RStudioの起動",
    "text": "3 RStudioの起動\n手順1: JupyterHubのホーム画面の右上の「New」をクリックし、「RStudio」をクリックする。\n\n\n\n\n\n\n\n\n\n手順2: 以下の画面が表示されたら、RStudioの起動完了である（RStudioの見栄は初期状態の場合、白ベースである）。"
  },
  {
    "objectID": "intro/install.html#rstudioの終了",
    "href": "intro/install.html#rstudioの終了",
    "title": "Rの導入",
    "section": "4 RStudioの終了",
    "text": "4 RStudioの終了\n手順1: RStudio画面右上のオレンジ色のボタンをクリックする。\n\n\n\n\n\n\n\n\n\n手順2: 以下のダイアログが表示されたらタブ、またはウィンドウを閉じる。"
  },
  {
    "objectID": "intro/packages.html",
    "href": "intro/packages.html",
    "title": "パッケージ",
    "section": "",
    "text": "Rには数万以上のパッケージが存在し、Rをインストールするだけでも数十のパッケージが自動的にインストールされる。しかし、データ分析/ハンドリング/可視化の手法は日々発展しており、R内蔵パッケージだけでは対応が難しい (できないわけではない)。したがって、必要に応じて新しいパッケージを導入する必要があるが、パッケージのインストールするにはConsoleペインに以下のように入力する。\ninstall.packages(\"インストールするパッケージ名\")\n　前期の「ミクロ政治データ分析実習」では{tidyverse}パッケージのみ使用する予定である。ただし、本講義ようにセッティングされた環境を導入する場合、{tidyverse}は既に導入済みであるため、以下のコードは実行しなくても良い。"
  },
  {
    "objectID": "intro/packages.html#アップデート",
    "href": "intro/packages.html#アップデート",
    "title": "パッケージ",
    "section": "2 アップデート",
    "text": "2 アップデート\n　特定のパッケージをアップデートする方法はインストールと同じだが、一つ一つのパッケージが全て最新バージョンかどうかを確認するのは大変である。また、久々のアップデートで数十個のパッケージをアップデートする必要があるケースもあろう。この場合、RStudioの内蔵機能を使えば一瞬で更新可能なパッケージのリスト化、インストールができる。\n手順1: PackagesペインのUpdateをクリックする。\n\n\n\n\n\n\n\n\n\n手順2: アップデートしたいパッケージの左にチェックを付けるか、左下のSelect Allをクリックし、右下のInstall Updatesをクリックする。\n\n\n\n\n\n\n\n\n\n　インストール、またはアップデートの際、以下のようなメッセージが出力される場合がある。\n  There are binary versions available but the source versions\n  are later:\n      binary source needs_compilation\nterra 1.5-17 1.5-21              TRUE\nyaml   2.2.2  2.3.4              TRUE\n\nDo you want to install from sources the packages which need compilation? (Yes/no/cancel)\n　この場合、Consoleペイン上でYes、no、cancelのいずれかを入力してReturnキー (Enterキー)を押す必要がある。大文字と小文字は区別すること。どうしても最新のパッケージが欲しい場合はYesを入力すれば良いが、インストールに時間がかかる場合がある。一方、noを入力した場合は、若干古いバージョンがインストールされるが、インストールに必要な時間が短いため、基本的にはnoでも問題ないだろう。cancelを入力した場合はアップデートが全てキャンセルされる。"
  },
  {
    "objectID": "intro/packages.html#教科書",
    "href": "intro/packages.html#教科書",
    "title": "パッケージ",
    "section": "3 教科書",
    "text": "3 教科書\n『私たちのR』の第5章「Rパッケージ」: https://www.jaysong.net/RBook/packages.html"
  },
  {
    "objectID": "intro/project.html",
    "href": "intro/project.html",
    "title": "プロジェクト管理",
    "section": "",
    "text": "手順1: File > New Project…をクリックする。\n\n\n\n\n\n\n\n\n\n手順2: New Directoryをクリックする。\n\n\n\n\n\n\n\n\n\n手順3: New Projectをクリックする。\n\n\n\n\n\n\n\n\n\n手順4: Directory name:にプロジェクト名を入力し、Create Projectをクリックする。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n注意: プロジェクト名の付け方\n\n\n\n　プロジェクト名にはローマ字、数字のみを使おう。つまり、日本語、中国語、韓国語、全角文字、スペースはなるべく使わないこと。空白を入れたい場合はスペースの代わりにアンダースコア（_）を使おう。"
  },
  {
    "objectID": "intro/project.html#プロジェクトの開き方",
    "href": "intro/project.html#プロジェクトの開き方",
    "title": "プロジェクト管理",
    "section": "2 プロジェクトの開き方",
    "text": "2 プロジェクトの開き方\n　プロジェクトを作成すれば、自動的に出来たてのプロジェクトが開かれる。しかし、NIIオンライン分析システムから一旦ログアウトし、改めてRStudioを起動する場合、プロジェクトをロードする必要がある。\n手順1: File > Open Project…をクリックする。\n\n\n\n\n\n\n\n\n\n手順2: プロジェクト・フォルダー名をダブルクリックする。\n\n\n\n\n\n\n\n\n\n手順3: .Rprojで終わるファイルをダブルクリックする。\n\n\n\n\n\n\n\n\n\nプロジェクトが正しくロードされている場合、RStudioの右上にプロジェクト名が表示される。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n常にプロジェクト機能を使おう!\n\n\n\n　RStudionの右上のプロジェクト名表示が「Project: (None)」になっていることは、現在プロジェクトを開いていないことを意味する。簡単な計算機として使う目的以外（つまり、授業中の実習や課題）は必ずプロジェクト機能を使おう。"
  },
  {
    "objectID": "intro/rstudio.html",
    "href": "intro/rstudio.html",
    "title": "RStudioの設定",
    "section": "",
    "text": "RStudioはそのままでも使えるが、少しカスタマイズするとより使い勝手が良くなる。RStudioのカスタマイズ画面はTools > Global Optionsをクリックすることで表示される。\n以下の設定はNIIオンライン分析システムで使用可能なRStudio最新版 (RStudio Server 2021.09.1+372)の設定であり、宋の設定と同じである。"
  },
  {
    "objectID": "intro/rstudio.html#general",
    "href": "intro/rstudio.html#general",
    "title": "RStudioの設定",
    "section": "1 General",
    "text": "1 General\n\n\n\n\n\n\nRestore .RData into workspace at startupのチェックを消す。\nSave workspace to .RData on exit:をNeverに変更する。\nAlways save history (even when not saving .RData)のチェックを消す。"
  },
  {
    "objectID": "intro/rstudio.html#code",
    "href": "intro/rstudio.html#code",
    "title": "RStudioの設定",
    "section": "2 Code",
    "text": "2 Code\n\n2.1 Editingタブ\n\n\n\n\n\n\nInsert spaces for tabのチェックを付ける。\nTab widthは2、または4を指定する。\nAuto-detect code indentationのチェックを付ける。\nInsert matching parens/quotesのチェックを付ける。\nAuto-indent code after pasteのチェックを付ける。\nVertically align arguments in auto-indentのチェックを付ける。\nAlways save R scripts before sourcingのチェックを付ける。\nCtrl + Return executes:をMulti-line R statementに変更する。\n\n\n\n2.2 Displayタブ\n\n\n\n\n\n\nHighlight selected wordのチェックを付ける。\nHighlight selected lineのチェックを付ける。\nShow line numbersのチェックを付ける。\nShow syntax highlighting in console inputのチェックを付ける。\nHighlight R function callsのチェックを付ける。\nRainbow parenthesesのチェックを付ける。\n\n\n\n2.3 Savingタブ\n\n\n\n\n\n\nDefault text encoding:のChangeをクリックし、UTF-8を選択する。\n\n\n\n2.4 Completionタブ\n\n\n\n\n\n\nShow code completion:をAutomaticallyに変更する。\nAllow automatic completions in consoleのチェックを付ける。\nInsert parentheses after function completionsのチェックを付ける。\nShow help tooltip after function completionsのチェックを付ける。\nInsert spaces around equals for argument completionsのチェックを付ける。\nUse tab for autocompletionのチェックを付ける。"
  },
  {
    "objectID": "intro/rstudio.html#console",
    "href": "intro/rstudio.html#console",
    "title": "RStudioの設定",
    "section": "3 Console",
    "text": "3 Console\n\n\n\n\n\n\nShow syntax highlighting in console inputのチェックを付ける。"
  },
  {
    "objectID": "intro/rstudio.html#appearance",
    "href": "intro/rstudio.html#appearance",
    "title": "RStudioの設定",
    "section": "4 Appearance",
    "text": "4 Appearance\n\n\n\n\n\n\n自分の好みのものを選択する。ただし、小さすぎる文字サイズ (font size) は推奨しない。目に優しくないだけでなく、誤字脱字が見つけにくくなる。"
  },
  {
    "objectID": "intro/rstudio.html#pane-layout",
    "href": "intro/rstudio.html#pane-layout",
    "title": "RStudioの設定",
    "section": "5 Pane Layout",
    "text": "5 Pane Layout\n\n\n\n\n\n\n左上: Source\n右上: Console\n左下: 全てチェックを消す。\n左下: 全てチェックを付ける。"
  },
  {
    "objectID": "intro/rstudio.html#r-markdown",
    "href": "intro/rstudio.html#r-markdown",
    "title": "RStudioの設定",
    "section": "6 R Markdown",
    "text": "6 R Markdown\n\n\n\n\n\n\nShow output preview in:をViewer Paneに変更する。\nShow output inline for all R Markdown documentsのチェックを消す。\n\n設定が終わったら右下のOK、またはApplyをクリックする。"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "<img src='/Figs/logo.png' height='20' style='vertical-align:baseline;'> MicroAnalysis@Kandai",
    "section": "",
    "text": "アイコン説明\n\n\n\n\n：NIIオンライン分析システムの起動\n\n右クリックし、新しいタブ（or ウィンドウ）で開いてください。\n初期設定が必要です。初期設定の方法はRの使い方 > Rの導入を参照してください。\n\n：本講義の教科書（『私たちのR』）\n：本ウェブサイト内の検索\n\n\n\n\n\n\n\n\n\nページ情報\n\n\n\n\n最終更新日: 2022年06月22日\n開発環境\n\nmacOS 12.4 “Monterey”\nFirefox 101.0.1\nR version 4.2.0 (2022-04-22)\nRStudio 2022.02.3+492 “Prairie Trillium”\nQuarto 0.9.587\nR package {quarto} 1.1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "本講義について",
    "section": "",
    "text": "講義日: 木曜日 第4時限（14:40～16:10）\n場所: TC302教室（高槻キャンパス C棟 302教室）\n講義内容: Rの使い方\n\nRの基本的な操作 & R Markdown\nデータの入出力\nデータのハンドリング（前処理）\nデータの可視化\n\n統計学、確率、多変量解析、因果推論の授業ではない。\n\nデータ分析の手法は後期の「マクロ政治データ分析実習」で紹介する。\n後期の授業ではRの使い方について解説しない。\n\n到達目標: Rを用いたデータ分析の教科書が読める土台づくり"
  },
  {
    "objectID": "about.html#オフィスアワー",
    "href": "about.html#オフィスアワー",
    "title": "本講義について",
    "section": "オフィス・アワー",
    "text": "オフィス・アワー\n宋、またはTAが研究室に待機し、事前予約なしに相談、質問などが可能な時間\n\n場所：TA227研究室（A棟の2階）\n毎週火曜日3限 (13:00〜14:30)\n\n宋が対応\n\n毎週木曜日3・5限 (13:00〜14:30 / 16:20〜17:50)\n\n3限はTA、5限は宋・TAが対応\n\n上記の時間外は事前予約が必要（メール、対面）\n\nメール: song@kansai-u.ac.jp"
  },
  {
    "objectID": "about.html#講義内容",
    "href": "about.html#講義内容",
    "title": "本講義について",
    "section": "講義内容",
    "text": "講義内容\n\n\n\n回\n内容\n教科書\n\n\n\n\n1\nイントロダクション\n\n\n\n2\nRとIDEの導入\n第1、2、3、4、5章\n\n\n3\nRの基本的な操作\n第6章\n\n\n4\nプログラミングの基本的な概念\n第10、11章\n\n\n5\nR Markdownと再現可能な研究\n第21章\n\n\n6\nデータ収集\n\n\n\n7\nデータ型\n第8章\n\n\n8\nデータ構造\n第9章\n\n\n9\nデータハンドリング（1）\n第12、13、14、15章\n\n\n10\nデータハンドリング（2）\n同上\n\n\n11\nデータハンドリング（3）\n同上\n\n\n12\n可視化（1）\n第17、18、19、20、章\n\n\n13\n可視化（2）\n同上\n\n\n14\n可視化（3）\n同上\n\n\n15\n期末テスト"
  },
  {
    "objectID": "about.html#本講義の位置づけ",
    "href": "about.html#本講義の位置づけ",
    "title": "本講義について",
    "section": "本講義の位置づけ",
    "text": "本講義の位置づけ"
  },
  {
    "objectID": "about.html#前提知識",
    "href": "about.html#前提知識",
    "title": "本講義について",
    "section": "前提知識",
    "text": "前提知識\n\nファイル・システムの理解\n\nフォルダー (ディレクトリ)の概念\nC:/AAA/BBB/CCC.txt (Windows)や~/AAA/BBB/CCC.text (macOS / Linux)の意味が理解できること\n相対パス / 絶対パスの概念が理解できること\n\nブラインド・タッチ (重要)\n\n期末レポートは第15回の授業中に執筆する。\nタイピングが遅いと、時間内に期末レポートの完成ができない。\n第15回の授業までにブラインドタッチの練習を推奨\nこの授業に限らず、現代社会で極めて重要なスキル"
  },
  {
    "objectID": "about.html#教科書",
    "href": "about.html#教科書",
    "title": "本講義について",
    "section": "教科書",
    "text": "教科書\nSong Jaehyun・矢内勇生.『私たちのR: ベストプラクティスの探求』Web-book\n\nhttps://www.jaysong.net/RBook\n本講義内容を200%カバーする\n無料"
  },
  {
    "objectID": "about.html#参考書",
    "href": "about.html#参考書",
    "title": "本講義について",
    "section": "参考書",
    "text": "参考書\n\n松村優哉 他. 2021. 『改訂2版 RユーザのためのRStudio[実践]入門』技術評論社\nGarrett Grolemund and Hadley Wickham. 2017. R for Data Science. O’Reilly.\n\n邦訳『Rではじめるデータサイエンス』(原著は無料: https://r4ds.had.co.nz/)\n\nJared P. Lander. 2018. R for Everyone. Addison-Wesley Professional.\n\n邦訳『みんなのR』"
  },
  {
    "objectID": "about.html#成績評価",
    "href": "about.html#成績評価",
    "title": "本講義について",
    "section": "成績評価",
    "text": "成績評価\n\n平常点 (20%)\n\n学生証を持参すること（カードリーダーで出席を確認）\n欠席4回以上は評価の対象外（3回まで評価対象）\n\n課題 (50%)\n\n計8〜9回の課題を予定\n未提出4回以上は評価の対象外（3回まで評価対象）\n課題提出期限の延長はない (提出までの期間が長めであるため)\n\n提出期限は次回講義の前日23時59分まで\n期限内に提出出来なかった場合でも宋に連絡する必要はない (どうせ延ばしてくれない)。\n\n不正行為厳禁\n\n期末レポート (30%)\n\n第15回の授業内に期末レポートを執筆\n未提出者は評価の対象外\n不正行為厳禁"
  },
  {
    "objectID": "about.html#注意事項",
    "href": "about.html#注意事項",
    "title": "本講義について",
    "section": "注意事項",
    "text": "注意事項\n\nコードは以下のように背景に色が付けられている部分である。\n\n\nprint(\"Hello!\")\n\n\nコードの中で#で始まる内容はコメントであり、分析に影響を与えない。ただし、\"や'で囲まれた#はコメントではない。また、行の途中から#が入る場合、#以降は実行されない。\n\n\n# Hello!を出力するコード\nprint(\"Hello!\")\n\n# \"や'内の#はコメントではない\nprint(\"この#はコメントではありません\")\n\nprint(\"Hello World!\") # Hello World!を出力\n\n\n出力結果は以下のように背景なし&等幅フォントで出力される。\n\n\n\n[1] \"Hello!\"\n\n\n\nオブジェクト名は変数名や関数名()のように文中の色付き背景で示された部分である。\nパッケージ名は{}で囲む。tidyverseパッケージの場合、{tidyverse}と表記する1。"
  },
  {
    "objectID": "about.html#参考-マクロ政治データ分析実習の内容-予定",
    "href": "about.html#参考-マクロ政治データ分析実習の内容-予定",
    "title": "本講義について",
    "section": "参考) マクロ政治データ分析実習の内容 (予定)",
    "text": "参考) マクロ政治データ分析実習の内容 (予定)\n\nリサーチデザイン\n記述統計\n統計的推定と仮説検定\n変数間の関係 ( \\(t\\) 検定、 \\(\\chi^2\\) 検定、相関分析)\n線形回帰分析\n交互作用\nロジスティック回帰分析\n分析結果の可視化"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "実習用データ集",
    "section": "",
    "text": "以下のリストからデータのファイル名をクリックし、PCにダウンロード&保存する。\nNIIオンライン分析システムのプロジェクト・フォルダー内にDataという名の新しいフォルダーを作成する。\nDataフォルダーにダウンロードしたデータをアップロードする。\n\nプロジェクト・フォルダー直に入れても良いが、データ読み込みの際、パスを適宜修正すること。"
  },
  {
    "objectID": "data.html#データ一覧",
    "href": "data.html#データ一覧",
    "title": "実習用データ集",
    "section": "データ一覧",
    "text": "データ一覧\n\n\n\n\n\n\n\n\n\nファイル名\n備考\n\n\n\n\n1\nPref_Vote.csv\n第3回講義で使用\n\n\n2\nBuildingData.csv\n第8回講義で使用\n\n\n3\nMicro09.csv\n第9・10回講義で使用\n\n\n4\nMicro11.csv\n第11回講義で使用\n\n\n5\nMicro11.csv\n第14回講義で使用"
  },
  {
    "objectID": "materials/visualization3.html#named-graphs-5ng",
    "href": "materials/visualization3.html#named-graphs-5ng",
    "title": "第14回講義資料",
    "section": "5 Named Graphs (5NG)",
    "text": "5 Named Graphs (5NG)\n\n棒グラフ (bar plot)\n\ngeom_bar()\n\nヒストグラム (histogram)\n\ngeom_histogram()\n\n箱ひげ図 (box plot / box-and-whisker plot)\n\ngeom_boxplot()\n\n散布図 (scatter plot)\n\ngeom_point()\n\n折れ線グラフ (line plot)\n\ngeom_line()"
  },
  {
    "objectID": "materials/visualization3.html#section",
    "href": "materials/visualization3.html#section",
    "title": "第14回講義資料",
    "section": "",
    "text": "散布図"
  },
  {
    "objectID": "materials/visualization3.html#散布図の必須要素",
    "href": "materials/visualization3.html#散布図の必須要素",
    "title": "第14回講義資料",
    "section": "散布図の必須要素",
    "text": "散布図の必須要素\n散布図を作成する際に必要な最低限の情報\n\n\nデータにフリーダムハウス・スコアと人間開発指数の列が必要\n\nx: 点の横軸上の位置\n\nフリーダムハウス・スコア\n\ny: 点の縦軸上の位置\n\n人間開発指数\n\n原因と結果の関係（因果関係）が考えられる2変数の場合、原因を横軸、結果を縦軸にする。"
  },
  {
    "objectID": "materials/visualization3.html#データの読み込み",
    "href": "materials/visualization3.html#データの読み込み",
    "title": "第14回講義資料",
    "section": "データの読み込み",
    "text": "データの読み込み\n第9回実習用データ（Micro09.csv）を使用\n\nlibrary(tidyverse)\ndf <- read_csv(\"Data/Micro08.csv\")"
  },
  {
    "objectID": "materials/visualization3.html#散布図の作成-1",
    "href": "materials/visualization3.html#散布図の作成-1",
    "title": "第14回講義資料",
    "section": "散布図の作成 (1)",
    "text": "散布図の作成 (1)\n幾何オブジェクトはgeom_point()を使用\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018))"
  },
  {
    "objectID": "materials/visualization3.html#散布図の作成-2",
    "href": "materials/visualization3.html#散布図の作成-2",
    "title": "第14回講義資料",
    "section": "散布図の作成 (2)",
    "text": "散布図の作成 (2)\nラベル修正 / 必要に応じてカスタマイズ\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018), color = \"royalblue\") +\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\")"
  },
  {
    "objectID": "materials/visualization3.html#次元の追加",
    "href": "materials/visualization3.html#次元の追加",
    "title": "第14回講義資料",
    "section": "次元の追加",
    "text": "次元の追加\n散布図における次元の追加\n\nそれぞれの点は各国の (1) フリーダムハウス・スコアと (2) 人間開発指数の情報を持つ\n\n= 2次元\n\n更に情報を持たせるためには…\n\n色分け: color\n大きさ: size\n形: shape\n透明度(非推奨): alpha\nファセット分割\n\n5次元以上のグラフも可能だが、3次元までを推奨\n\n一つのグラフの情報が多すぎると読みにくくなる\n4次元以上になりそうならファセット分割で対応\n3次元の場合、色分け（color）を推奨するが、白黒の図を作成する場合は形（shape）を使う。"
  },
  {
    "objectID": "materials/visualization3.html#次元の散布図",
    "href": "materials/visualization3.html#次元の散布図",
    "title": "第14回講義資料",
    "section": "5次元の散布図",
    "text": "5次元の散布図\n各点はフリーダムハウス・スコア、人間開発指数、人口（対数変換）、大陸、OECD加盟有無の情報を持つ\n\ndf %>%\n   mutate(OECD = if_else(OECD == 1, \"Member\", \"Non-member\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, color = Continent,\n                  size = Population, shape = OECD), alpha = 0.65) +\n   scale_size_continuous(trans = \"log10\") +\n   labs(x = \"Freedom House Score\", y = \"Human Development Index (2018)\",\n        size = \"Population (log)\") +\n   theme_gray(base_family = \"HiraKakuProN-W3\")"
  },
  {
    "objectID": "materials/visualization3.html#色分けの例コード",
    "href": "materials/visualization3.html#色分けの例コード",
    "title": "第14回講義資料",
    "section": "色分けの例（コード）",
    "text": "色分けの例（コード）\naes()の内部にcolor = 色分けする変数を指定\n\nHighIncome変数を作成し、PPP_per_capitaが2万以上なら\"高\"、未満なら\"低\"\nHighIncome値に応じて点の色分けを行う（color = HighIncome）\n点の大きさは2とする（全体に適用させるため、aes()の外側に指定）\nlabs()内で凡例タイトルを修正; 凡例を下側へ移動\n\n\nコード結果\n\n\n\nscatter_plot1 <- df %>%\n   drop_na(FH_Total, HDI_2018, PPP_per_capita) %>%\n   mutate(HighIncome = if_else(PPP_per_capita >= 20000, \"高\", \"低\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, color = HighIncome), \n              size = 2) +\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\",\n        color = \"一人当たりPPP GDP\") +\n   theme(legend.position = \"bottom\")\n\n\n\n\nscatter_plot1"
  },
  {
    "objectID": "materials/visualization3.html#色のカスタマイズ",
    "href": "materials/visualization3.html#色のカスタマイズ",
    "title": "第14回講義資料",
    "section": "色のカスタマイズ",
    "text": "色のカスタマイズ\ncolorにマッピングされている変数（HighIncome）が離散変数\n\nscale_color_manual()を使用\n引数: values = c(\"値1\" = \"色1\", \"値2\" = \"色2\", ...)\n\n\nscatter_plot1 +\n   scale_color_manual(values = c(\"低\" = \"orange\", \"高\" = \"royalblue\"))"
  },
  {
    "objectID": "materials/visualization3.html#ggplot2で使える色",
    "href": "materials/visualization3.html#ggplot2で使える色",
    "title": "第14回講義資料",
    "section": "{ggplot2}で使える色",
    "text": "{ggplot2}で使える色\n\n文字列で指定\n\n\"red\"、\"blue\"、\"royalblue\"など（全657種類）\nGoogleなどで「ggplot2 color」で検索（例）\n\nRGBカラー（HEXコード）で指定\n\n細かく調整可能（16,777,216種類の色）\n例) \"#FF0000\": 赤、\"#4169E1\": ロイヤルブルー"
  },
  {
    "objectID": "materials/visualization3.html#色の見本-一部",
    "href": "materials/visualization3.html#色の見本-一部",
    "title": "第14回講義資料",
    "section": "色の見本 (一部)",
    "text": "色の見本 (一部)"
  },
  {
    "objectID": "materials/visualization3.html#shapeの見本",
    "href": "materials/visualization3.html#shapeの見本",
    "title": "第14回講義資料",
    "section": "shapeの見本",
    "text": "shapeの見本\nshapeで指定（デフォルトはshape = 19）\n\n黒の部分はcolor、グレーの部分はfill（またはbg）で調整\n\n21と22の場合、枠線はcolor、内側の色塗りはfill\n\n0〜14の場合、中身が透明"
  },
  {
    "objectID": "materials/visualization3.html#section-1",
    "href": "materials/visualization3.html#section-1",
    "title": "第14回講義資料",
    "section": "",
    "text": "折れ線グラフ"
  },
  {
    "objectID": "materials/visualization3.html#折れ線グラフの必須要素",
    "href": "materials/visualization3.html#折れ線グラフの必須要素",
    "title": "第14回講義資料",
    "section": "折れ線グラフの必須要素",
    "text": "折れ線グラフの必須要素\n折れ線グラフを作成する際に必要な最低限の情報\n\n\nデータに日と新規感染者数の列が必要\n\nx: 線の傾きが変化し得る点の横軸上の位置\n\n日\n\ny: 線の傾きが変化し得る点の縦軸上の位置\n\n100万人当たり新規感染者数\n\n散布図とほぼ同じ\nただし、線が2つ以上の場合groupsが必要\n\n点をグループ化しないと、どの点を繋げば良いかが分からないため"
  },
  {
    "objectID": "materials/visualization3.html#データの用意",
    "href": "materials/visualization3.html#データの用意",
    "title": "第14回講義資料",
    "section": "データの用意",
    "text": "データの用意\n授業サポートページから実習用データ（Micro14.csv）をダウンロード\n\n整然データとして加工済み\nDay: 日付（2021年6月）; NewCases: 100万人当りCOVID-19新規感染者数\n\n\nCOVID_df <- read_csv(\"Data/Micro14.csv\")\nCOVID_df\n\n# A tibble: 15 × 3\n   Country   Day NewCases\n   <chr>   <dbl>    <dbl>\n 1 Japan      16    13.6 \n 2 Japan      17    12.2 \n 3 Japan      18    12.9 \n 4 Japan      19    11.9 \n 5 Japan      20    10.4 \n 6 Korea      16    10.5 \n 7 Korea      17     9.89\n 8 Korea      18     9.40\n 9 Korea      19     8.37\n10 Korea      20     6.96\n11 Taiwan     16     7.05\n12 Taiwan     17     7.35\n13 Taiwan     18     7.85\n14 Taiwan     19     5.25\n15 Taiwan     20     4.58"
  },
  {
    "objectID": "materials/visualization3.html#線が一本の場合コード",
    "href": "materials/visualization3.html#線が一本の場合コード",
    "title": "第14回講義資料",
    "section": "線が一本の場合（コード）",
    "text": "線が一本の場合（コード）\ngeom_line()幾何オブジェクトを使用\n\nx: 点の傾きが変化し得る点の横軸上の位置\ny: 点の傾きが変化し得る点の縦軸上の位置\n日本の行のみを抽出し、横軸を日、縦軸を100万人当たり新規感染者数とした折れ線グラフを作成\n\n\nCOVID_df %>%\n   filter(Country == \"Japan\") %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")"
  },
  {
    "objectID": "materials/visualization3.html#線が二本以上の場合コード",
    "href": "materials/visualization3.html#線が二本以上の場合コード",
    "title": "第14回講義資料",
    "section": "線が二本以上の場合（コード）",
    "text": "線が二本以上の場合（コード）\ngroupに線のグループ変数を指定\n\n国別の折れ線グラフの場合、国変数を指定\n\n\nコード結果\n\n\n\nCOVID_df <- COVID_df %>%\n   mutate(Country = case_when(Country == \"Japan\" ~ \"日本\",\n                              Country == \"Korea\" ~ \"韓国\",\n                              TRUE               ~ \"台湾\"),\n          Country = factor(Country, levels = c(\"日本\", \"韓国\", \"台湾\")))\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")\n\n\n\n各線がどの国を示すのかが分からない…"
  },
  {
    "objectID": "materials/visualization3.html#線が二本以上の場合コード-1",
    "href": "materials/visualization3.html#線が二本以上の場合コード-1",
    "title": "第14回講義資料",
    "section": "線が二本以上の場合（コード）",
    "text": "線が二本以上の場合（コード）\ncolorで色分け: 国別の折れ線グラフの場合、国変数を指定\n\n線をやや太め（1.5）にする\n\nsize: 全線に適用させるためにaes()の外側に\n線が細すぎると色が区別しにくい\n\n\n\nコード結果\n\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, \n                 color = Country), size = 1.5) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\")"
  },
  {
    "objectID": "materials/visualization3.html#次元の追加-1",
    "href": "materials/visualization3.html#次元の追加-1",
    "title": "第14回講義資料",
    "section": "次元の追加",
    "text": "次元の追加\n多くの折れ線グラフは既に3次元\n\n日（x）、新規感染者数（y）、国（group or color）\nこれ以上次元を増やすならファセット分割で対応するのが賢明\nファセット分割せずに次元を増やすなら…\n\nsize: 線の太さ\nlinetype: 線のタイプ（1 = 実線、2 = 破線、4 = 点線、…）\n\n白黒図の場合、colorでなく、linetype\n\nalpha: 透明度"
  },
  {
    "objectID": "materials/visualization3.html#線のタイプコード",
    "href": "materials/visualization3.html#線のタイプコード",
    "title": "第14回講義資料",
    "section": "線のタイプ（コード）",
    "text": "線のタイプ（コード）\n\n主に白黒図で使用\n\n\nコード結果\n\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, linetype = Country),\n             size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        linetype = \"国\")\n\n自分で線のタイプを指定したい場合は\n\nデータ %>%\n  ggplot() +\n  ... +\n  scale_linetype_manual(values = c(\"日本\" = 1, \"韓国\" = 2, \"台湾\" = 4)) #<<"
  },
  {
    "objectID": "materials/visualization3.html#linetypeの見本",
    "href": "materials/visualization3.html#linetypeの見本",
    "title": "第14回講義資料",
    "section": "linetypeの見本",
    "text": "linetypeの見本\n種類が多くなると区別しにくいため、最大3つ程度\n\n1, (2 or 3), (4 or 10）\n一つ面に登場する線は3〜4本程度まで（色分けも同様）"
  },
  {
    "objectID": "materials/visualization3.html#折れ線グラフ-散布図コード",
    "href": "materials/visualization3.html#折れ線グラフ-散布図コード",
    "title": "第14回講義資料",
    "section": "折れ線グラフ + 散布図（コード）",
    "text": "折れ線グラフ + 散布図（コード）\ngeom_point()とgeom_line()を重ねる\n\n後（先）に書いたレイヤーが前面（背面）に\n傾きの変化が激しくない場合に有効\n点は線より大きめに\n白黒印刷に備え、点の形分けも可能\n\n\nCOVID_df %>%\n   ggplot(aes(x = Day, y = NewCases, color = Country)) +\n   geom_point(aes(shape = Country), size = 3) +\n   geom_line(aes(group = Country), size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\", shape = \"国\") +\n   theme_bw()"
  },
  {
    "objectID": "materials/visualization3.html#折れ線グラフ-散布図図",
    "href": "materials/visualization3.html#折れ線グラフ-散布図図",
    "title": "第14回講義資料",
    "section": "折れ線グラフ + 散布図（図）",
    "text": "折れ線グラフ + 散布図（図）"
  },
  {
    "objectID": "materials/visualization3.html#section-2",
    "href": "materials/visualization3.html#section-2",
    "title": "第14回講義資料",
    "section": "",
    "text": "箱ひげ図"
  },
  {
    "objectID": "materials/visualization3.html#箱ひげ図とは",
    "href": "materials/visualization3.html#箱ひげ図とは",
    "title": "第14回講義資料",
    "section": "箱ひげ図とは",
    "text": "箱ひげ図とは\n\n\n変数の分布を示す方法の一つ\n\n最小値、最大値\n\nひげの両端\n\n第一四分位数、第三四分位数\n\n箱の上限と下限\n\n中央値（第二四分位数）\n\n箱内の線\n\n外れ値がある場合、点\n\n変数の分布をグループごとに見る時に有効"
  },
  {
    "objectID": "materials/visualization3.html#箱ひげ図の作成",
    "href": "materials/visualization3.html#箱ひげ図の作成",
    "title": "第14回講義資料",
    "section": "箱ひげ図の作成",
    "text": "箱ひげ図の作成\n人間開発指数 (HDI_2018) の箱ひげ図\n\nx、またはyに分布を確認した変数をマッピングする\n\nxにマッピングするか、yにするかによって箱の向きが変わる\n\n\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018)) +\n   labs(x = \"\", y = \"人間開発指数 (2018)\") +\n   theme_bw()\n\n\n\n\n\n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot)."
  },
  {
    "objectID": "materials/visualization3.html#次元の追加-2",
    "href": "materials/visualization3.html#次元の追加-2",
    "title": "第14回講義資料",
    "section": "次元の追加",
    "text": "次元の追加\nyにしかマッピングされているため、まだ次元追加の余地が残っている\n\nxにマッピング（大陸ごとのHDI_2018の箱ひげ図）\n更に次元を追加したい場合は、ファセット分割\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent)) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw()\n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot)."
  },
  {
    "objectID": "materials/visualization3.html#カスタマイズ色",
    "href": "materials/visualization3.html#カスタマイズ色",
    "title": "第14回講義資料",
    "section": "カスタマイズ（色）",
    "text": "カスタマイズ（色）\n箱の色を変える\n\nすべての色を変える場合、aes()の外側にfill\n箱ごとにの色を変える場合、aes()の内側にfill\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent), fill = \"cornsilk\") +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw()\n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot).\n\n\n\n\n\n\n\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent, fill = Continent)) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw() +\n   theme(legend.position = \"none\")\n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot)."
  },
  {
    "objectID": "materials/visualization3.html#カスタマイズ箱の幅",
    "href": "materials/visualization3.html#カスタマイズ箱の幅",
    "title": "第14回講義資料",
    "section": "カスタマイズ（箱の幅）",
    "text": "カスタマイズ（箱の幅）\n\naes()の外側にwidthを指定\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent), width = 0.5) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw() +\n   theme(legend.position = \"none\")\n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot)."
  },
  {
    "objectID": "materials/visualization3.html#横軸と縦軸の交換",
    "href": "materials/visualization3.html#横軸と縦軸の交換",
    "title": "第14回講義資料",
    "section": "横軸と縦軸の交換",
    "text": "横軸と縦軸の交換\n箱が多すぎて読みにくい場合、xとyを交換も良い\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(x = HDI_2018, y = Continent)) +\n   labs(x = \"人間開発指数 (2018)\", y = \"大陸\") +\n   theme_bw(base_size = 14) +\n   theme(legend.position = \"none\")\n\nWarning: Removed 6 rows containing non-finite values (stat_boxplot)."
  },
  {
    "objectID": "materials/visualization3.html#教科書",
    "href": "materials/visualization3.html#教科書",
    "title": "第14回講義資料",
    "section": "教科書",
    "text": "教科書\n\n散布図の作成: 教科書第18.6章\n折れ線グラフの作成: 教科書第18.7章\n箱ひげ図: 教科書第18.5章\nグラフのカスタマイズ: 教科書第19章\nその他のグラフ: 教科書第20章\nその他のグラフ: The R Graph Gallery"
  },
  {
    "objectID": "materials/visualization3.html#色分けの例",
    "href": "materials/visualization3.html#色分けの例",
    "title": "第14回講義資料",
    "section": "色分けの例",
    "text": "色分けの例\naes()の内部にcolor = 色分けする変数を指定\n\nHighIncome変数を作成し、PPP_per_capitaが2万以上なら\"高\"、未満なら\"低\"\nHighIncome値に応じて点の色分けを行う（color = HighIncome）\n点の大きさは2とする（全体に適用させるため、aes()の外側に指定）\nlabs()内で凡例タイトルを修正; 凡例を下側へ移動\n\n\nscatter_plot1 <- df %>%\n   drop_na(FH_Total, HDI_2018, PPP_per_capita) %>%\n   mutate(HighIncome = if_else(PPP_per_capita >= 20000, \"高\", \"低\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, color = HighIncome), \n              size = 2) +\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\",\n        color = \"一人当たりPPP GDP\") +\n   theme(legend.position = \"bottom\")\n\nscatter_plot1"
  },
  {
    "objectID": "materials/visualization3.html#線が二本以上の場合",
    "href": "materials/visualization3.html#線が二本以上の場合",
    "title": "第14回講義資料",
    "section": "線が二本以上の場合",
    "text": "線が二本以上の場合\ngroupに線のグループ変数を指定\n\n国別の折れ線グラフの場合、国変数を指定\n\n\nCOVID_df <- COVID_df %>%\n   mutate(Country = case_when(Country == \"Japan\" ~ \"日本\",\n                              Country == \"Korea\" ~ \"韓国\",\n                              TRUE               ~ \"台湾\"),\n          Country = factor(Country, levels = c(\"日本\", \"韓国\", \"台湾\")))\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")"
  },
  {
    "objectID": "materials/visualization3.html#線が二本以上の場合-1",
    "href": "materials/visualization3.html#線が二本以上の場合-1",
    "title": "第14回講義資料",
    "section": "線が二本以上の場合",
    "text": "線が二本以上の場合\ncolorで色分け: 国別の折れ線グラフの場合、国変数を指定\n\n線をやや太め（1.5）にする\n\nsize: 全線に適用させるためにaes()の外側に\n線が細すぎると色が区別しにくい\n\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, color = Country), \n             size = 1.5) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\")"
  },
  {
    "objectID": "materials/visualization3.html#線のタイプ",
    "href": "materials/visualization3.html#線のタイプ",
    "title": "第14回講義資料",
    "section": "線のタイプ",
    "text": "線のタイプ\n\n主に白黒図で使用\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, \n                 linetype = Country), size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        linetype = \"国\") \n\n\n\n\n\n\n\n\n自分で線のタイプを指定したい場合は\n\nデータ %>%\n  ggplot() +\n  ... +\n  scale_linetype_manual(values = c(\"日本\" = 1, \"韓国\" = 2, \"台湾\" = 4)) #<<"
  },
  {
    "objectID": "materials/visualization3.html#箱ひげ図",
    "href": "materials/visualization3.html#箱ひげ図",
    "title": "第14回講義資料",
    "section": "箱ひげ図",
    "text": "箱ひげ図\n\n箱ひげ図の作成\n変数の分布を示す方法の一つ\n\n最小値、最大値\n\nひげの両端\n\n第一四分位数、第三四分位数\n\n箱の上限と下限\n\n中央値（第二四分位数）\n\n箱内の線\n\n外れ値がある場合、点\n\n変数の分布をグループごとに見る時に有効\n\n\n\n\n\n\n\n\n\n人間開発指数 (HDI_2018) の箱ひげ図\n\nx、またはyに分布を確認した変数をマッピングする\n\nxにマッピングするか、yにするかによって箱の向きが変わる\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018)) +\n   labs(x = \"\", y = \"人間開発指数 (2018)\") +\n   theme_bw()\n\n\n\n\n\n\n\n\n\n\n次元の追加\nyにしかマッピングされているため、まだ次元追加の余地が残っている\n\nxにマッピング（大陸ごとのHDI_2018の箱ひげ図）\n更に次元を追加したい場合は、ファセット分割\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent)) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw()\n\n\n\n\n\n\n\n\nカスタマイズ（色）\n箱の色を変える\n\nすべての色を変える場合、aes()の外側にfill\n箱ごとにの色を変える場合、aes()の内側にfill\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent), fill = \"cornsilk\") +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw()\n\n\n\n\n\n\n\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent, fill = Continent)) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw() +\n   theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nカスタマイズ（箱の幅）\n\naes()の外側にwidthを指定\n\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(y = HDI_2018, x = Continent), width = 0.5) +\n   labs(x = \"大陸\", y = \"人間開発指数 (2018)\") +\n   theme_bw() +\n   theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n横軸と縦軸の交換\n箱が多すぎて読みにくい場合、xとyを交換も良い\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(x = HDI_2018, y = Continent)) +\n   labs(x = \"人間開発指数 (2018)\", y = \"大陸\") +\n   theme_bw(base_size = 14) +\n   theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nもし、縦軸の順番を反転するなら、scale_y_discrete(limits = rev)レイヤーを追加する。\n\ndf %>%\n   ggplot() +\n   geom_boxplot(aes(x = HDI_2018, y = Continent)) +\n   labs(x = \"人間開発指数 (2018)\", y = \"大陸\") +\n   scale_y_discrete(limits = rev) +\n   theme_bw(base_size = 14) +\n   theme(legend.position = \"none\")"
  },
  {
    "objectID": "slide/slide14.html#色分けの例",
    "href": "slide/slide14.html#色分けの例",
    "title": "ミクロ政治データ分析実習",
    "section": "色分けの例",
    "text": "色分けの例\naes()の内部にcolor = 色分けする変数を指定\n\nHighIncome変数を作成し、PPP_per_capitaが2万以上なら\"高\"、未満なら\"低\"\nHighIncome値に応じて点の色分けを行う（color = HighIncome）\n点の大きさは2とする（全体に適用させるため、aes()の外側に指定）\nlabs()内で凡例タイトルを修正; 凡例を下側へ移動\n\n\nコード結果\n\n\n\nscatter_plot1 <- df %>%\n   drop_na(FH_Total, HDI_2018, PPP_per_capita) %>%\n   mutate(HighIncome = if_else(PPP_per_capita >= 20000, \"高\", \"低\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, color = HighIncome), \n              size = 2) +\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\",\n        color = \"一人当たりPPP GDP\") +\n   theme(legend.position = \"bottom\")\n\n\n\n\nscatter_plot1"
  },
  {
    "objectID": "slide/slide14.html#線が一本の場合",
    "href": "slide/slide14.html#線が一本の場合",
    "title": "ミクロ政治データ分析実習",
    "section": "線が一本の場合",
    "text": "線が一本の場合\ngeom_line()幾何オブジェクトを使用\n\nx: 点の傾きが変化し得る点の横軸上の位置\ny: 点の傾きが変化し得る点の縦軸上の位置\n日本の行のみを抽出し、横軸を日、縦軸を100万人当たり新規感染者数とした折れ線グラフを作成\n\n\nコード結果\n\n\n\nCOVID_df %>%\n   filter(Country == \"Japan\") %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")"
  },
  {
    "objectID": "slide/slide14.html#線が二本以上の場合",
    "href": "slide/slide14.html#線が二本以上の場合",
    "title": "ミクロ政治データ分析実習",
    "section": "線が二本以上の場合",
    "text": "線が二本以上の場合\ngroupに線のグループ変数を指定\n\n国別の折れ線グラフの場合、国変数を指定\n\n\nコード結果\n\n\n\nCOVID_df <- COVID_df %>%\n   mutate(Country = case_when(Country == \"Japan\" ~ \"日本\",\n                              Country == \"Korea\" ~ \"韓国\",\n                              TRUE               ~ \"台湾\"),\n          Country = factor(Country, levels = c(\"日本\", \"韓国\", \"台湾\")))\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")\n\n\n\n各線がどの国を示すのかが分からない…"
  },
  {
    "objectID": "slide/slide14.html#線が二本以上の場合-1",
    "href": "slide/slide14.html#線が二本以上の場合-1",
    "title": "ミクロ政治データ分析実習",
    "section": "線が二本以上の場合",
    "text": "線が二本以上の場合\ncolorで色分け: 国別の折れ線グラフの場合、国変数を指定\n\n線をやや太め（1.5）にする\n\nsize: 全線に適用させるためにaes()の外側に\n線が細すぎると色が区別しにくい\n\n\n\nコード結果\n\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, \n                 color = Country), size = 1.5) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\")"
  },
  {
    "objectID": "slide/slide14.html#線のタイプ",
    "href": "slide/slide14.html#線のタイプ",
    "title": "ミクロ政治データ分析実習",
    "section": "線のタイプ",
    "text": "線のタイプ\n\n主に白黒図で使用\n\n\nコード結果\n\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, linetype = Country),\n             size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        linetype = \"国\")\n\n自分で線のタイプを指定したい場合は\n\nデータ %>%\n  ggplot() +\n  ... +\n  scale_linetype_manual(values = c(\"日本\" = 1, \"韓国\" = 2, \"台湾\" = 4)) #<<"
  },
  {
    "objectID": "materials/visualization3.html#折れ線グラフ-散布図",
    "href": "materials/visualization3.html#折れ線グラフ-散布図",
    "title": "第14回講義資料",
    "section": "折れ線グラフ + 散布図",
    "text": "折れ線グラフ + 散布図\ngeom_point()とgeom_line()を重ねる\n\n後（先）に書いたレイヤーが前面（背面）に\n傾きの変化が激しくない場合に有効\n点は線より大きめに\n白黒印刷に備え、点の形分けも可能\n\n\nCOVID_df %>%\n   ggplot(aes(x = Day, y = NewCases, color = Country)) +\n   geom_point(aes(shape = Country), size = 3) +\n   geom_line(aes(group = Country), size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\", shape = \"国\") +\n   theme_bw()"
  },
  {
    "objectID": "materials/visualization3.html#散布図",
    "href": "materials/visualization3.html#散布図",
    "title": "第14回講義資料",
    "section": "散布図",
    "text": "散布図\n\n散布図の作成\n散布図は2つの連続変数（=間隔尺度、比率尺度で測定された変数）間の関係を調べる代表的な可視化方法である。散布図を作成する際に必要な最低限の情報、つまり散布図の必須要素は何だろうか。例えば、 図 1 の例を考えてみよう。この散布図はフリーダムハウスのスコアと人間開発指数の関係を表す散布図である。それぞれの点は一つの観察（国）を意味する。散布図は2次元平面上に複数の点を載せたものであるが、それぞれの点はどのような情報を含んでいるのか。それは、その国のフリーダムハウス・スコアと人間開発指数であり、それぞれ横軸の上の位置と縦軸上の位置から、その情報が読み取れる。\n\n\n\n\n\n図 1: 2次元散布図の例\n\n\n\n\n　それでは 図 1 を作ってみよう。使用するデータは第9回実習用データ（Micro09.csv）である。\n\nlibrary(tidyverse)\ndf <- read_csv(\"Data/Micro08.csv\")\n\n　散布図を作成するためにはgeom_point()幾何オブジェクトを使用する。点の横軸上の位置はxに、縦軸上の位置はyにマッピングする。もし2つの変数の間に原因と結果の関係（因果関係）が考えられる2変数の場合、原因を横軸、結果を縦軸にするのが通例である。\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018))\n\n\n\n\n\n\n\n\n　しかし、横軸と縦軸のタイトルがFH_Total、HDI_2018になっている。図を作った人から見れば、これが何を意味するのか分かるだろうが、この図を初めて見る人にとっては何を意味するのかが分からないだろう。したがって、ラベル修正を修正し、せっかくなので点の色をおしゃれなロイヤルブルー（royal blue）にしてみよう。\n\ndf %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018), color = \"royalblue\") +\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\")\n\n\n\n\n\n\n\n\n\n\n次元の追加\n　通常の散布図、例えば先ほど作成した散布図には、それぞれの点は各国の (1) フリーダムハウス・スコアと (2) 人間開発指数といった2つの情報を持つ。つまり、通常の散布図は2次元である。しかし、散布図は5次元、7次元までにも拡張することができる。たとえば、大陸ごとに色分けをすることによってもう一つの情報を持たせることも可能だし、人口や所得に応じて点の大きさを変えることも可能だろう。また、定番のファセット分割もできる。他にも点の枠線、点の形、透明度などに何かの情報を持たせることも可能である。\n　このように高次元の散布図を作ることはできる。ただし、宋は3次元までを推奨する（ファセット分割まで入れる場合、4次元）。なぜなら、一つのグラフの情報が多すぎると読みにくくなるからである。 図 2 は5次元散布図の例である。各点はフリーダムハウス・スコア、人間開発指数、人口（対数変換）、大陸、OECD加盟有無の情報を持つ。\n\ndf %>%\n   mutate(OECD = if_else(OECD == 1, \"Member\", \"Non-member\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, color = Continent,\n                  size = Population, shape = OECD), alpha = 0.65) +\n   scale_size_continuous(trans = \"log10\") +\n   labs(x = \"Freedom House Score\", y = \"Human Development Index (2018)\",\n        size = \"Population (log)\")\n\n\n\n\n図 2: 5次元散布図の例\n\n\n\n\n　2次元散布図にもう一つの次元を追加、つまり3次元散布図を作成する場合は色分け（color）を推奨するが、白黒の図を作成する場合は形（shape）を使う必要がある。まずは色分けから説明しよう。色分けをする場合は、aes()の内部にcolor = 色分けする変数を指定する。\n　たとえば、一人上がり購買力平価GDP（PPP_per_capita）が2万ドル以上か未満かで点の色分けをするとしよう。まず、PPP_per_capitaが2万以上なら\"高\"、未満なら\"低\"にリコーディングしたHighIncome変数を作成する。つづいて、このHighIncome変数を利用し、点の色分けを行う（color = HighIncome）\n　他のカスタマイズとしては作図する側の自由であるが、ここでは点の大きさは2にし（全体に適用させるため、aes()の外側に指定）、labs()内で凡例タイトルを修正し、凡例を下側へ移動してみる。作成した図はscatter_plot1という名のオブジェクトとして格納しておく。\n\nscatter_plot1 <- df %>%\n   # 散布図に使われる変数が一つでも欠損していれば、その行（国）は除外する\n   drop_na(FH_Total, HDI_2018, PPP_per_capita) %>%\n   # リコーディング\n   mutate(HighIncome = if_else(PPP_per_capita >= 20000, \"高\", \"低\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, color = HighIncome), \n              size = 2) +\n   # ラベル修正\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\",\n        color = \"一人当たりPPP GDP\") +\n   # 凡例を下側に\n   theme(legend.position = \"bottom\")\n\nscatter_plot1\n\n\n\n\n\n\n\n\n　もし、点の色を変更したい場合はscale_color_manual()レイヤーを追加する。引数はvaluesであり、c(\"値1\" = \"色1\", \"値2\" = \"色2\", ...)のように名前付きcharacter型ベクトルを指定する。たとえば、HighIncomeの値が\"低\"ならオレンジ色（\"orange\"）、\"高\"ならロイヤルブルー色（\"royalblue\"）にしてみよう。\n\nscatter_plot1 +\n   scale_color_manual(values = c(\"低\" = \"orange\", \"高\" = \"royalblue\"))\n\n\n\n\n\n\n\n\n　{ggplot2}で使える色は無数にある。\"red\"、\"blue\"、\"royalblue\"のように文字で指定することもでき、全657種類が用意されている1。他にもRGBカラー（HEXコード; 16進数）で指定することもでる。たとえば赤なら\"#FF0000\"、ロイヤルブルーなら\"#4169E1\"と表記する。HEXコードを使う場合、非常に細かく色を指定することができ、全16,777,216種類の色が使える。以下の例はRで使える色の一部である。\n\n\n\n\n\n\n\n\n\n　Rで使用可能な色のリストはコンソール上でcolors()を打ち込むと確認できる。\n\ncolors()\n\n  [1] \"white\"                \"aliceblue\"            \"antiquewhite\"        \n  [4] \"antiquewhite1\"        \"antiquewhite2\"        \"antiquewhite3\"       \n  [7] \"antiquewhite4\"        \"aquamarine\"           \"aquamarine1\"         \n [10] \"aquamarine2\"          \"aquamarine3\"          \"aquamarine4\"         \n [13] \"azure\"                \"azure1\"               \"azure2\"              \n [16] \"azure3\"               \"azure4\"               \"beige\"               \n [19] \"bisque\"               \"bisque1\"              \"bisque2\"             \n [22] \"bisque3\"              \"bisque4\"              \"black\"               \n [25] \"blanchedalmond\"       \"blue\"                 \"blue1\"               \n [28] \"blue2\"                \"blue3\"                \"blue4\"               \n [31] \"blueviolet\"           \"brown\"                \"brown1\"              \n [34] \"brown2\"               \"brown3\"               \"brown4\"              \n [37] \"burlywood\"            \"burlywood1\"           \"burlywood2\"          \n [40] \"burlywood3\"           \"burlywood4\"           \"cadetblue\"           \n [43] \"cadetblue1\"           \"cadetblue2\"           \"cadetblue3\"          \n [46] \"cadetblue4\"           \"chartreuse\"           \"chartreuse1\"         \n [49] \"chartreuse2\"          \"chartreuse3\"          \"chartreuse4\"         \n [52] \"chocolate\"            \"chocolate1\"           \"chocolate2\"          \n [55] \"chocolate3\"           \"chocolate4\"           \"coral\"               \n [58] \"coral1\"               \"coral2\"               \"coral3\"              \n [61] \"coral4\"               \"cornflowerblue\"       \"cornsilk\"            \n [64] \"cornsilk1\"            \"cornsilk2\"            \"cornsilk3\"           \n [67] \"cornsilk4\"            \"cyan\"                 \"cyan1\"               \n [70] \"cyan2\"                \"cyan3\"                \"cyan4\"               \n [73] \"darkblue\"             \"darkcyan\"             \"darkgoldenrod\"       \n [76] \"darkgoldenrod1\"       \"darkgoldenrod2\"       \"darkgoldenrod3\"      \n [79] \"darkgoldenrod4\"       \"darkgray\"             \"darkgreen\"           \n [82] \"darkgrey\"             \"darkkhaki\"            \"darkmagenta\"         \n [85] \"darkolivegreen\"       \"darkolivegreen1\"      \"darkolivegreen2\"     \n [88] \"darkolivegreen3\"      \"darkolivegreen4\"      \"darkorange\"          \n [91] \"darkorange1\"          \"darkorange2\"          \"darkorange3\"         \n [94] \"darkorange4\"          \"darkorchid\"           \"darkorchid1\"         \n [97] \"darkorchid2\"          \"darkorchid3\"          \"darkorchid4\"         \n[100] \"darkred\"              \"darksalmon\"           \"darkseagreen\"        \n[103] \"darkseagreen1\"        \"darkseagreen2\"        \"darkseagreen3\"       \n[106] \"darkseagreen4\"        \"darkslateblue\"        \"darkslategray\"       \n[109] \"darkslategray1\"       \"darkslategray2\"       \"darkslategray3\"      \n[112] \"darkslategray4\"       \"darkslategrey\"        \"darkturquoise\"       \n[115] \"darkviolet\"           \"deeppink\"             \"deeppink1\"           \n[118] \"deeppink2\"            \"deeppink3\"            \"deeppink4\"           \n[121] \"deepskyblue\"          \"deepskyblue1\"         \"deepskyblue2\"        \n[124] \"deepskyblue3\"         \"deepskyblue4\"         \"dimgray\"             \n[127] \"dimgrey\"              \"dodgerblue\"           \"dodgerblue1\"         \n[130] \"dodgerblue2\"          \"dodgerblue3\"          \"dodgerblue4\"         \n[133] \"firebrick\"            \"firebrick1\"           \"firebrick2\"          \n[136] \"firebrick3\"           \"firebrick4\"           \"floralwhite\"         \n[139] \"forestgreen\"          \"gainsboro\"            \"ghostwhite\"          \n[142] \"gold\"                 \"gold1\"                \"gold2\"               \n[145] \"gold3\"                \"gold4\"                \"goldenrod\"           \n[148] \"goldenrod1\"           \"goldenrod2\"           \"goldenrod3\"          \n[151] \"goldenrod4\"           \"gray\"                 \"gray0\"               \n[154] \"gray1\"                \"gray2\"                \"gray3\"               \n[157] \"gray4\"                \"gray5\"                \"gray6\"               \n[160] \"gray7\"                \"gray8\"                \"gray9\"               \n[163] \"gray10\"               \"gray11\"               \"gray12\"              \n[166] \"gray13\"               \"gray14\"               \"gray15\"              \n[169] \"gray16\"               \"gray17\"               \"gray18\"              \n[172] \"gray19\"               \"gray20\"               \"gray21\"              \n[175] \"gray22\"               \"gray23\"               \"gray24\"              \n[178] \"gray25\"               \"gray26\"               \"gray27\"              \n[181] \"gray28\"               \"gray29\"               \"gray30\"              \n[184] \"gray31\"               \"gray32\"               \"gray33\"              \n[187] \"gray34\"               \"gray35\"               \"gray36\"              \n[190] \"gray37\"               \"gray38\"               \"gray39\"              \n[193] \"gray40\"               \"gray41\"               \"gray42\"              \n[196] \"gray43\"               \"gray44\"               \"gray45\"              \n[199] \"gray46\"               \"gray47\"               \"gray48\"              \n[202] \"gray49\"               \"gray50\"               \"gray51\"              \n[205] \"gray52\"               \"gray53\"               \"gray54\"              \n[208] \"gray55\"               \"gray56\"               \"gray57\"              \n[211] \"gray58\"               \"gray59\"               \"gray60\"              \n[214] \"gray61\"               \"gray62\"               \"gray63\"              \n[217] \"gray64\"               \"gray65\"               \"gray66\"              \n[220] \"gray67\"               \"gray68\"               \"gray69\"              \n[223] \"gray70\"               \"gray71\"               \"gray72\"              \n[226] \"gray73\"               \"gray74\"               \"gray75\"              \n[229] \"gray76\"               \"gray77\"               \"gray78\"              \n[232] \"gray79\"               \"gray80\"               \"gray81\"              \n[235] \"gray82\"               \"gray83\"               \"gray84\"              \n[238] \"gray85\"               \"gray86\"               \"gray87\"              \n[241] \"gray88\"               \"gray89\"               \"gray90\"              \n[244] \"gray91\"               \"gray92\"               \"gray93\"              \n[247] \"gray94\"               \"gray95\"               \"gray96\"              \n[250] \"gray97\"               \"gray98\"               \"gray99\"              \n[253] \"gray100\"              \"green\"                \"green1\"              \n[256] \"green2\"               \"green3\"               \"green4\"              \n[259] \"greenyellow\"          \"grey\"                 \"grey0\"               \n[262] \"grey1\"                \"grey2\"                \"grey3\"               \n[265] \"grey4\"                \"grey5\"                \"grey6\"               \n[268] \"grey7\"                \"grey8\"                \"grey9\"               \n[271] \"grey10\"               \"grey11\"               \"grey12\"              \n[274] \"grey13\"               \"grey14\"               \"grey15\"              \n[277] \"grey16\"               \"grey17\"               \"grey18\"              \n[280] \"grey19\"               \"grey20\"               \"grey21\"              \n[283] \"grey22\"               \"grey23\"               \"grey24\"              \n[286] \"grey25\"               \"grey26\"               \"grey27\"              \n[289] \"grey28\"               \"grey29\"               \"grey30\"              \n[292] \"grey31\"               \"grey32\"               \"grey33\"              \n[295] \"grey34\"               \"grey35\"               \"grey36\"              \n[298] \"grey37\"               \"grey38\"               \"grey39\"              \n[301] \"grey40\"               \"grey41\"               \"grey42\"              \n[304] \"grey43\"               \"grey44\"               \"grey45\"              \n[307] \"grey46\"               \"grey47\"               \"grey48\"              \n[310] \"grey49\"               \"grey50\"               \"grey51\"              \n[313] \"grey52\"               \"grey53\"               \"grey54\"              \n[316] \"grey55\"               \"grey56\"               \"grey57\"              \n[319] \"grey58\"               \"grey59\"               \"grey60\"              \n[322] \"grey61\"               \"grey62\"               \"grey63\"              \n[325] \"grey64\"               \"grey65\"               \"grey66\"              \n[328] \"grey67\"               \"grey68\"               \"grey69\"              \n[331] \"grey70\"               \"grey71\"               \"grey72\"              \n[334] \"grey73\"               \"grey74\"               \"grey75\"              \n[337] \"grey76\"               \"grey77\"               \"grey78\"              \n[340] \"grey79\"               \"grey80\"               \"grey81\"              \n[343] \"grey82\"               \"grey83\"               \"grey84\"              \n[346] \"grey85\"               \"grey86\"               \"grey87\"              \n[349] \"grey88\"               \"grey89\"               \"grey90\"              \n[352] \"grey91\"               \"grey92\"               \"grey93\"              \n[355] \"grey94\"               \"grey95\"               \"grey96\"              \n[358] \"grey97\"               \"grey98\"               \"grey99\"              \n[361] \"grey100\"              \"honeydew\"             \"honeydew1\"           \n[364] \"honeydew2\"            \"honeydew3\"            \"honeydew4\"           \n[367] \"hotpink\"              \"hotpink1\"             \"hotpink2\"            \n[370] \"hotpink3\"             \"hotpink4\"             \"indianred\"           \n[373] \"indianred1\"           \"indianred2\"           \"indianred3\"          \n[376] \"indianred4\"           \"ivory\"                \"ivory1\"              \n[379] \"ivory2\"               \"ivory3\"               \"ivory4\"              \n[382] \"khaki\"                \"khaki1\"               \"khaki2\"              \n[385] \"khaki3\"               \"khaki4\"               \"lavender\"            \n[388] \"lavenderblush\"        \"lavenderblush1\"       \"lavenderblush2\"      \n[391] \"lavenderblush3\"       \"lavenderblush4\"       \"lawngreen\"           \n[394] \"lemonchiffon\"         \"lemonchiffon1\"        \"lemonchiffon2\"       \n[397] \"lemonchiffon3\"        \"lemonchiffon4\"        \"lightblue\"           \n[400] \"lightblue1\"           \"lightblue2\"           \"lightblue3\"          \n[403] \"lightblue4\"           \"lightcoral\"           \"lightcyan\"           \n[406] \"lightcyan1\"           \"lightcyan2\"           \"lightcyan3\"          \n[409] \"lightcyan4\"           \"lightgoldenrod\"       \"lightgoldenrod1\"     \n[412] \"lightgoldenrod2\"      \"lightgoldenrod3\"      \"lightgoldenrod4\"     \n[415] \"lightgoldenrodyellow\" \"lightgray\"            \"lightgreen\"          \n[418] \"lightgrey\"            \"lightpink\"            \"lightpink1\"          \n[421] \"lightpink2\"           \"lightpink3\"           \"lightpink4\"          \n[424] \"lightsalmon\"          \"lightsalmon1\"         \"lightsalmon2\"        \n[427] \"lightsalmon3\"         \"lightsalmon4\"         \"lightseagreen\"       \n[430] \"lightskyblue\"         \"lightskyblue1\"        \"lightskyblue2\"       \n[433] \"lightskyblue3\"        \"lightskyblue4\"        \"lightslateblue\"      \n[436] \"lightslategray\"       \"lightslategrey\"       \"lightsteelblue\"      \n[439] \"lightsteelblue1\"      \"lightsteelblue2\"      \"lightsteelblue3\"     \n[442] \"lightsteelblue4\"      \"lightyellow\"          \"lightyellow1\"        \n[445] \"lightyellow2\"         \"lightyellow3\"         \"lightyellow4\"        \n[448] \"limegreen\"            \"linen\"                \"magenta\"             \n[451] \"magenta1\"             \"magenta2\"             \"magenta3\"            \n[454] \"magenta4\"             \"maroon\"               \"maroon1\"             \n[457] \"maroon2\"              \"maroon3\"              \"maroon4\"             \n[460] \"mediumaquamarine\"     \"mediumblue\"           \"mediumorchid\"        \n[463] \"mediumorchid1\"        \"mediumorchid2\"        \"mediumorchid3\"       \n[466] \"mediumorchid4\"        \"mediumpurple\"         \"mediumpurple1\"       \n[469] \"mediumpurple2\"        \"mediumpurple3\"        \"mediumpurple4\"       \n[472] \"mediumseagreen\"       \"mediumslateblue\"      \"mediumspringgreen\"   \n[475] \"mediumturquoise\"      \"mediumvioletred\"      \"midnightblue\"        \n[478] \"mintcream\"            \"mistyrose\"            \"mistyrose1\"          \n[481] \"mistyrose2\"           \"mistyrose3\"           \"mistyrose4\"          \n[484] \"moccasin\"             \"navajowhite\"          \"navajowhite1\"        \n[487] \"navajowhite2\"         \"navajowhite3\"         \"navajowhite4\"        \n[490] \"navy\"                 \"navyblue\"             \"oldlace\"             \n[493] \"olivedrab\"            \"olivedrab1\"           \"olivedrab2\"          \n[496] \"olivedrab3\"           \"olivedrab4\"           \"orange\"              \n[499] \"orange1\"              \"orange2\"              \"orange3\"             \n[502] \"orange4\"              \"orangered\"            \"orangered1\"          \n[505] \"orangered2\"           \"orangered3\"           \"orangered4\"          \n[508] \"orchid\"               \"orchid1\"              \"orchid2\"             \n[511] \"orchid3\"              \"orchid4\"              \"palegoldenrod\"       \n[514] \"palegreen\"            \"palegreen1\"           \"palegreen2\"          \n[517] \"palegreen3\"           \"palegreen4\"           \"paleturquoise\"       \n[520] \"paleturquoise1\"       \"paleturquoise2\"       \"paleturquoise3\"      \n[523] \"paleturquoise4\"       \"palevioletred\"        \"palevioletred1\"      \n[526] \"palevioletred2\"       \"palevioletred3\"       \"palevioletred4\"      \n[529] \"papayawhip\"           \"peachpuff\"            \"peachpuff1\"          \n[532] \"peachpuff2\"           \"peachpuff3\"           \"peachpuff4\"          \n[535] \"peru\"                 \"pink\"                 \"pink1\"               \n[538] \"pink2\"                \"pink3\"                \"pink4\"               \n[541] \"plum\"                 \"plum1\"                \"plum2\"               \n[544] \"plum3\"                \"plum4\"                \"powderblue\"          \n[547] \"purple\"               \"purple1\"              \"purple2\"             \n[550] \"purple3\"              \"purple4\"              \"red\"                 \n[553] \"red1\"                 \"red2\"                 \"red3\"                \n[556] \"red4\"                 \"rosybrown\"            \"rosybrown1\"          \n[559] \"rosybrown2\"           \"rosybrown3\"           \"rosybrown4\"          \n[562] \"royalblue\"            \"royalblue1\"           \"royalblue2\"          \n[565] \"royalblue3\"           \"royalblue4\"           \"saddlebrown\"         \n[568] \"salmon\"               \"salmon1\"              \"salmon2\"             \n[571] \"salmon3\"              \"salmon4\"              \"sandybrown\"          \n[574] \"seagreen\"             \"seagreen1\"            \"seagreen2\"           \n[577] \"seagreen3\"            \"seagreen4\"            \"seashell\"            \n[580] \"seashell1\"            \"seashell2\"            \"seashell3\"           \n[583] \"seashell4\"            \"sienna\"               \"sienna1\"             \n[586] \"sienna2\"              \"sienna3\"              \"sienna4\"             \n[589] \"skyblue\"              \"skyblue1\"             \"skyblue2\"            \n[592] \"skyblue3\"             \"skyblue4\"             \"slateblue\"           \n[595] \"slateblue1\"           \"slateblue2\"           \"slateblue3\"          \n[598] \"slateblue4\"           \"slategray\"            \"slategray1\"          \n[601] \"slategray2\"           \"slategray3\"           \"slategray4\"          \n[604] \"slategrey\"            \"snow\"                 \"snow1\"               \n[607] \"snow2\"                \"snow3\"                \"snow4\"               \n[610] \"springgreen\"          \"springgreen1\"         \"springgreen2\"        \n[613] \"springgreen3\"         \"springgreen4\"         \"steelblue\"           \n[616] \"steelblue1\"           \"steelblue2\"           \"steelblue3\"          \n[619] \"steelblue4\"           \"tan\"                  \"tan1\"                \n[622] \"tan2\"                 \"tan3\"                 \"tan4\"                \n[625] \"thistle\"              \"thistle1\"             \"thistle2\"            \n[628] \"thistle3\"             \"thistle4\"             \"tomato\"              \n[631] \"tomato1\"              \"tomato2\"              \"tomato3\"             \n[634] \"tomato4\"              \"turquoise\"            \"turquoise1\"          \n[637] \"turquoise2\"           \"turquoise3\"           \"turquoise4\"          \n[640] \"violet\"               \"violetred\"            \"violetred1\"          \n[643] \"violetred2\"           \"violetred3\"           \"violetred4\"          \n[646] \"wheat\"                \"wheat1\"               \"wheat2\"              \n[649] \"wheat3\"               \"wheat4\"               \"whitesmoke\"          \n[652] \"yellow\"               \"yellow1\"              \"yellow2\"             \n[655] \"yellow3\"              \"yellow4\"              \"yellowgreen\"         \n\n\n　図を白黒で印刷する場合、色によっては区別がつかない可能性がある。この場合、点の形を修正すれば、白黒でも識別できるだろう。点の形はaes()内にshapeで指定することができる。たとえば、scatter_plot1と同じ図を、今回は色分けせず形分けをしてみよう。\n\nscatter_plot2 <- df %>%\n   drop_na(FH_Total, HDI_2018, PPP_per_capita) %>%\n   mutate(HighIncome = if_else(PPP_per_capita >= 20000, \"高\", \"低\")) %>%\n   ggplot() +\n   geom_point(aes(x = FH_Total, y = HDI_2018, shape = HighIncome), \n              size = 2) +\n   labs(x = \"フリーダムハウス・スコア\", y = \"人間開発指数 (2018)\",\n        color = \"一人当たりPPP GDP\") +\n   theme(legend.position = \"bottom\")\n\nscatter_plot2\n\n\n\n\n\n\n\n\n　点の形を自分で調整したい場合はscale_shape_manual()を使用する。使い方はscale_color_manual()と同じであるが、色は\"red\"や\"blue\"など、人間が分かる名前になっているに対し、形は1、2、3などの数値を使う。たとえば、4はバツ記号、1は中身が空っぽの丸である。\n\nscatter_plot2 +\n   scale_shape_manual(values = c(\"低\" = 4, \"高\" = 1))\n\n\n\n\n\n\n\n\n　Rで使えるデフォルトのshapeは全23種類があり（0から22まで）、デフォルトは19である。0〜14の場合、中身が透明であり、枠線のみの形である。枠線の色を変えたい場合はcolor引数で調整できる。また15から20までは中身が埋まっており、枠線のない形である。この中身の色もcolorで調整可能である。注意が必要なのは21番と22番であり、21と22の場合、枠線はcolor、内側の色塗りはfillで調整する必要がある。"
  },
  {
    "objectID": "materials/visualization3.html#折れ線グラフ",
    "href": "materials/visualization3.html#折れ線グラフ",
    "title": "第14回講義資料",
    "section": "折れ線グラフ",
    "text": "折れ線グラフ\n　折れ線グラフはある連続変数が経時的に変化する具合を示す際に使われる最も代表的なグラフである。たとえば、株価の変動を示す場合、横軸は日付、縦軸は株価となるだろう。この日付は順序変数であり、株価は連続変数である。この意味で、折れ線グラフは順序変数\\(\\times\\)連続変数間の関係を調べるときにも使用可能である。\n\n折れ線グラフの作成\n　以下の ?@fig-line-example を見てみよう。この折れ線グラフにおける「線」にはどのような情報があるだろうか。実はこの線自体には大きな意味を持たない。大事なのはこの線の傾きが変化し得る「点」である。\n\n\n\n\n\n図 3: 折れ線グラフの例 (1)\n\n\n\n\nつまり、折れ線グラフはとは 図 4 のように各線の傾きが変わり得る点を線で繋いだだけである。座標平面上に点を載せるという意味で、折れ線グラフのマッピング要素は散布図のそれと大きく変わらない。\n\n\n\n\n\n図 4: 折れ線グラフの例 (2)\n\n\n\n\n　つまり、折れ線グラフの必須要素とは線の傾きが変化し得る点の横軸上の位置（x）と線の傾きが変化し得る点の縦軸上の位置（y）であり、線はその点を繋いだだけである。 図 3 の例だと、横軸は日付、縦軸は100万人当たり新規感染者数である。ただし、一つ注意が必要であり、それは線が2本以上ある場合だ。線が2本以上存在する折れ線グラフの場合、どの点とどの点を繋げばいいかを指定する必要がある。言い換えれば、それぞれの点がどのグループの点なのかを明確にしておく必要がある（groups）。\n　それでは、折れ線グラフを作ってみよう。最初に折れ線グラフの作成にひつ表なデータを読み込む。データは授業サポートページから実習用データ（Micro14.csv）をダウンロード可能であり、整然データとして加工済みのデータである。このデータは2つの変数で構成されており、Countryは国名、Dayは日付（2021年6月）、NewCasesは100万人当りCOVID-19新規感染者数を意味する。\n\nCOVID_df <- read_csv(\"Data/Micro14.csv\")\nCOVID_df\n\n# A tibble: 15 × 3\n   Country   Day NewCases\n   <chr>   <dbl>    <dbl>\n 1 Japan      16    13.6 \n 2 Japan      17    12.2 \n 3 Japan      18    12.9 \n 4 Japan      19    11.9 \n 5 Japan      20    10.4 \n 6 Korea      16    10.5 \n 7 Korea      17     9.89\n 8 Korea      18     9.40\n 9 Korea      19     8.37\n10 Korea      20     6.96\n11 Taiwan     16     7.05\n12 Taiwan     17     7.35\n13 Taiwan     18     7.85\n14 Taiwan     19     5.25\n15 Taiwan     20     4.58\n\n\n　まず、線が一本の場合の折れ線グラフから始めよう。今のデータには複数の国があるのでfilter(Country == \"Japan\")で日本のみを抽出し、ggplot()関数に渡す。使用する幾何オブジェクトはgeom_line()、マッピングは散布図と同様、xとyに対して行う。\n\nCOVID_df %>%\n   filter(Country == \"Japan\") %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")\n\n\n\n\n\n\n\n\n線が二本以上の場合\ngroupに線のグループ変数を指定\n\n国別の折れ線グラフの場合、国変数を指定\n\n\nCOVID_df <- COVID_df %>%\n   mutate(Country = case_when(Country == \"Japan\" ~ \"日本\",\n                              Country == \"Korea\" ~ \"韓国\",\n                              TRUE               ~ \"台湾\"),\n          Country = factor(Country, levels = c(\"日本\", \"韓国\", \"台湾\")))\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country)) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\")\n\n\n\n\n\n\n\n\n線が二本以上の場合\ncolorで色分け: 国別の折れ線グラフの場合、国変数を指定\n\n線をやや太め（1.5）にする\n\nsize: 全線に適用させるためにaes()の外側に\n線が細すぎると色が区別しにくい\n\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, color = Country), \n             size = 1.5) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\")\n\n\n\n\n\n\n\n\n\n\n次元の追加\n多くの折れ線グラフは既に3次元\n\n日（x）、新規感染者数（y）、国（group or color）\nこれ以上次元を増やすならファセット分割で対応するのが賢明\nファセット分割せずに次元を増やすなら…\n\nsize: 線の太さ\nlinetype: 線のタイプ（1 = 実線、2 = 破線、4 = 点線、…）\n\n白黒図の場合、colorでなく、linetype\n\nalpha: 透明度\n\n\n線のタイプ\n\n主に白黒図で使用\n\n\nCOVID_df %>%\n   ggplot() +\n   geom_line(aes(x = Day, y = NewCases, group = Country, \n                 linetype = Country), size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        linetype = \"国\") \n\n\n\n\n\n\n\n\n自分で線のタイプを指定したい場合はscale_linetype_manual()レイヤーを追加し、values引数にそれぞれの線のタイプを指定する。\n\nデータ %>%\n  ggplot() +\n  ... +\n  scale_linetype_manual(values = c(\"日本\" = 1, \"韓国\" = 2, \"台湾\" = 4))\n\nlinetypeの見本\n種類が多くなると区別しにくいため、最大3つ程度\n\n1, (2 or 3), (4 or 10）\n\n2と3、または4と10ど同時に使うと、区別することが難しい。\n\n一つ面に登場する線は3〜4本程度まで（色分けも同様）\n\n\n\n\n\n\n\n\n\n\n\n\n折れ線グラフ + 散布図\ngeom_point()とgeom_line()を重ねる\n\n後（先）に書いたレイヤーが前面（背面）に\n傾きの変化が激しくない場合に有効\n点は線より大きめに\n白黒印刷に備え、点の形分けも可能\n\n\nCOVID_df %>%\n   ggplot(aes(x = Day, y = NewCases, color = Country)) +\n   geom_point(aes(shape = Country), size = 3) +\n   geom_line(aes(group = Country), size = 1) +\n   labs(x = \"日 (2021年6月)\", y = \"100万人当たり新規感染者数 (人)\", \n        color = \"国\", shape = \"国\") +\n   theme_bw()"
  },
  {
    "objectID": "slide/slide12.html#円グラフ大好き",
    "href": "slide/slide12.html#円グラフ大好き",
    "title": "ミクロ政治データ分析実習",
    "section": "円グラフ大好き！",
    "text": "円グラフ大好き！\n最も面積が広いのは?\n\n\n円グラフ\n\n\n\n\n\n\n\n\n\n\n\n\n3次元円グラフ\n\n\n\n\n\n\n\n\n\n\n\n\n棒グラフ"
  },
  {
    "objectID": "slide/slide12.html#円グラフ大好き-1",
    "href": "slide/slide12.html#円グラフ大好き-1",
    "title": "ミクロ政治データ分析実習",
    "section": "円グラフ大好き！",
    "text": "円グラフ大好き！"
  },
  {
    "objectID": "slide/slide12.html#それでも円グラフが描きたいです",
    "href": "slide/slide12.html#それでも円グラフが描きたいです",
    "title": "ミクロ政治データ分析実習",
    "section": "それでも円グラフが描きたいです…",
    "text": "それでも円グラフが描きたいです…"
  },
  {
    "objectID": "slide/slide12.html#やめとけって",
    "href": "slide/slide12.html#やめとけって",
    "title": "ミクロ政治データ分析実習",
    "section": "やめとけって",
    "text": "やめとけって\n棒グラフで十分"
  },
  {
    "objectID": "HW/HW13.html",
    "href": "HW/HW13.html",
    "title": "「ミクロ政治データ分析実習」第13回課題",
    "section": "",
    "text": "課題用ファイル、課題用データ\n\nStep2: NIIオンライン分析システムを起動し、課題用のプロジェクトを作成する。\nStep3: プロジェクト・フォルダー内にDataフォルダーを作成する。\nStep4: プロジェクト・フォルダーに課題用ファイル（Micro_HW13.Rmd）をアップロードする。\nStep5: Dataフォルダーに課題用データ（Micro_HW13.csv）をアップロードする。\n\n\n\n\n\n\nファイルのアップロード先に注意!\n\n\n\n　課題用ファイル（.Rmd）はプロジェクト・フォルダ―の直にアップロードし、課題用データ（.csv）はプロジェクト・フォルダ―内のDataフォルダーに入れること。多くの履修者がDataフォルダーに.Rmdファイルと.csvファイルを入れているが、この場合、Knitが出来ない場合がある（自分がファイルシステムに詳しいならコード内のパスを修正して対応することも可能）。\n\n\nStep6: 課題用ファイル（Micro_HW13.Rmd）を開き、一旦、Knitしてみる。\nStep7: 以下のボタンをクリックし、サンプルファイルを確認する。\n サンプルファイルの表示\nStep8: サンプルファイルと同じ結果が得られるように課題用ファイルを修正する。\n\n提出者の学籍番号・氏名の修正を忘れないこと。\nチャンク内の# この行を削除し、コードを入力の部分を削除し、コードを入力する。\n\nStep9: 完成したら出力物（.htmlファイル）を自分のPCにダウンロードする。\nStep10: ダウンロードしたファイルをLMSに提出する。提出する前にダウンロードしたファイルを開き、正しくダウンロードされているかを確認すること。\n注意: 課題の取り組み方が分からない場合、オフィスアワーなどを利用し担当教員と相談すること。\n\n\n\n\n\n\n課題を途中で中断し、再開した場合は…\n\n\n\n　課題を途中で中断し、再開した場合、RStudioの右上の「Project:」欄が「(None)」になっているか確認すること。「(None)」のまま、あるいはプロジェクト名が課題用プロジェクト名と一致しない場合はメニューの File > Open Project から開くこと。プロジェクトの開き方は本サポートページの Rの使い方 > プロジェクト管理 から確認できる。"
  },
  {
    "objectID": "HW/HW14.html",
    "href": "HW/HW14.html",
    "title": "「ミクロ政治データ分析実習」第14回課題",
    "section": "",
    "text": "課題用ファイル、課題用データ (1)、課題用データ (2)\n\nStep2: NIIオンライン分析システムを起動し、課題用のプロジェクトを作成する。\nStep3: プロジェクト・フォルダー内にDataフォルダーを作成する。\nStep4: プロジェクト・フォルダーに課題用ファイル（Micro_HW14.Rmd）をアップロードする。\nStep5: Dataフォルダーに課題用データ（Micro_HW14_1.csvとMicro_HW14_2.csv）をアップロードする。\n\n\n\n\n\n\nファイルのアップロード先に注意!\n\n\n\n　課題用ファイル（.Rmd）はプロジェクト・フォルダ―の直にアップロードし、課題用データ（.csv）はプロジェクト・フォルダ―内のDataフォルダーに入れること。多くの履修者がDataフォルダーに.Rmdファイルと.csvファイルを入れているが、この場合、Knitが出来ない場合がある（自分がファイルシステムに詳しいならコード内のパスを修正して対応することも可能）。\n\n\nStep6: 課題用ファイル（Micro_HW14.Rmd）を開き、一旦、Knitしてみる。\nStep7: 以下のボタンをクリックし、サンプルファイルを確認する。\n\nStep8: サンプルファイルと同じ結果が得られるように課題用ファイルを修正する。\n\n提出者の学籍番号・氏名の修正を忘れないこと。\nチャンク内の# この行を削除し、コードを入力の部分を削除し、コードを入力する。\n\nStep9: 完成したら出力物（.htmlファイル）を自分のPCにダウンロードする。\nStep10: ダウンロードしたファイルをLMSに提出する。提出する前にダウンロードしたファイルを開き、正しくダウンロードされているかを確認すること。\n注意: 課題の取り組み方が分からない場合、オフィスアワーなどを利用し担当教員と相談すること。\n\n\n\n\n\n\n課題を途中で中断し、再開した場合は…\n\n\n\n　課題を途中で中断し、再開した場合、RStudioの右上の「Project:」欄が「(None)」になっているか確認すること。「(None)」のまま、あるいはプロジェクト名が課題用プロジェクト名と一致しない場合はメニューの File > Open Project から開くこと。プロジェクトの開き方は本サポートページの Rの使い方 > プロジェクト管理 から確認できる。"
  },
  {
    "objectID": "intro/file.html#参考-本講義で推奨するファイルフォルダー構造",
    "href": "intro/file.html#参考-本講義で推奨するファイルフォルダー構造",
    "title": "ファイル管理",
    "section": "3 参考) 本講義で推奨するファイル/フォルダー構造",
    "text": "3 参考) 本講義で推奨するファイル/フォルダー構造\n\nプロジェクト機能は必ず使用し、RStudioの右上が「Project: (None)」になっている場合、プロジェクトを作成するか、既存のプロジェクトを開く。右上のにプロジェクト名が表示されていればOK\nコードが含まれたファイル（.R、.Rmd、.qmdなど）はプロジェクトフォルダーの直に入れる。R Markdownの出力物の基本的にここに保存される。\nDataフォルダーを作成し、データファイル（.csv、.xlsxなど）はDataフォルダーに入れる。\nグラフを作成し、保存する場合はプロジェクト・フォルダーにFigsフォルダーを作成し、そこに保存する。\n\n\n\n\n\n\n\nファイルの場所が分からない\n\n\n\nFileペインではファイルの一覧が確認できる。しかし、これらのファイルがどのフォルダーに入っているかが分からない場合もあろう。この場合、Fileペインの上段バーを確認すること。そこに現在表示されているファイルのパスが表示されている。「Home>プロジェクト名」と表示されている場合、Fileペインに見えるファイルはプロジェクト・フォルダ―直に入っていることを意味する（右上のプロジェクト名とFileペインのプロジェクト名が一致しているか確認すること）。これらのファイルのパスは\"ファイル名\"のみで良い。上段バーのパスが「Home>プロジェクト名>Data」になっている場合、表示されているファイルはプロジェクト・フォルダー内のDataフォルダーに入っていることを意味する。これらのファイルのパスは\"Data/ファイル名\"となる。"
  },
  {
    "objectID": "HW/Final.html#注意事項",
    "href": "HW/Final.html#注意事項",
    "title": "期末テスト実施要領",
    "section": "注意事項",
    "text": "注意事項\n\n指定された座席でテストを受ける。\n遅刻した場合でも、受験時間の延長はない。余裕を持って大学に来ること。\n持ち帰りの場合でも、4限中に7問以上回答すること。7問未満の回答を提出した場合は不可とする。\n\nただし、7問全問正解である必要はない。\n\n持ち帰りの場合、4限中に提出した回答を修正することはできるが、採点には反映されない。持ち帰り分は、4限中に提出した回答以降の回答のみが採点対象となる。\n\n必要に応じて既に提出した回答の修正は必要となる。たとえば、問題8までの回答をしたとする。ここで問題7の回答が不正解の場合、問題8以降はコードが正しくても結果が異なる可能性がある。この場合、持ち帰って問題7を修正する必要があろう。ただし、採点（持ち帰り分）の対象は問題9からである。\n\n持ち帰りの場合、再提出の期限は授業日当日の23時59分\n宋/TAは問題そのものに関する質問（問題の誤り、NIIシステムの不具合など）以外、一切受け付けない\n\nエラーメッセージへの対処もテストの一部\n全員が同じ環境のNIIオンライン分析システムを使用しているため、受験者全員に共通する不具合以外は対応しない。つまり、他の人にはエラーが発生せず、自分だけエラーが出たということはシステムの不具合でなく、自分のコードが間違っていることを意味する。\n\n提出物はKnitした.htmlファイルである。.htmlファイルを正しくない方法（マウス右クリックでダウンロードするなど）でダウンロードした場合、コードと結果が含まれていない白紙のページとなる。提出する前に必ずファイルを開いてみて確認すること。間違ったファイルを提出しても再提出は認めない。"
  }
]