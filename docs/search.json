[
  {
    "objectID": "materials/rmarkdown.html#markdown文法の基本",
    "href": "materials/rmarkdown.html#markdown文法の基本",
    "title": "第5回講義資料",
    "section": "Markdown文法の基本",
    "text": "Markdown文法の基本\n　ここでは本講義の課題を遂行するための必要最低限のことのみ解説する。R Markdwonの詳細については教科書の第21章（R Markdown [基礎]）を参照すること。\n\n改行\n　Markdownにおける改行はやや特殊である。特殊といっても難しいことではない。普段よりもう一行改行するだけだ。Markdownの場合、1回の改行は改行として判定されず、同じ行の連続と認識する。たとえば、Inputのように入力するとOutputのように文章1と文章2が繋がってしまう。\nInput:\n文章1\n文章2\nOutput:\n文章1 文章2\n　文章1と文章2を改行するためにはもう一行、改行する必要がある。以下の例を見てみよう。\nInput:\n文章1\n\n文章2\nOutput:\n文章1\n文章2\n　こうすることで段落間の間隔を強制的に入れることとなり、作成者側にも読みやすい文書構造になるといった利点がある1。\n\n\n強調\n　文章の一部を強調する方法として太字、イタリック2、アンダーラインがあり、強調ではないが、ついでに取り消し線についても紹介する。いずれも強調したい箇所を記号で囲むだけだ。\nInput:\n文章の一部を**太字**にしてみましょう。\n\n*イタリック*もいいですね。\n\n~~取り消し線~~はあまり使わないかも。\n\n<u>アンダーライン</u>はHTMLタグを使います。\nOutput:\n文章の一部を太字にしてみましょう。\nイタリックもいいですね。\n取り消し線はあまり使わないかも。\nアンダーラインはHTMLタグを使います。\n\n\n箇条書き\n　箇条書きには順序なしと順序付きがある。順序なしの場合*または-の後に半角スペースを1つ入れるだけである。また、3文字以上の字下げで下位項目を追加することもできる。\nInput:\n- 項目1\n   - 項目1-1\n   - 項目1-2\n      - 項目1-2-1\n         - 項目1-2-1-1\n      - 項目1-2-2\n- 項目2\n- 項目3\nOutput:\n\n項目1\n\n項目1-1\n項目1-2\n\n項目1-2-1\n\n項目1-2-1-1\n\n項目1-2-2\n\n\n項目2\n項目3\n\n　順序付き箇条書きは、これは-（または*）を数字.に換えるだけである。順序なしの場合と違って数字の後にピリオド（.）が付くことに注意すること。また、順序付き箇条書きと順序なし箇条書きは組み合わせて使うことも出来る。\nInput:\n1. 項目1\n   1. 項目1-1\n   2. 項目1-2\n2. 項目2\n   * 項目2-1\n   * 項目2-2\n3. 項目3\nOutput:\n\n項目1\n\n項目1-1\n項目1-2\n\n項目2\n\n項目2-1\n項目2-2\n\n項目3\n\n\n\n見出し\n　章、節、段落のタイトルを付ける際は#を使う。#の数が多いほど文字が小さくなる。章の見出しを##にするなら節は###、小節または段落は####が適切だろう。R Markdownの使用上、見出しは####まで使える。\nInput:\n# 見出し1\n## 見出し2\n### 見出し3\n#### 見出し4\nOutput:\n見出し1\n見出し2\n見出し3\n見出し4\n\n\n区切り線\n区切り線は---または***を使う。\nInput:\n---\nOutput:\n\n\n\n表\n　Markdownの表は非常にシンプルな書き方をしている。行は改行で、列は|で区切られる。ただ、表の第1行はヘッダー（変数名や列名が表示される行）扱いとなり、ヘッダーと内容の区分は|---|で行う。以下はMarkdownを利用した簡単な表の例である。ここでは可読性のために、適宜スペースを入れたが、スペースの有無は結果に影響を与えない。\nInput:\n|ID   |Name     |Math    |English |Favorite food|\n|:---:|---------|-------:|-------:|-------------|\n|1    |SONG     |15      |10      |Ramen        |\n|2    |Yanai    |100     |100     |Cat food     |\n|3    |Shigemura|80      |50      |Raw chicken  |\n|4    |Wickham  |80      |90      |Lamb         |\nOutput:\n\n\n\nID\nName\nMath\nEnglish\nFavorite food\n\n\n\n\n1\nSONG\n15\n10\nRamen\n\n\n2\nYanai\n100\n100\nCat food\n\n\n3\nShigemura\n80\n50\nRaw chicken\n\n\n4\nWickham\n80\n90\nLamb\n\n\n\n　1行目はヘッダーであり、太字かつ中央揃えになる。2行目以降はデフォルトでは左揃えになるが、|---|をいじることによって当該列の揃えを調整できる。|:---|は左 (デフォルト)、|---:|は右、|:---:|は中央揃えになる。また-の個数は1個以上なら問題なく、|-|も|---|も同じである。\n\n\n画像\n　R Markdownに画像を入れるには![代替テキスト](ファイル名)と入力する。画像ファイル名はパス付きを指定する必要がある。[代替テキスト]は画像を読み込めなかった場合に出力されるテキストを意味する。これは画像が読み込めなかった場合の代替テキストでもあるが、視覚障害者用のウェブブラウザーのためにも使われる。これらのウェブブラウザーはテキストのみ出力されるものが多く、画像の代わりには代替テキストが読み込まれる。\n　例えば、Figsフォルダー内のfavicon.pngというファイルを読み込む場合、以下のように書く。\nInput:\n![『私たちのR』ロゴ](Figs/favicon.png)\nOutput:\n\n\n\n『私たちのR』ロゴ\n\n\n\n\nリンク\n　ハイパーリンクは[テキスト](URL)のように書く。[]内は実際に表示されるテキストであり、()は飛ばすURLとなる。\nInput:\n毎日1回は[SONGのホームページ](https://www.jaysong.net)へアクセスしましょう。\nOutput:\n毎日1回はSONGのホームページへアクセスしましょう。\n\n\n脚注\n　脚注は[^固有識別子]と[^固有識別子]: 脚注内容の2つの要素が必要だ。まず、文末脚注を入れる箇所に[^xxxx]を挿入する。xxxxは任意の文字列で良い。しかし、同じR Markdown内においてこの識別子は被らないように注意すること（固有識別子だから）。実際の脚注の内容は[^xxxx]: 内容のように入力する。これはどこに位置しても問題ない。文書の途中でも、最後に入れても、脚注の内容は文末に位置する。ただし、脚注を入れる段落のすぐ後の方が作成する側としては読みやすいだろう。\nInput:\nこれは普通の文章です[^foot1]。\n\n[^foot1]: これは普通の脚注です。\nOutput:\nこれは普通の文章です3。\n\n\n数式\n　インライン数式は$数式$で埋め込むことができる。数式はLaTeXの書き方とほぼ同じだ。ちなみに、R Markdownの数式はMathJaxによってレンダリングされる。このMathJaxライブラリはHTMLに埋め込まれているのではないため、インターネットに接続せずにHTMLファイルを開くと数式が正しく出力されない可能性がある。\nInput:\nアインシュタインと言えば、$e = mc^2$でしょう。\nOutput:\nアインシュタインと言えば、\\(e = mc^2\\)でしょう。\n　数式を独立した行として出力する場合は、$の代わりに$$を使用する。\nInput:\n独立した数式の書き方\n\n$$\ny_i \\sim \\text{Normal}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma).\n$$\nOutput:\n独立した数式の書き方\n\\[\ny_i \\sim \\text{Normal}(\\mathbf{X} \\boldsymbol{\\beta}, \\sigma).\n\\]\n　もし数式が複数の行で構成されている場合は$$内にaligned環境（\\begin{aligned}〜\\end{aligned}）を使用する。むろん、使い方はLaTeXと同じである。\nInput:\n複数の行にわたる数式の書き方\n\n$$\n\\begin{aligned}\n  Y_i      & \\sim \\text{Bernoulli}(\\theta_i), \\\\\n  \\theta_i & = \\text{logit}^{-1}(y_i^*), \\\\\n  y_i^*    & = \\beta_0 + \\beta_1 x_1 + \\beta_2 z_1.\n\\end{aligned}\n$$\nOutput:\n複数の行にわたる数式の書き方\n\\[\n\\begin{aligned}\n  Y_i      & \\sim \\text{Bernoulli}(\\theta_i), \\\\\n  \\theta_i & = \\text{logit}^{-1}(y_i^*), \\\\\n  y_i^*    & = \\beta_0 + \\beta_1 x_1 + \\beta_2 z_1.\n\\end{aligned}\n\\]\n　ここまで見ればLaTeXユーザーはお分かりだろうが、$$の中にはLaTeXコマンドが使える。たとえば、行列を作成する際は以下のように\\begin{bmatrix}環境を使う。\nInput:\n行列の書き方\n\n$$\nX = \\begin{bmatrix}\n  x_{11} & x_{12} \\\\\n  x_{21} & x_{22} \\\\\n  x_{31} & x_{32}\n\\end{bmatrix}.\n$$\nOutput:\n行列の書き方\n\\[\nX = \\begin{bmatrix}\n  x_{11} & x_{12} \\\\\n  x_{21} & x_{22} \\\\\n  x_{31} & x_{32}\n\\end{bmatrix}.\n\\]\n\n\n引用\n　引用の際は文章の最初に>を入れるだけだ。>の後に半角のスペースを1つ入れること。\nInput:\n「政治とは何か」についてイーストンは以下のように定義しました。\n\n> [A] political system can be designated as those interactions through which values are authoritatively allocated for a society.\nOutput:\n「政治とは何か」についてイーストンは以下のように定義しました。\n\n[A] political system can be designated as those interactions through which values are authoritatively allocated for a society.\n\n\n\nコメント\n　R Markdownにもコメントを付けることができる。とりあえず書いたが要らなくなった段落や文章があって、消すことがもったいない場合はコメントアウトするのも1つの方法だろう。ただし、Rのコメントアウトの方法は#だったが、これはR Markdownでは見出しの記号である。R Markdownのコメントは<!--と-->で囲む必要がある。\nInput:\n文章1\n\n<!--\nここはコメントです。\n-->\n\n文章2\nOutput:\n文章1\n\n文章2"
  },
  {
    "objectID": "materials/rmarkdown.html#rコード",
    "href": "materials/rmarkdown.html#rコード",
    "title": "第5回講義資料",
    "section": "Rコード",
    "text": "Rコード\n　以上の内容まで抑えると、R Markdownを使って、簡単な文法のみで構造化された文書が作成できる。しかし、R Markdownの意義は文章とコード、結果が統合されることだろう。それでは文書内にRコードとその実行結果を入れる方法を紹介する。\n　コードは```{r}と```の間に入力するだけだ。これでコードと結果が同時に出力される。たとえば、print(\"Hello World!\")を走らせるコードを入れてみよう。\nInput:\n\"Hello World!\"を出力するコード\n\n```{r, error=TRUE}\nprint(\"Hello World!\")\n```\nOutput:\n“Hello World!”を出力するコード\n\nprint(\"Hello World!\")\n\n[1] \"Hello World!\"\n\n\n　```{r}と```で囲まれた範囲をR Markdownではチャンク（Chunk）と呼ぶ。このチャンク内ではRと全く同じことが出来る。パッケージやデータの読み込み、オブジェクトの生成、データハンドリング、可視化など、全てが出来る。可視化の方法については第12回講義以降の講義で解説するが、ここでは例として紹介する。\nInput: 　\n```{r}\n# パッケージの読み込み\nlibrary(tidyverse)\n# R内蔵データセットのirisを使った可視化\niris %>%\n  mutate(Species2 = recode(Species,\n                           \"setosa\"     = \"セトナ\",\n                           \"versicolor\" = \"バーシクル\",\n                           \"virginica\"  = \"バージニカ\")) %>%\n  ggplot() +\n  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +\n  labs(x = \"萼片の長さ (cm)\", y = \"萼片の幅 (cm)\", color = \"品種\") +\n  theme_minimal(base_size = 12)\n```\nOutput:\n\n# パッケージの読み込み\nlibrary(tidyverse)\n# R内蔵データセットのirisを使った可視化\niris %>%\n  mutate(Species2 = recode(Species,\n                           \"setosa\"     = \"セトナ\",\n                           \"versicolor\" = \"バーシクル\",\n                           \"virginica\"  = \"バージニカ\")) %>%\n  ggplot() +\n  geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species2)) +\n  labs(x = \"萼片の長さ (cm)\", y = \"萼片の幅 (cm)\", color = \"品種\") +\n  theme_minimal(base_size = 12)\n\n\n\n\n\n\n\n\n　他にも文中にRコードを埋め込むこともできる。例えば、ベクトルX <- c(2, 3, 5, 7, 12)があり、この平均値を文中で示したいとする。むろん、文中に「5.8」と書いても問題なし。しかし、実はXの入力ミスが見つかり、実はc(2, 3, 5, 7, 11)になったらどうなるだろうか。この「5.8」と書いた箇所を見つけて5.6と修正したいといけない。これは非常に面倒な作業であり、ミスも起こりやすい。文中にRコードを入れるためには`rコード`のように入力する。\n```{r}\nX <- c(2, 3, 5, 7, 11)\n```\n\n変数`X`の平均値は`r mean(X)`です。\nOutput:\n\nX <- c(2, 3, 5, 7, 11)\n\n変数Xの平均値は5.6です。\n　ここで`X`だが、単に`で囲まれただけではコードと認識されない。これは主に文中に短いコードを入れる際に使う機能である。\n　チャンクには様々なオプションを付けることができる。出力される図の大きさ、位置、解像度、コードの非常時、結果の非表示、チャンク間の依存関係などが指定できるが、これらについては教科書の第21章（R Markdown [基礎]）を参照すること。"
  },
  {
    "objectID": "materials/rmarkdown.html#教科書",
    "href": "materials/rmarkdown.html#教科書",
    "title": "第5回講義資料",
    "section": "教科書",
    "text": "教科書\n\n『私たちのR: ベストプラクティスの探求』の第21章: R Markdown [基礎]"
  },
  {
    "objectID": "materials/basic.html",
    "href": "materials/basic.html",
    "title": "第3回講義資料",
    "section": "",
    "text": "手順1: File > New File > R Scriptをクリックする。\n\n\n\n\n\n\n\n\n\n手順2: Sourceペインのペイン最大化ポタンをクリックし、Sourceペインの大きさ最大化する。\n\n\n\n\n\n\n\n\n\n手順3: Sourceペインに以下の内容を入力する。\n\n1 + 1\n\n手順4: コードの行にカーソルをおいたままCmd + Return（Windowsの場合、Control (Ctrl) + Enter）を入力する。これはカーソルが位置する行のコードを実行するコマンドである。\n\n\n\n\n\n\nカーソルって…?\n\n\n\nカーソル (cursor)とは文字の入力位置を意味する。RStudioのテーマによって色は異なるが、Sourceペイン、またはConsoleペインなど、何らかの文字が入力できる箇所において点滅する「|」がカーソルです。\n\n\n手順5: Consoleペインに結果が表示される。\n\n\n[1] 2\n\n\n　これくらいの計算はConsoleペインで直接打ち込んでも良いが、自分がこれまで書いたコードを残すという意味でSourceペインに入力することを推奨する。R Scriptを保存しておけばいつでも開いて前回のコードを再現できる。"
  },
  {
    "objectID": "materials/basic.html#コメント",
    "href": "materials/basic.html#コメント",
    "title": "第3回講義資料",
    "section": "コメント",
    "text": "コメント\n　Rのスクリプトを作成する際、何かのメモを書いておきたいケースが多々ある。コードが長くなったり、複雑になったりすると、自分が書いたコードでも意味がよく分からないケースも多く発生する。これはデータ分析のプロでも例外でなく、宋も同じである。この場合、スクリプト内にこまめにメモを書いておくと、このコードが何のためのコードかなどが素早く把握できる。\n　Rにおけるコメントは#を使用する。同じ行における#以降の内容は処理に影響を与えない。たとえば、以下のコードだと# 12345と12345の積は処理に影響を与えない\n\n# 12345と12345の積\n12345 * 12345\n\n[1] 152399025\n\n\n　また、コードと同じ行にコメントを書くこともできる。\n\n12345 * 12345 # 12345と12345の積\n\n[1] 152399025\n\n\n　コードにこまめにコメントを書くのは意外と面倒な作業であるが、コメントに「書きすぎ」は存在しない。書けば書くほど未来の自分から感謝されるだろう。"
  },
  {
    "objectID": "materials/basic.html#算術演算子",
    "href": "materials/basic.html#算術演算子",
    "title": "第3回講義資料",
    "section": "算術演算子",
    "text": "算術演算子\n　算術演算子は数字と数字の間に入力し、結果として何らかの数字が返される演算子である。先ほどの+や*も算術演算子（足し算と掛け算）である。ここでは良く使う算術演算子7つを紹介する。\n\n\n\n演算子\n意味\n例\n結果\n\n\n\n\n+\n和\n2 + 5\n7\n\n\n-\n差\n2 - 8\n-6\n\n\n*\n積\n7 * 3\n21\n\n\n/\n商\n16 / 5\n3.2\n\n\n^、**\n累乗（べき乗）\n2^3または2 ** 3\n8\n\n\n%%\n剰余 (モジュロ)\n18 %% 7\n4\n\n\n%/%\n整数商\n18 %/% 7\n2\n\n\n\n　例を見てみよう。\n\n1 + 5  # 足し算\n\n[1] 6\n\n3 - 10 # 引き算\n\n[1] -7\n\n19 * 2 # 掛け算\n\n[1] 38\n\n13 / 7 # 割り算\n\n[1] 1.857143\n\n5^3    # 5の3乗\n\n[1] 125\n\n\n　これは義務ではないがないが、累乗（^）を除き、演算子の前後にはスペースを入れるのがRの流儀であり、コードが読みやすくなる。以下のコードを比べてみよう。\n\n# 読みにくい例\n(((3+5)*4)+((5%%2)+3))^2\n\n[1] 1296\n\n# 読みやすい例\n(((3 + 5) * 4) + ((5 %% 2) + 3))^2\n\n[1] 1296\n\n\n　結果は同じだが、後者の方が読みやすいだろう。これから紹介する論理演算子でも共通する内容であるが、「累乗（^）を除き、演算子の前後にはスペースを入れる」ことを覚えておこう。ちなみにカッコ（(と)）は演算子ではないため、スペースは不要である。"
  },
  {
    "objectID": "materials/basic.html#論理演算子",
    "href": "materials/basic.html#論理演算子",
    "title": "第3回講義資料",
    "section": "論理演算子",
    "text": "論理演算子\n　算術演算子は結果として数値が返ってくるが、論理演算子は真（TRUE）か偽（FALSE）のいずれかの値を返す演算子である。ここではまず、大小関係を判定する論理演算子を紹介する。\n\n\n\n\n\n\n\n\n\n演算子\n意味\n例\n結果\n\n\n\n\nx < y\nxはyより小さい\n3 < 1\nFALSE\n\n\nx <= y\nxはyと等しいか、小さい\n2 <= 2\nTRUE\n\n\nx > y\nxはyより大きい\n6 > 5\nTRUE\n\n\nx >= y\nxはyと等しいか、大きい\n4 >= 5\nFALSE\n\n\nx == y\nxとyは等しい\n(2 + 3) == (4 + 1)\nTRUE\n\n\nx != y\nxとyは等しくない\n((2 * 3) + 1) != (2 * (3 + 1))\nTRUE\n\n\n\n　一つ注意すべき点は「等しい」を意味する論理演算子は=でなく、==だということだ1。\n\n3 > 2 # 3は2より大きいの?\n\n[1] TRUE\n\n5 <= 10 # 5は10と同じか小さいの?\n\n[1] TRUE\n\n2 + 3 == 1 # 2と3の和は1なの?\n\n[1] FALSE\n\n2 + 2 != 2 * 2 # 2と2の和は2と2の積と同じなの?\n\n[1] FALSE\n\n\n　算術演算子は一行に何回も使えるが、通常、論理演算子は一行に一つしか使えない。複数の論理演算子を使うためには、&（AND演算子）と|（OR演算子）を使う必要がある。\n　AND演算子&は、&を挟む左右の両側がTRUEの場合のみTRUEを返す演算子である。\n\n(2 + 3 == 5) & (2 * 3 == 5) # TRUE and FALSEだから... FALSE!\n\n[1] FALSE\n\n(2 + 3 == 5) & (2 * 3 == 6) # TRUE and TRUEだから... TRUE!\n\n[1] TRUE\n\n\n　OR演算子|は、|を挟む左右の片側、あるいは両側がTRUEの場合のみTRUEを返す論理演算子である。\n\n(2 + 3 == 5) & (2 * 3 == 5) # TRUE or FALSEだから... TRUE!\n\n[1] FALSE\n\n(2 + 3 == 5) & (2 * 3 == 6) # TRUE or TRUEだから... TRUE!\n\n[1] TRUE\n\n(2 + 3 == 6) & (2 * 3 == 5) # FALSE or FALSEだから... FALSE!\n\n[1] FALSE\n\n\n　論理演算子には他にもいくつかあるが、説明は割愛する。\n\n!: 否定演算子（TRUEならFALSE、FALSEならTRUEが返ってくる。意外と良く使う）\n&&: &と同じ\n||: |と同じ\nxor(): 排他的論理和（xor(FALSE, TRUE)とxor(TRUE, FALSE)の場合のみTRUEが返ってくる。論理回路に興味あれば重要な演算子だが、実際に使うケースはあまりない。）\n\n　論理演算子が活躍するのはデータ加工（データハンドリング）の時である。何かの条件を指定して、その行件に合致するケースのみを抽出する場合は、これらの論理演算子の使用が必須である。\n\n\n\n\n\n\nマッチング演算子: %in%\n\n\n\nもう一つ便利な論理演算子としてマッチング演算子%in%がある。これについてはデータハンドリングの講義で解説する。"
  },
  {
    "objectID": "materials/basic.html#代入とベクトル",
    "href": "materials/basic.html#代入とベクトル",
    "title": "第3回講義資料",
    "section": "代入とベクトル",
    "text": "代入とベクトル\n　まず、以下のような例を考えてみよう。\n\n123454321 \\(\\times\\) 2を計算してみよう\n123454321 \\(\\times\\) 3を計算してみよう\n123454321 \\(\\times\\) 4を計算してみよう\n…\n123454321 \\(\\times\\) 200を計算してみよう\n\n123454321 * 2\n123454321 * 3\n123454321 * 4\n\n(省略)\n\n123454321 * 198\n123454321 * 199\n123454321 * 200\n　このように199行のコードを書く必要がある。もう少し効率的な方法はないだろうか。まず、この123454321を書く手間をなんとかしてみよう。\n\n方法1: 123454321をコピーし貼り付けながら計算を繰り返す\n方法2: 123454321にxという名前を付けて、x * 1のように表記する（ここが重要）\n\n　いずれも有効な方法であるが、方法1には致命的なデメリットがある。それは修正が面倒だという点である。もし「あ、ごめん！123454321じゃなくて、23235211だったわ！コード直してもらえる？」と言われたら、199行のコードをすべて修正する必要がある。一方、方法2を使えば、「123454321にxという名前を付ける」コードのみを修正すれば良い。このように何かの数字、文字列などに名前を付けて後から使えるようにする作業を代入（assignment）と呼ぶ。\n\nベクトル\n　代入の話をする前にRにおけるデータ構造の一種であるベクトル（vector）の話をしなければならない。ベクトルはRにけるデータの最小単位である。Rには様々なデータ構造があるが、これらはすべてベクトルの集合と言っても過言ではない。このベクトルには以下のような特徴がある。\nベクトルの特徴\n\nベクトルの長さは1以上である。\n\n1や\"Cat\"は長さ1のベクトル\n長さ1のベクトルは原子ベクトル（atomic vector）とも呼ばれる。\n\n一つのベクトル同じデータ型（数値、文字列など）で構成される。\n\n数値と文字列が混在するベクトルは作成できない。\n\n\n\n\n\n\n\n\nデータ型? データ構造?\n\n\n\nデータ型とデータ構造については今後の講義で解説する。\n\n\n　まずはこの2つだけ覚えておけば問題ない。重要なのはベクトルの作り方であるが、長さ1のベクトルであれば、1、\"Cat\"などで十分である。もし、ながさ2以上のベクトルを作る場合はc()関数を使う。()内にコンマ区切りの要素 (element)を入れるだけである。\n\n19861008 # 長さ1の数値型ベクトル\n\n[1] 19861008\n\nc(1986, 10, 8) # 長さ3の数値型ベクトル\n\n[1] 1986   10    8\n\n\n\n\n\n\n\n\n,の後にはスペースを入れよう！\n\n\n\nコードの可読性の観点から見ると、c(1986,10,8)よりc(1986, 10, 8)の方が読みやすい。\n\n\n\n\nベクトル同士の計算\n　それでは、（原子ベクトルを含む）ベクトルに名前を付ける方法について紹介する。それは代入演算子<-である。x <- 123454321はxという器に123454321という数字を入れることを意味する。ここでいう「器」のことをオブジェクト（object）と呼ぶ。オブジェクトに関する説明は今後の講義で解説する。オブジェクトの内容を確認するためにはオブジェクトの名前のみを入力する。\n\nx <- 123454321 # xに123454321を代入\nx\n\n[1] 123454321\n\n\n　先ほどの作業は以下のように簡略化することができる。\nx <- 123454321 # xに123454321を代入\nx * 2\nx * 3\nx * 4\n\n(省略)\n\nx * 198\nx * 199\nx * 200\n　これを使えば、もし修正要請があったとしてもx <- 123454321の部分だけ修正すれば良いだろう。ただ、それでも200行のコード（代入で1行、計算で199行）を書くことには代わりがない。これをなんとか出来ないだろうか。以上のコードは1〜3行にまとめることができる。そのためにベクトル同士の計算について考える必要がある。同じ長さのベクトル同士の計算の場合、同じ位置の要素同士の計算が行われる。以下の例を考えてみよう。\n\nmy_vec1 <- c(1, 2, 3, 4, 5, 6)\nmy_vec2 <- c(0, 1, 2, 0, 1, 2)\nmy_vec1 * my_vec2\n\n[1]  0  2  6  0  5 12\n\n\n　上記のコードは以下のように表すことができる。\n\n\n\nベクトル/位置\n1番目\n2番目\n3番目\n4番目\n5番目\n6番目\n\n\n\n\nmy_vec1\n1\n2\n3\n4\n5\n6\n\n\n\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\\(\\times\\)\n\n\nmy_vec2\n0\n1\n2\n0\n1\n2\n\n\n結果\n0\n2\n6\n0\n5\n12\n\n\n\n　もし、ベクトルの長さが一致しない場合はどうなるだろうか。この場合、短い方のベクトルが繰り返されることとなり、これをベクトル・リサイクル（vector recycle）と呼ぶ。以下の例ではmy_vec4の方が短いため、3 * 2までの計算が終わったあと、もう一回my_vec4の1番目の要素、0が使われることになる。\n\nmy_vec3 <- c(1, 2, 3, 4, 5, 6)\nmy_vec4 <- c(0, 1, 2)\nmy_vec3 * my_vec4\n\n[1]  0  2  6  0  5 12\n\n\n　このベクトル・リサイクルを利用すれば簡単に199行のコードを簡略化できよう。ただし、2から200まで格納されている長さ199のベクトルを作るのが面倒かも知れない。2, 3, 4, …, 199, 200は公差1の等差数列であり、Rではseq()関数を使うことで等差数列を簡単に作ることができる。たとえば、2から10までの公差1の等差数列であれば、以下のように作れる。\n\nseq(2, 10, by = 1) # 2から10までの公差1の等差数列\n\n[1]  2  3  4  5  6  7  8  9 10\n\n\n　公差1でなく公差2であれば、by = 1をby = 2に修正する。\n\nseq(2, 10, by = 2) # 2から10までの公差2の等差数列\n\n[1]  2  4  6  8 10\n\n\n　また、公差1の等差数列であれば、:演算子を使うこともできる。\n\n2:10 # 2から10までの公差1の等差数列\n\n[1]  2  3  4  5  6  7  8  9 10\n\n\n　これで199行のコードを簡略化する準備は整った。まずは3行に簡略化した例を見てみよう。\n\n# 3行の例\nx <- 123454321\ny <- 2:200 # または、y <- seq(2, 200, by = 1)\nx * y\n\n  [1]   246908642   370362963   493817284   617271605   740725926   864180247\n  [7]   987634568  1111088889  1234543210  1357997531  1481451852  1604906173\n [13]  1728360494  1851814815  1975269136  2098723457  2222177778  2345632099\n [19]  2469086420  2592540741  2715995062  2839449383  2962903704  3086358025\n [25]  3209812346  3333266667  3456720988  3580175309  3703629630  3827083951\n [31]  3950538272  4073992593  4197446914  4320901235  4444355556  4567809877\n [37]  4691264198  4814718519  4938172840  5061627161  5185081482  5308535803\n [43]  5431990124  5555444445  5678898766  5802353087  5925807408  6049261729\n [49]  6172716050  6296170371  6419624692  6543079013  6666533334  6789987655\n [55]  6913441976  7036896297  7160350618  7283804939  7407259260  7530713581\n [61]  7654167902  7777622223  7901076544  8024530865  8147985186  8271439507\n [67]  8394893828  8518348149  8641802470  8765256791  8888711112  9012165433\n [73]  9135619754  9259074075  9382528396  9505982717  9629437038  9752891359\n [79]  9876345680  9999800001 10123254322 10246708643 10370162964 10493617285\n [85] 10617071606 10740525927 10863980248 10987434569 11110888890 11234343211\n [91] 11357797532 11481251853 11604706174 11728160495 11851614816 11975069137\n [97] 12098523458 12221977779 12345432100 12468886421 12592340742 12715795063\n[103] 12839249384 12962703705 13086158026 13209612347 13333066668 13456520989\n[109] 13579975310 13703429631 13826883952 13950338273 14073792594 14197246915\n[115] 14320701236 14444155557 14567609878 14691064199 14814518520 14937972841\n[121] 15061427162 15184881483 15308335804 15431790125 15555244446 15678698767\n[127] 15802153088 15925607409 16049061730 16172516051 16295970372 16419424693\n[133] 16542879014 16666333335 16789787656 16913241977 17036696298 17160150619\n[139] 17283604940 17407059261 17530513582 17653967903 17777422224 17900876545\n[145] 18024330866 18147785187 18271239508 18394693829 18518148150 18641602471\n[151] 18765056792 18888511113 19011965434 19135419755 19258874076 19382328397\n[157] 19505782718 19629237039 19752691360 19876145681 19999600002 20123054323\n[163] 20246508644 20369962965 20493417286 20616871607 20740325928 20863780249\n[169] 20987234570 21110688891 21234143212 21357597533 21481051854 21604506175\n[175] 21727960496 21851414817 21974869138 22098323459 22221777780 22345232101\n[181] 22468686422 22592140743 22715595064 22839049385 22962503706 23085958027\n[187] 23209412348 23332866669 23456320990 23579775311 23703229632 23826683953\n[193] 23950138274 24073592595 24197046916 24320501237 24443955558 24567409879\n[199] 24690864200\n\n\n　これを2行にまとめる場合は、xとyいずれかをベクトルとして格納し、もう片方は格納せずそのまま計算に使う（結果は省略）。\n\n# 2行の例 (1)\nx <- 123454321\nx * 2:200\n\n\n# 2行の例 (2)\nx <- 2:200\n123454321 * x\n\n　究極のやり方はxもyも格納せずそのまま使う方法であり、これなら1行にまとめることができる（結果は省略）。\n\n# 1行の例\n123454321 * 2:200\n\n\n\n要素の抽出\n　最後にベクトルから任意の要素を抽出する2つの方法について紹介する。\n方法1: 抽出する要素の位置を指定する。\n　要素の抽出する基本的な方法はベクトル名[抽出する要素の位置]である。たとえば、my_vec5という11から20までの公差1の等差数列のベクトルがあるとする。\n\nmy_vec5 <- 11:20 # my_vec <- seq(11, 20, by = 1) と同じ\nmy_vec5\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\n\n　このmy_vec5から3番目の要素は13であり、この値を抽出するためにはmy_vec5[3]と入力する。\n\nmy_vec5[3]\n\n[1] 13\n\n\n　複数の要素を抽出したい場合は、[]内にベクトルを入れる。たとえば、my_vec5から2、3、4、5番目の要素を抽出する場合は、[]内にc(2, 3, 4, 5)を入力する。\n\nmy_vec5[c(2, 3, 4, 5)]\n\n[1] 12 13 14 15\n\n\n　このc(2, 3, 4, 5)は2から5までの公差1の等差数列であるため、c(2, 3, 4, 5)の代わりにseq(2, 5, by = 1)を使用しても良い。\n\nmy_vec5[seq(2, 5, by = 1)]\n\n[1] 12 13 14 15\n\n\n　むろん、公差1の等差数列を使う:を使用し、[]内に2:5を指定した方がより効率的であろう。\n\nmy_vec5[2:5]\n\n[1] 12 13 14 15\n\n\n方法2: 論理演算子を利用する。\n　もう一つは[]内にTRUEかFALSEを入れる方法である。位置を指定す方法では抽出したい要素の位置のみを指定するだけであったが、この方法はすべての要素に対して、抽出するか（TRUE）しないか（FALSE）を指定する必要がある。たとえば、my_vec5の1、4、7、9、10番目の要素を抽出したい場合はmy_vec5[c(1, 4, 7, 9, 10)]でも良いが、以下のように抽出する箇所にTRUE、抽出しない箇所にFALSEを指定することもできる。\n\nmy_vec5[c(TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE)]\n\n[1] 11 14 17 19 20\n\n\n　[]内にベクトルの長さ分のベクトルを更に入力する必要がある。my_vec5のように長さ10のベクトルなら問題ないだろうが、長さが数千のベクトルも稀ではない。これを考えると、一つ一つの要素に対してTRUE、FALSEを指定することは非効率的である。\n　しかし、我々はすでに論理演算子を使えばTRUE、またはFALSEのベクトルを作れることを知っている。たとえば、my_vec5から奇数のみを抽出したいとする。奇数は2で割って1が余る数字である。余りを計算する算術演算子は%%であり、この余りが1かどうかを判定すれば良い。\n\nmy_vec5 %% 2 == 1\n\n [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\n\n　この論理演算子が含まれた判定文を[]内に入れることで、my_vec5から奇数のみを抽出することができる。\n\nmy_vec5[my_vec5 %% 2 == 1]\n\n[1] 11 13 15 17 19"
  },
  {
    "objectID": "materials/basic.html#表形式データの読み込み",
    "href": "materials/basic.html#表形式データの読み込み",
    "title": "第3回講義資料",
    "section": "表形式データの読み込み",
    "text": "表形式データの読み込み\n　データ分析に用いられるデータの形式は表、文字列、画像、音声など様々であるが、本講義では表形式のデータのみを扱う。ここでは表形式データの読み込み方法について紹介する。表形式データにはエクセル形式（.xlsx）がおなじみであろうが、データ分析の業界においてはカンマ区切る形式（.csv）が標準である。\n　csvファイルの読み込みにはR内蔵関数read.csv()関数が使えるが、本講義では{tidyverse}パッケージが提供するread_csv()関数を使用する。データ読み込みの前にまず{tidyverse}パッケージを読み込む。\n\nlibrary(tidyverse)\n\n　読み込み方法はread_csv(\"読み込むファイルのパス\")である。プロジェクト・フォルダー内にDataフォルダーがあり、そこにPref_Vote.csvというファイルがあれば、read_csv(\"Data/Pref_Vote.csv\")となる。もし、プロジェクト・フォルダー直にデータが入っているのであれば、read_csv(\"Pref_Vote.csv\")となる。ただし、read_csv()だけだとデータの中身が出力されるだけであり、作業環境内に格納されない。代入演算子<-を使って作業環境内にデータを入れておく必要がある。ここではmy_dataという名のオブジェクトを作成する。\n\nmy_data <- read_csv(\"Data/Pref_Vote.csv\")\n\n　ちなみに現在の作業環境内に、どのようなオブジェクトが存在するかを確認するためにはConsoleペイン上でls()を入力する2。\n\nls()\n\n[1] \"my_data\" \"my_vec1\" \"my_vec2\" \"my_vec3\" \"my_vec4\" \"my_vec5\" \"x\"      \n[8] \"y\"      \n\n\n　問題なくmy_dataというオブジェクトが生成されていることが分かる。それではデータの中身を確認してみよう。\n\nmy_data # または、print(my_data)\n\n# A tibble: 47 × 13\n      ID Pref   Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n   <dbl> <chr>   <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n 1     1 北海道  0.419   29.1    24.7  32.8    30.6 13.4    3.43 11.4    1.68\n 2     2 青森県  0.332   30.1    23.9  40.4    24.6 12.8    3.82  8.92   3.41\n 3     3 岩手県  0.341   30.4    24.5  34.9    22.4  8.61   5.16 11.2    5.29\n 4     4 宮城県  0.596   25.8    27.3  36.7    25.4 13.4    3.97  9.99   3.62\n 5     5 秋田県  0.299   33.8    21.4  43.5    22.7 11.2    5.17  7.56   5.12\n 6     6 山形県  0.342   30.8    24.8  42.5    21.5 11.8    4.3   7.6    5.2 \n 7     7 福島県  0.509   28.7    25.2  33.8    28.3 11.0    3.43 10.4    3.24\n 8     8 茨城県  0.633   26.8    26.6  40.6    19.0 15.0    6.67 10.1    2.88\n 9     9 栃木県  0.622   25.9    26.8  38.8    21.6 12.4   10.9   7      2.05\n10    10 群馬県  0.603   27.6    26.6  42.1    19.3 13.8    5.61 10      2.44\n# … with 37 more rows, and 2 more variables: Region2 <dbl>, Region6 <dbl>\n\n\n　この画面からデータの中身以外にもいくつかの情報が読み取れる。たとえば、1行目には以下のような内容が入っている。\n# A tibble: 47 × 13\n　これは47行13列のデータであることを意味する。しかし、数えてみれば、どうみても47行13列には見えない。見えるのは10行11列のみである。ちなみに、自分が使用するPCのモニターが大きいか、文字の大きさが小さい場合は最初から13列が表示される場合もあり、11列より少なく表示される場合もある。表示しきれなかったものについては一番下の行を参照すれば良い。\n# … with 37 more rows, and 2 more variables: Region2 <dbl>, Region6 <dbl>\n　これは出力された内容以外にも36行が更にあり（つまり、36行は省略されているだけである）、Region2とRegion6という名の列も更にあることを意味する。データは問題なく47行13列であることが分かる。\n　もし、20行を出力したい場合はprint(オブジェクト名, n = 20)と入力する。\n\nprint(my_data, n = 20)\n\n# A tibble: 47 × 13\n      ID Pref     Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n   <dbl> <chr>     <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n 1     1 北海道    0.419   29.1    24.7  32.8    30.6 13.4    3.43 11.4    1.68\n 2     2 青森県    0.332   30.1    23.9  40.4    24.6 12.8    3.82  8.92   3.41\n 3     3 岩手県    0.341   30.4    24.5  34.9    22.4  8.61   5.16 11.2    5.29\n 4     4 宮城県    0.596   25.8    27.3  36.7    25.4 13.4    3.97  9.99   3.62\n 5     5 秋田県    0.299   33.8    21.4  43.5    22.7 11.2    5.17  7.56   5.12\n 6     6 山形県    0.342   30.8    24.8  42.5    21.5 11.8    4.3   7.6    5.2 \n 7     7 福島県    0.509   28.7    25.2  33.8    28.3 11.0    3.43 10.4    3.24\n 8     8 茨城県    0.633   26.8    26.6  40.6    19.0 15.0    6.67 10.1    2.88\n 9     9 栃木県    0.622   25.9    26.8  38.8    21.6 12.4   10.9   7      2.05\n10    10 群馬県    0.603   27.6    26.6  42.1    19.3 13.8    5.61 10      2.44\n11    11 埼玉県    0.765   24.8    27.7  32.3    20.4 16      7.23 13.9    1.91\n12    12 千葉県    0.777   25.9    26.7  37.8    21.7 14.0    5.46 11.3    2.01\n13    13 東京都    1.00    22.7    27.4  34.4    19.8 11.4    7.34 14.2    2.82\n14    14 神奈川県  0.917   23.9    27.8  34.9    21.5 12.2    7.77 12.5    2.79\n15    15 新潟県    0.435   29.9    25.2  43.7    25.2  8.27   4.39  8      3.76\n16    16 富山県    0.453   30.5    24.9  44.2    24.2  9.81   5.06  5.79   5.02\n17    17 石川県    0.468   27.9    27.2  48.1    18.5 11      6.36  7.07   2.36\n18    18 福井県    0.378   28.6    26.7  45.3    17.5 10.9   13.1   5.66   2.09\n19    19 山梨県    0.379   28.4    26.4  37.4    28.0 12.8    4.32  9.2    1.67\n20    20 長野県    0.476   30.1    25.5  35.3    27.7 10.7    4.23 12.6    3.59\n# … with 27 more rows, and 2 more variables: Region2 <dbl>, Region6 <dbl>\n\n\n　最初の6行のみを出力する場合はhead()、最後の6行を出力する場合はtail()を使う。\n\n# my_dataの最初の6行を出力\nhead(my_data) # print(my_data, n = 6) と同じ \n\n# A tibble: 6 × 13\n     ID Pref   Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n  <dbl> <chr>   <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1     1 北海道  0.419   29.1    24.7  32.8    30.6 13.4    3.43 11.4    1.68\n2     2 青森県  0.332   30.1    23.9  40.4    24.6 12.8    3.82  8.92   3.41\n3     3 岩手県  0.341   30.4    24.5  34.9    22.4  8.61   5.16 11.2    5.29\n4     4 宮城県  0.596   25.8    27.3  36.7    25.4 13.4    3.97  9.99   3.62\n5     5 秋田県  0.299   33.8    21.4  43.5    22.7 11.2    5.17  7.56   5.12\n6     6 山形県  0.342   30.8    24.8  42.5    21.5 11.8    4.3   7.6    5.2 \n# … with 2 more variables: Region2 <dbl>, Region6 <dbl>\n\n\n\ntail(my_data) # my_dataの最後の6行を出力\n\n# A tibble: 6 × 13\n     ID Pref     Zaisei Over65 Under30 Jimin Minshin Komei Kyosan Ishin Shamin\n  <dbl> <chr>     <dbl>  <dbl>   <dbl> <dbl>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n1    42 長崎県    0.316   29.6    25.8  41.7    20.7  16.9   5.12  6.27   3.48\n2    43 熊本県    0.387   28.8    27.2  46.5    19.3  15.3   4.53  6.32   2.6 \n3    44 大分県    0.358   30.4    25.6  39.4    18.4  13.3   4.42  6.85  13.0 \n4    45 宮崎県    0.320   29.5    26.3  40.1    14.5  17.1   5.74  7.27   6.81\n5    46 鹿児島県  0.321   29.4    26.0  46.0    16.2  14.5   6.47  6.52   3.62\n6    47 沖縄県    0.315   19.6    33.4  27.8    13.3  15.1   7.66 15.6   12.1 \n# … with 2 more variables: Region2 <dbl>, Region6 <dbl>\n\n\n　6行でなく、任意の行数を指定したい場合はhead()、またはtail()内にn = ...を追加する。このような表形式のデータをRではデータフレーム（data.frame）と呼び、ベクトル、リストと共に最も頻繁に使うデータ構造である。これらについては「第8回: データ構造」で解説する。"
  },
  {
    "objectID": "materials/basic.html#教科書",
    "href": "materials/basic.html#教科書",
    "title": "第3回講義資料",
    "section": "教科書",
    "text": "教科書\n\n『私たちのR: ベストプラクティスの探求』第6章: 基本的な操作\n『私たちのR: ベストプラクティスの探求』第8章: データ構造 (第2節)\n『私たちのR: ベストプラクティスの探求』第7章: データの入出力"
  },
  {
    "objectID": "HW/HW01.html",
    "href": "HW/HW01.html",
    "title": "「ミクロ政治データ分析実習」第1回課題",
    "section": "",
    "text": "課題2\n\nブラインドタッチの練習（Googleで「タイピング練習」を検索）"
  },
  {
    "objectID": "intro/file.html",
    "href": "intro/file.html",
    "title": "ファイル管理",
    "section": "",
    "text": "フォルダー/ファイルの管理はJupyterHub内でも、RStudio内でもできるが、ここではRStudio側で管理する方法を紹介する。RStudioを起動し、作業するプロジェクトを開き、Filesペインを確認しよう。RStudioを経由したフォルダー/ファイルの管理は全てFilesペイン上で行われる。"
  },
  {
    "objectID": "intro/file.html#フォルダーの管理",
    "href": "intro/file.html#フォルダーの管理",
    "title": "ファイル管理",
    "section": "1 フォルダーの管理",
    "text": "1 フォルダーの管理\n　講義、または課題ごとのプロジェクトを作ったら、JupyterHubにプロジェクトのフォルダーが生成される。各プロジェクトごとにRスクリプト、Markdownファイル、出力物（図、文書など）が管理できるが、プロジェクト内のファイルが多くなる可能性もある。この場合、プロジェクト・フォルダー内に更に下位フォルダーを作成し、ファイルを管理した方が望ましい。\n\n1.1 フォルダーの作成\n手順1: 現在、Filesペインで表示されているフォルダーがプロジェクトの最上位フォルダーであることを確認する。「Home > プロジェクト名」と表示されていれば問題ない。\n\n\n\n\n\n\n\n\n\n手順2: New Folderをクリックする。\n\n\n\n\n\n\n\n\n\n手順3: 作成するフォルダーの名前を入力する。ここではデータなどを集めておくDataという名のフォルダーを作成する。\n\n\n\n\n\n\n\n\n\n手順4: 正しくフォルダーが作成されているかを確認する。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nフォルダー名の付け方\n\n\n\nフォルダー名にはローマ字、数字のみを使おう。スペースもなるべく使わず、空白を入れたい場合はスペースの代わりにアンダースコア（_）を使おう。\n\n\n\n\n\n\n\n\nフォルダー in フォルダー\n\n\n\nフォルダー内に更にフォルダーを作成することもできる。一つのフォルダー内にファイルが多すぎる場合、更にフォルダー分けして管理した方が効率的だろう。\n\n\n\n\n1.2 フォルダーの削除\n\n\n\n\n\n\nフォルダーの削除は慎重に!\n\n\n\nフォルダーを削除するとフォルダー内のファイルも全て削除される。削除する前には慎重にフォルダー内のファイルを確認しておくこと。\n\n\n手順1: 削除するフォルダーの左にチェックを付け、Deleteをクリックする。\n\n\n\n\n\n\n\n\n\n手順2: Yesをクリックする。"
  },
  {
    "objectID": "intro/file.html#ファイルの管理",
    "href": "intro/file.html#ファイルの管理",
    "title": "ファイル管理",
    "section": "2 ファイルの管理",
    "text": "2 ファイルの管理\n　分析に使用するデータセットを自分のPCにダウンロードしてもそのままNIIオンライン分析システムで使うことはできない。NIIオンライン分析システムで使用するためには、ファイルをアップロードする必要がある。これはデータだけでなく、本講義の課題用ファイルについても同様である。\n\n2.1 ファイルのアップロード\n手順1: ファイルをアップロードしたいフォルダーへ移動する。\n\n下位フォルダーへの移動: フォルダー名をクリックする。\n上位フォルダーへの移動: 「..」をクリックするか、パスが表示されているバーで移動先をクリックする。\n\n手順2: ファイルのアップロード先が正しいかを確認し、Uploadをクリックする。\n\n以下の例はHomework_01プロジェクト・フォルダー内のDataフォルダーがアップロード先である。\n\n\n\n\n\n\n\n\n\n\n手順3: File to upload:でアップロードしたいファイルを選択する。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n複数のファイルをアップロードしたい場合\n\n\n\nRStudio上でファイルは一度の一つしかアップロードできない。複数のファイルを同時にアップロードしたい場合は、この作業を繰り返すか、JupyterHubのホーム画面でアップロードする必要がある。\n\n\n手順4: アップロードするファイルをダブルクリックする。\n\n以下ではPrev_Vote.csvというファイルをアップロードする例である。\n\n\n\n\n\n\n\n\n\n\n手順5: OKをクリックする。\n\n\n\n\n\n\n\n\n\n手順6: 正しくファイルがアップロードされているかを確認する。\n\n\n\n\n\n\n\n\n\n\n\n2.2 ファイルのダウンロード\n　作成した図表をLaTex/Microsoft Wordなどで使うためには、その図表を自分のPCにダウンロードする必要がある。同様に、課題の出力物をLMSに提出するためにも、出力物を一旦自分のPCにダウンロードしてから提出する必要がある。\n手順1: ダウンロードするファイル名の左にチェックを付ける。\n\n以下ではMicro_HW01.htmlというファイルをダウンロードする例である。\n\n\n\n\n\n\n\n\n\n\n手順2: More > Export…をクリックする。\n\n\n\n\n\n\n\n\n\n手順3: Downloadをクリックする。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n課題の出力物は提出する前に必ず確認を!!\n\n\n\nLMSで課題を提出するためには出力物を提出する必要があるが、提出する前にダウンロードしたファイルを必ず確認しよう。間違ったファイルを提出した場合でも提出期限内なら差し替え可能だが、期限が過ぎた場合、理由を問わず差し替えは認めない。また、間違ったファイルが提出されたことを宋が個別に知らせることもないため注意しよう。\n\n\n\n\n2.3 ファイルの削除\nフォルダーの削除と同じ手順で削除できる。"
  },
  {
    "objectID": "intro/homework.html",
    "href": "intro/homework.html",
    "title": "課題の取り組み方",
    "section": "",
    "text": "課題の取り組み方が分からない?\n\n\n\n必ず宋と相談すること。"
  },
  {
    "objectID": "intro/homework.html#step1-課題ファイル一式の入手",
    "href": "intro/homework.html#step1-課題ファイル一式の入手",
    "title": "課題の取り組み方",
    "section": "Step1: 課題ファイル一式の入手",
    "text": "Step1: 課題ファイル一式の入手\n手順1: LMSの授業ページから「第XX回 課題資料」を選択する。\n\n以下の画面は2021年度のページである。\nタイトルは「第XX回 課題資料」でなく「第XX回 課題用ファイル」など変更される可能性もある。\n\n\n\n\n\n\n\n\n\n\n手順2: 通常、課題ファイルは2つであるが、1つのみ、または3つ以上の場合もある。それぞれの資料の「添付資料」クリックする。\n\n\n\n\n\n\n\n\n\n手順3: 新しいウィンドウが表示される。ここでファイル名をクリックするとファイルがダウンロードされる。この作業を全ファイルに対して行うこと。"
  },
  {
    "objectID": "intro/homework.html#step2-課題ファイルのアップロード",
    "href": "intro/homework.html#step2-課題ファイルのアップロード",
    "title": "課題の取り組み方",
    "section": "Step2: 課題ファイルのアップロード",
    "text": "Step2: 課題ファイルのアップロード\n手順1: NIIオンライン分析システムへアクセスし、RStudioを起動する。\n手順2: 課題用のプロジェクトを作成する。プロジェクト名は任意だが、Homework_XXやHW_XXなど、分かりやすい名前を付けよう。\n手順3: ダウンロードしたファイルにデータ（.csvなど）がある場合、プロジェクト・フォルダー内にDataというフォルダーを作成する。\n手順4: ダウンロードしたファイルをアップロードする。課題用ファイル（.Rmdファイル）はプロジェクト・フォルダー直に、課題用データ（.csv、.xlsxなど）は手順3で作成したDataにアップロードする。\n\n\n\n\n\n\nプロジェクト、フォルダー、ファイルの管理\n\n\n\n以下のページを参照すること。\n\nプロジェクト管理\nファイル管理"
  },
  {
    "objectID": "intro/homework.html#step3-頑張る",
    "href": "intro/homework.html#step3-頑張る",
    "title": "課題の取り組み方",
    "section": "Step3: 頑張る",
    "text": "Step3: 頑張る\n一部の課題を除き、本講義の課題は本サポートページの「課題」メニューに掲載されている画面と同じ結果が得られるようにコードを書くことである。\n\n\n\n\n\n\n学籍番号と名前を忘れずに!\n\n\n\n課題用ファイル（.Rmd）の2行目には「情20-0012 関大太郎」と名前が記入されている。課題に取り組む前にまず学籍番号と名前を修正しよう。毎年、関大太郎と関大花子さんから提出された課題が散見されるが、この場合、課題未提出とみなす。むろん、自分の名前が関大太郎/関大花子なら学籍番号のみ修正しても良い。\n\n\n一部の課題を除き、履修者がやることは「学籍番号と氏名の修正」と「チャンク（chunk）内にコードを入力すること」、そして最後に「Knit」することだけである。チャンク内には# ここにコードと既に何かが書いてあるが、この# ここにコードの行は消してからコードを書くこと。あっても減点にはならない（印象は悪くなるかも知れない）。"
  },
  {
    "objectID": "intro/homework.html#step4-出力物のダウンロード",
    "href": "intro/homework.html#step4-出力物のダウンロード",
    "title": "課題の取り組み方",
    "section": "Step4: 出力物のダウンロード",
    "text": "Step4: 出力物のダウンロード\n本講義の課題は一部を除き、成果として.htmlファイルを提出する。Knit後のHTMLファイルは元のRmdファイル名.htmlである。こちらのファイルをダウンロードしよう。.Rmdも一緒にダウンロードして良いが、指定された形式のファイルを提出すること。.htmlファイルを提出しなければならないのに、.Rmdファイルを提出した場合は未提出とみなす。\n\n\n\n\n\n\n右クリックしてダウンロードは厳禁!!!\n\n\n\n出力物のダウンロード方法はファイル管理を参考すること。JupyterHubのホーム画面でファイルを右クリックして保存することは絶対にしないこと。開いてみれば分かるが、なんの情報もない（ほぼ）空っぽのファイルがダウンロードされる。提出期限が過ぎてから「知りませんでした！ごめんなさい！てへっ」と言われても、宋は「そうか、残念！てへっ」としか言わないので、ダウンロードしたファイルは必ず一回自分で開いてみよう。"
  },
  {
    "objectID": "intro/homework.html#step5-提出",
    "href": "intro/homework.html#step5-提出",
    "title": "課題の取り組み方",
    "section": "Step5: 提出",
    "text": "Step5: 提出\n手順1: LMSの授業ページから「第XX回 課題提出窓口」をクリックする。\n\n\n\n\n\n\n\n\n\n手順2: 指定された形式のファイルを添付し、「レポート提出」クリックする。\n\n提出されたら「202X-XX-XX XX:XX:XX にファイル xxxxxxxx が提出済みです。」と表示される。ここまでできたら終了ボタンをクリックする。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n課題がちゃんと提出されているか不安です…\n\n\n\n自分が提出した課題はLMSの「マイレポート」から確認できる。\n\n\n\n\n\n\n\n\n\n以下のように自分が提出した課題のリストが表示される。提出物のダウンロードもできるため、ファイルが問題なくアップロードされているかも確認できる。"
  },
  {
    "objectID": "intro/install.html",
    "href": "intro/install.html",
    "title": "Rの導入",
    "section": "",
    "text": "注意!!!\n\n\n\n初期設定は国立情報学研究所（以下、NII）のサーバーに自分の作業用スペースを借りる作業である。つまり、初期設定を繰り返すことはNIIのサーバー（のスペース）をいくつも借りることとなり、サーバーを圧迫してしまう可能性がある。したがって、初期設定は授業全体を通じて1回のみ実行すること。\n\n\n手順1: 以下のアドレスにアクセスする。\n\nhttps://binder.cs.rcos.nii.ac.jp/v2/gh/JaehyunSong/Binder_R/HEAD\n\n手順2: 所属機関に「関西大学」、または「Kansai University」を入力・選択し、「選択」をクリックする。このような画面が表示されない場合は手順2から5は飛ばしても良い。\n\n\n\n\n\n\n\n\n\n手順3: 自分の関西大学のIDをパスワードを入力する。こちらのIDとパスワードは関西大学インフォメーション・システムおよびLMSのID/パスワードと同じである。\n\n\n\n\n\n\n\n\n\n手順4: このまま「同意します」をクリックする。\n\n\n\n\n\n\n\n\n\n手順5: 以下のような画面が表示されたらしばらく待つ。\n\n\n\n\n\n\n\n\n\n手順6: 以下のような画面が表示されたら初期設定は完了\n\n\n\n\n\n\n\n\n\n手順7: 初期設定が終わったら、すぐRおよびRStudioが利用可能だが、ここでは一旦右上の「Logout」をクリックし、タブ (or ウィンドウ) を閉じる。"
  },
  {
    "objectID": "intro/install.html#niiオンライン分析システムの起動",
    "href": "intro/install.html#niiオンライン分析システムの起動",
    "title": "Rの導入",
    "section": "2 NIIオンライン分析システムの起動",
    "text": "2 NIIオンライン分析システムの起動\n初期設定が終わったら、今後、以下の手順でNIIオンライン分析システムを起動する。\n手順1: 以下のアドレスにアクセスするか、本ページの右上にある右上の  ボタンをクリックする（右クリックし、新しいタブ or ウィンドウで開くことを推奨する）。\n\nhttps://jupyter.cs.rcos.nii.ac.jp/\n\n手順2: 必要に応じて認証を行う（初期設定の手順2, 3, 4と同じ）。\n手順3: サーバーリストが表示される。URL列のアドレスをクリックする。\n\n参考) 初期設定を1回のみ行ったら1行のみ表示されるため混同することはないが、個人利用などを目的に初期設定を複数回行った場合は2行以上が表示されるだろう。本講義に使うサーバーのURLをクリックすること。\n\n\n\n\n\n\n\n\n\n\n手順4: 以下のような画面が表示されたらNIIオンライン分析システムの起動完了である。この画面を今後、「JupyterHub（ジュピターハブ）のホーム画面」と呼ぶ。"
  },
  {
    "objectID": "intro/install.html#rstudioの起動",
    "href": "intro/install.html#rstudioの起動",
    "title": "Rの導入",
    "section": "3 RStudioの起動",
    "text": "3 RStudioの起動\n手順1: JupyterHubのホーム画面の右上の「New」をクリックし、「RStudio」をクリックする。\n\n\n\n\n\n\n\n\n\n手順2: 以下の画面が表示されたら、RStudioの起動完了である（RStudioの見栄は初期状態の場合、白ベースである）。"
  },
  {
    "objectID": "intro/install.html#rstudioの終了",
    "href": "intro/install.html#rstudioの終了",
    "title": "Rの導入",
    "section": "4 RStudioの終了",
    "text": "4 RStudioの終了\n手順1: RStudio画面右上のオレンジ色のボタンをクリックする。\n\n\n\n\n\n\n\n\n\n手順2: 以下のダイアログが表示されたらタブ、またはウィンドウを閉じる。"
  },
  {
    "objectID": "intro/packages.html",
    "href": "intro/packages.html",
    "title": "パッケージ",
    "section": "",
    "text": "Rには数万以上のパッケージが存在し、Rをインストールするだけでも数十のパッケージが自動的にインストールされる。しかし、データ分析/ハンドリング/可視化の手法は日々発展しており、R内蔵パッケージだけでは対応が難しい (できないわけではない)。したがって、必要に応じて新しいパッケージを導入する必要があるが、パッケージのインストールするにはConsoleペインに以下のように入力する。\ninstall.packages(\"インストールするパッケージ名\")\n　前期の「ミクロ政治データ分析実習」では{tidyverse}パッケージのみ使用する予定である。ただし、本講義ようにセッティングされた環境を導入する場合、{tidyverse}は既に導入済みであるため、以下のコードは実行しなくても良い。"
  },
  {
    "objectID": "intro/packages.html#アップデート",
    "href": "intro/packages.html#アップデート",
    "title": "パッケージ",
    "section": "2 アップデート",
    "text": "2 アップデート\n　特定のパッケージをアップデートする方法はインストールと同じだが、一つ一つのパッケージが全て最新バージョンかどうかを確認するのは大変である。また、久々のアップデートで数十個のパッケージをアップデートする必要があるケースもあろう。この場合、RStudioの内蔵機能を使えば一瞬で更新可能なパッケージのリスト化、インストールができる。\n手順1: PackagesペインのUpdateをクリックする。\n\n\n\n\n\n\n\n\n\n手順2: アップデートしたいパッケージの左にチェックを付けるか、左下のSelect Allをクリックし、右下のInstall Updatesをクリックする。\n\n\n\n\n\n\n\n\n\n　インストール、またはアップデートの際、以下のようなメッセージが出力される場合がある。\n  There are binary versions available but the source versions\n  are later:\n      binary source needs_compilation\nterra 1.5-17 1.5-21              TRUE\nyaml   2.2.2  2.3.4              TRUE\n\nDo you want to install from sources the packages which need compilation? (Yes/no/cancel)\n　この場合、Consoleペイン上でYes、no、cancelのいずれかを入力してReturnキー (Enterキー)を押す必要がある。大文字と小文字は区別すること。どうしても最新のパッケージが欲しい場合はYesを入力すれば良いが、インストールに時間がかかる場合がある。一方、noを入力した場合は、若干古いバージョンがインストールされるが、インストールに必要な時間が短いため、基本的にはnoでも問題ないだろう。cancelを入力した場合はアップデートが全てキャンセルされる。"
  },
  {
    "objectID": "intro/packages.html#教科書",
    "href": "intro/packages.html#教科書",
    "title": "パッケージ",
    "section": "3 教科書",
    "text": "3 教科書\n『私たちのR』の第5章「Rパッケージ」: https://www.jaysong.net/RBook/packages.html"
  },
  {
    "objectID": "intro/project.html",
    "href": "intro/project.html",
    "title": "プロジェクト管理",
    "section": "",
    "text": "手順1: File > New Project…をクリックする。\n\n\n\n\n\n\n\n\n\n手順2: New Directoryをクリックする。\n\n\n\n\n\n\n\n\n\n手順3: New Projectをクリックする。\n\n\n\n\n\n\n\n\n\n手順4: Directory name:にプロジェクト名を入力し、Create Projectをクリックする。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n注意: プロジェクト名の付け方\n\n\n\nプロジェクト名にはローマ字、数字のみを使おう。スペースもなるべく使わず、空白を入れたい場合はスペースの代わりにアンダースコア（_）を使おう。"
  },
  {
    "objectID": "intro/project.html#プロジェクトの開き方",
    "href": "intro/project.html#プロジェクトの開き方",
    "title": "プロジェクト管理",
    "section": "2 プロジェクトの開き方",
    "text": "2 プロジェクトの開き方\n　プロジェクトを作成すれば、自動的に出来たてのプロジェクトが開かれる。しかし、NIIオンライン分析システムから一旦ログアウトし、改めてRStudioを起動する場合、プロジェクトをロードする必要がある。\n手順1: File > Open Project…をクリックする。\n\n\n\n\n\n\n\n\n\n手順2: プロジェクト・フォルダー名をダブルクリックする。\n\n\n\n\n\n\n\n\n\n手順3: .Rprojで終わるファイルをダブルクリックする。\n\n\n\n\n\n\n\n\n\nプロジェクトが正しくロードされている場合、RStudioの右上にプロジェクト名が表示される。"
  },
  {
    "objectID": "intro/rstudio.html",
    "href": "intro/rstudio.html",
    "title": "RStudioの設定",
    "section": "",
    "text": "RStudioはそのままでも使えるが、少しカスタマイズするとより使い勝手が良くなる。RStudioのカスタマイズ画面はTools > Global Optionsをクリックすることで表示される。\n以下の設定はNIIオンライン分析システムで使用可能なRStudio最新版 (RStudio Server 2021.09.1+372)の設定であり、宋の設定と同じである。"
  },
  {
    "objectID": "intro/rstudio.html#general",
    "href": "intro/rstudio.html#general",
    "title": "RStudioの設定",
    "section": "1 General",
    "text": "1 General\n\n\n\n\n\n\nRestore .RData into workspace at startupのチェックを消す。\nSave workspace to .RData on exit:をNeverに変更する。\nAlways save history (even when not saving .RData)のチェックを消す。"
  },
  {
    "objectID": "intro/rstudio.html#code",
    "href": "intro/rstudio.html#code",
    "title": "RStudioの設定",
    "section": "2 Code",
    "text": "2 Code\n\n2.1 Editingタブ\n\n\n\n\n\n\nInsert spaces for tabのチェックを付ける。\nTab widthは2、または4を指定する。\nAuto-detect code indentationのチェックを付ける。\nInsert matching parens/quotesのチェックを付ける。\nAuto-indent code after pasteのチェックを付ける。\nVertically align arguments in auto-indentのチェックを付ける。\nAlways save R scripts before sourcingのチェックを付ける。\nCtrl + Return executes:をMulti-line R statementに変更する。\n\n\n\n2.2 Displayタブ\n\n\n\n\n\n\nHighlight selected wordのチェックを付ける。\nHighlight selected lineのチェックを付ける。\nShow line numbersのチェックを付ける。\nShow syntax highlighting in console inputのチェックを付ける。\nHighlight R function callsのチェックを付ける。\nRainbow parenthesesのチェックを付ける。\n\n\n\n2.3 Savingタブ\n\n\n\n\n\n\nDefault text encoding:のChangeをクリックし、UTF-8を選択する。\n\n\n\n2.4 Completionタブ\n\n\n\n\n\n\nShow code completion:をAutomaticallyに変更する。\nAllow automatic completions in consoleのチェックを付ける。\nInsert parentheses after function completionsのチェックを付ける。\nShow help tooltip after function completionsのチェックを付ける。\nInsert spaces around equals for argument completionsのチェックを付ける。\nUse tab for autocompletionのチェックを付ける。"
  },
  {
    "objectID": "intro/rstudio.html#console",
    "href": "intro/rstudio.html#console",
    "title": "RStudioの設定",
    "section": "3 Console",
    "text": "3 Console\n\n\n\n\n\n\nShow syntax highlighting in console inputのチェックを付ける。"
  },
  {
    "objectID": "intro/rstudio.html#appearance",
    "href": "intro/rstudio.html#appearance",
    "title": "RStudioの設定",
    "section": "4 Appearance",
    "text": "4 Appearance\n\n\n\n\n\n\n自分の好みのものを選択する。ただし、小さすぎる文字サイズ (font size) は推奨しない。目に優しくないだけでなく、誤字脱字が見つけにくくなる。"
  },
  {
    "objectID": "intro/rstudio.html#pane-layout",
    "href": "intro/rstudio.html#pane-layout",
    "title": "RStudioの設定",
    "section": "5 Pane Layout",
    "text": "5 Pane Layout\n\n\n\n\n\n\n左上: Source\n右上: Console\n左下: 全てチェックを消す。\n左下: 全てチェックを付ける。"
  },
  {
    "objectID": "intro/rstudio.html#r-markdown",
    "href": "intro/rstudio.html#r-markdown",
    "title": "RStudioの設定",
    "section": "6 R Markdown",
    "text": "6 R Markdown\n\n\n\n\n\n\nShow output preview in:をViewer Paneに変更する。\nShow output inline for all R Markdown documentsのチェックを消す。\n\n設定が終わったら右下のOK、またはApplyをクリックする。"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ミクロ政治データ分析実習",
    "section": "",
    "text": "NIIオンライン分析システムを起動するためには右上の  ボタンをクリックしてください。\n\n右クリックし、新しいタブ（or ウィンドウ）で開いてください。\n初期設定が必要です。初期設定の方法はRの使い方 > Rの導入を参照してください。\n\n右上の  ボタンから本講義の教科書ページへ移動できます。\n\n右上の  から本ページ内の検索が出来ます。\n\n\n\n\n\n\n\nページ情報\n\n\n\n\n最終更新日: 2022年03月27日\n開発環境\n\nmacOS 12.3 “Monterey”\nR version 4.1.2 (2021-11-01)\nRStudio 2022.02.0+442 “Prairie Trillium”\nQuarto 0.9.135\nR package {quarto} 1.1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "本講義について",
    "section": "",
    "text": "講義日: 木曜日 第4時限（14:40～16:10）\n場所: TC304教室（高槻キャンパス C棟 304教室）\n講義内容: Rの使い方\n\nRの基本的な操作 & R Markdown\nデータの入出力\nデータのハンドリング（前処理）\nデータの可視化\n\n統計学、確率、多変量解析、因果推論の授業ではない。\n\nデータ分析の手法は後期の「マクロ政治データ分析実習」で紹介する。\n後期の授業ではRの使い方について解説しない。\n\n到達目標: Rを用いたデータ分析の教科書が読める土台づくり"
  },
  {
    "objectID": "about.html#オフィスアワー",
    "href": "about.html#オフィスアワー",
    "title": "本講義について",
    "section": "オフィス・アワー",
    "text": "オフィス・アワー\n宋、またはTAが研究室に待機し、事前予約なしに相談、質問などが可能な時間\n\n毎週火・木曜日3限 (13:00〜14:30)\n\n火曜日は宋、木曜日はTAが対応\n上記の時間外は事前予約が必要（メール、対面）\nメール: song@kansai-u.ac.jp\n\n場所：TA227研究室（A棟の2階）"
  },
  {
    "objectID": "about.html#講義内容",
    "href": "about.html#講義内容",
    "title": "本講義について",
    "section": "講義内容",
    "text": "講義内容\n\n第1回 イントロダクション\n第2回 RとIDEの導入\n第3回 Rの基本的な操作\n第4回 プログラミングの基本的な概念\n第5回 R Markdownと再現可能な研究\n第6回 データ収集\n第7回 データ型\n第8回 データ構造\n第9回 データハンドリング（1）\n第10回 データハンドリング（2）\n第11回 データハンドリング（3）\n第12回 可視化（1）\n第13回 可視化（2）\n第14回 可視化（3）\n第15回 期末テスト"
  },
  {
    "objectID": "about.html#本講義の位置づけ",
    "href": "about.html#本講義の位置づけ",
    "title": "本講義について",
    "section": "本講義の位置づけ",
    "text": "本講義の位置づけ"
  },
  {
    "objectID": "about.html#前提知識",
    "href": "about.html#前提知識",
    "title": "本講義について",
    "section": "前提知識",
    "text": "前提知識\n\nファイル・システムの理解\n\nフォルダー (ディレクトリ)の概念\nC:/AAA/BBB/CCC.txt (Windows)や~/AAA/BBB/CCC.text (macOS / Linux)の意味が理解できること\n相対パス / 絶対パスの概念が理解できること\n\nブラインド・タッチ (重要)\n\n期末レポートは第15回の授業中に執筆する。\nタイピングが遅いと、時間内に期末レポートの完成ができない。\n第15回の授業までにブラインドタッチの練習を推奨\nこの授業に限らず、現代社会で極めて重要なスキル"
  },
  {
    "objectID": "about.html#教科書",
    "href": "about.html#教科書",
    "title": "本講義について",
    "section": "教科書",
    "text": "教科書\nSong Jaehyun・矢内勇生.『私たちのR: ベストプラクティスの探求』Web-book\n\nhttps://www.jaysong.net/RBook\n本講義内容を200%カバーする\n無料"
  },
  {
    "objectID": "about.html#参考書",
    "href": "about.html#参考書",
    "title": "本講義について",
    "section": "参考書",
    "text": "参考書\n\n松村優哉 他. 2021. 『改訂2版 RユーザのためのRStudio[実践]入門』技術評論社\nGarrett Grolemund and Hadley Wickham. 2017. R for Data Science. O’Reilly.\n\n邦訳『Rではじめるデータサイエンス』(原著は無料: https://r4ds.had.co.nz/)\n\nJared P. Lander. 2018. R for Everyone. Addison-Wesley Professional.\n\n邦訳『みんなのR』"
  },
  {
    "objectID": "about.html#成績評価",
    "href": "about.html#成績評価",
    "title": "本講義について",
    "section": "成績評価",
    "text": "成績評価\n\n平常点 (20%)\n\n学生証を持参すること（カードリーダーで出席を確認）\n欠席4回以上は評価の対象外（3回まで評価対象）\n\n課題 (50%)\n\n計8〜9回の課題を予定\n未提出4回以上は評価の対象外（3回まで評価対象）\n課題提出期限の延長はない (提出までの期間が長めであるため)\n\n提出期限は次回講義の前日23時59分まで\n期限内に提出出来なかった場合でも宋に連絡する必要はない (どうせ延ばしてくれない)。\n\n不正行為厳禁\n\n期末レポート (30%)\n\n第15回の授業内に期末レポートを執筆\n未提出者は評価の対象外\n不正行為厳禁"
  },
  {
    "objectID": "about.html#注意事項",
    "href": "about.html#注意事項",
    "title": "本講義について",
    "section": "注意事項",
    "text": "注意事項"
  },
  {
    "objectID": "about.html#参考-マクロ政治データ分析実習の内容-予定",
    "href": "about.html#参考-マクロ政治データ分析実習の内容-予定",
    "title": "本講義について",
    "section": "参考) マクロ政治データ分析実習の内容 (予定)",
    "text": "参考) マクロ政治データ分析実習の内容 (予定)\n\nリサーチデザイン\n記述統計\n統計的推定と仮説検定\n変数間の関係 ( \\(t\\) 検定、 \\(\\chi^2\\) 検定、相関分析)\n線形回帰分析\n交互作用\nロジスティック回帰分析\n分析結果の可視化"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "実習用データ集",
    "section": "",
    "text": "以下のリストからデータのファイル名をクリックし、PCにダウンロード&保存する。\nNIIオンライン分析システムのプロジェクト・フォルダー内にDataという名の新しいフォルダーを作成する。\nDataフォルダーにダウンロードしたデータをアップロードする。\n\nプロジェクト・フォルダー直に入れても良いが、データ読み込みの際、パスを適宜修正すること。"
  },
  {
    "objectID": "data.html#データ一覧",
    "href": "data.html#データ一覧",
    "title": "実習用データ集",
    "section": "データ一覧",
    "text": "データ一覧\n\n\n\n\n\n\n\n\n\nファイル名\n備考\n\n\n\n\n1\nPref_Vote.csv\n第3回講義で使用"
  },
  {
    "objectID": "data.html#データ説明",
    "href": "data.html#データ説明",
    "title": "実習用データ集",
    "section": "データ説明",
    "text": "データ説明\n\nPref_Vote.csv\n\n\n\n\n\n\n\n\n変数名\n説明\n詳細\n\n\n\n\nID\n都道府県のID\n\n\n\nPref\n都道府県名\n\n\n\nZaisei\n財政力指数\n\n\n\nOver65\n65歳以上人口の割合\n(%)\n\n\nUnder30\n30歳未満人口の割合\n(%)\n\n\nJimin\n自民党の得票率\n比例区; (%)\n\n\nMinshin\n民進党の得票率\n比例区; (%)\n\n\nKomei\n公明党の得票率\n比例区; (%)\n\n\nKyosan\n共産党の得票率\n比例区; (%)\n\n\nIshin\n維新の得票率\n比例区; (%)\n\n\nShamin\n社民党の得票率\n比例区; (%)\n\n\nRegion2\n地域区分\n1 = 東日本; 2 = 西日本\n\n\nRegion6\n地域区分\n1 = 北海道・東北; 2 = 関東; 3 = 中部・北陸; 4 = 近畿; 5 = 中国・四国; 6 = 九州・沖縄"
  }
]