---
title: "ミクロ政治データ分析実習"
subtitle: "第3回 Rの基本的な操作"
author: "<ruby>宋<rp>(</rp><rt>そん</rt><rp>)</rp></ruby>&nbsp;&nbsp;<ruby>財泫<rp>(</rp><rt>じぇひょん</rt><rp>)</rp></ruby>"
institute: "関西大学総合情報学部"
date: "2022年 4月 21日"
format:
  revealjs: 
    width: 1280
    height: 720
    slide-number: true
    logo: Figs/logo.png
    theme: [default, styles.scss]
    footer: <https://www.jaysong.net/micro-book>
    preview-links: true
    chalkboard: true
    touch: true
    controls: true
resources:
  - slide03.pdf
---

## 電卓としてのRと演算子

```{r}
rm(list = ls())
knitr::opts_chunk$set(fig.align = "center",
                      dpi       = 300,
                      dev       = "ragg_png",
                      echo      = TRUE)
```

* **Step 1**: File > New File > R Script
* **Step 2**: Sourceペインの大きさを最大化する。
* **Step 3**: Sourceペインに以下のように入力する

```{r}
#| eval: false
1 + 2 + 3
```

* **Step 4**: Step 3で入力した行に移動し、Cmd + Return (Ctrl + Enter)
  * Consoleペインに以下のように出力されればOK

```{r}
#| echo: false
1 + 2 + 3
```

---

## Rの算術演算子

* 結果として何らかの**数字**が返される
* 累乗（`^`）を除き、演算子の前後にはスペースを入れるのがRの流儀
  * 必須ではないが、コードが読みやすくなる

|演算子|意味|例|結果|
|:---:|---|---|---:|
|`+`|和|`2 + 5`|7|
|`-`|差|`2 - 8`|-6|
|`*`|積|`7 * 3`|21|
|`/`|商|`16 / 5`|3.2|
|`^`、`**`|累乗（べき乗）|`2^3`または`2 ** 3`|8|
|`%%`|剰余 (モジュロ)|`18 %% 7`|4|
|`%/%`|整数商|`18 %/% 7`|2|

---

## Rの論理演算子

* 真（`TRUE`）か偽（`FALSE`）の値を返す演算子

```{r}
3 > 2 # 3は2より大きいか
5 <= 10 # 5は10以下か
2 + 3 == 1 # 2 + 3は1に等しいか
2 + 2 != 2 * 2 # 2 + 3は2 * 2と等しくないか
(2 + 2) != (2 * 2) # こっちの方がもう少し読みやすい
```

---

## Rの論理演算子（まとめ）

* 「等しい」は`=`でなく、`==`であることに注意すること
   * `=`は代入演算子として機能する（他の言語と同じ）。

|演算子|意味|例|結果|
|---|---|---|---|
|`x < y`|`x`は`y`より小さい|`3 < 1`|`FALSE`|
|`x <= y`|`x`は`y`と等しいか、小さい|`2 <= 2`|`TRUE`|
|`x > y`|`x`は`y`より大きい|`6 > 5`|`TRUE`|
|`x >= y`|`x`は`y`と等しいか、大きい|`4 >= 5`|`FALSE`|
|`x == y`|`x`と`y`は等しい|`(2 + 3) == (4 + 1)`|`TRUE`|
|`x != y`|`x`と`y`は等しくない|`((2 * 3) + 1) != (2 * (3 + 1))`|`TRUE`|

---

## 論理演算子: ANDとOR

#### AND演算子: `&`

* `&`を挟む左右の**両側**が`TRUE`の場合のみ`TRUE`を返す

```{r}
(2 + 3 == 5) & (1 * 2 == 3) # TRUE and FALSEだから
(2 + 2 == 4) & (2 * 2 == 4) # TRUE and TRUEだから
```

<br/>

#### OR演算子: `|`

* `|`を挟む左右の**片側、あるいは両側**が`TRUE`の場合のみ`TRUE`を返す

```{r}
(2 + 3 == 5) | (1 * 2 == 3) # TRUE or FALSEだから
(2 + 2 != 4) | (2 * 2 != 4) # FALSE or FALSEだから
```

---

## 練習問題

1. $\frac{1234 \times 4321}{3}$
2. $\frac{1234 \times 4321}{3}$の余りは？
   * $(1234 \times 4321) \text{ mod } 3$とも表記する
3. $2 \times 3$ と $2 + 3$ は等しいか
4. $1009 \text{ mod } 3$ は0か
5. $5^5$ は100**以上**、かつ1000**未満**であるか

---

## 練習問題（答え）

```{r}
(1234 * 4321) / 3
(1234 * 4321) %% 3
2 * 3 == 2 + 3
1009 %% 3 == 0
(5^5 >= 100) & (5^5 < 1000)
```

---

## ベクトル

:::: {.columns}

::: {.column width="60%"}
* 123454321 $\times$ 2を計算してみよう
* 123454321 $\times$ 3を計算してみよう
* 123454321 $\times$ 4を計算してみよう
* ...
* 123454321 $\times$ 199を計算してみよう
* 123454321 $\times$ 200を計算してみよう
:::

::: {.column width="40%"}
```{r}
#| eval: false
123454321 * 2
123454321 * 3
123454321 * 4

...

123454321 * 199
123454321 * 200
```
:::

::::

<br/>

#### 効率的な方法は?

* `123454321`をコピーし貼り付けながら計算を繰り返す
* `123454321`に`x`という名前を付けて、`x * 1`のように表記する

---

## Rにおけるベクトル

ベクトル（vector）: Rにおけるデータの最小単位

* 同じデータ型（数値、文字列など）
  * 数値と文字列が混在するベクトルは作成不可
* 長さは1以上
  * `1`や`"Cat"`は長さ1のベクトル
* `c()`関数で作成
  * `()`の中にベクトルの要素を入力する

---

## ベクトルの作成

* `<-`演算子で格納
  * `ベクトル名`という名前の**オブジェクト（object）**が生成される
* 格納しない場合、作業環境に保存されず、出力のみ

```r
ベクトル名 <- c(要素1, 要素2, ...)
```

<br/>

**例1:** 要素が1, 2, 3, 4, 5の長さ5の数値型ベクトル

* ベクトルを`my_vector1`という名前で作業環境に格納

```{r}
my_vector1 <- c(1, 2, 3, 4, 5)
```

<br/>

**例2:** 要素が"Cat", "Lion", "Tiger"の長さ3の文字型ベクトルを`my_vector2`という名で格納

* 文字は必ず`"`か`'`で囲む

```{r}
my_vector2 <- c("Cat", "Lion", "Tiger")
```

---

## オブジェクトの名前

基本的にオブジェクト名は何でも良いが、いくつかの禁則事項がある

* 特殊記号、スペース禁止（例外: `_`と`.`）
   * スペースの代わりに`_`か`.`が使われるが、`_`を推奨
* 数字、または`_`、`.`で始まるオブジェクト名
* 予約語は使えない（`for`や`if`など）
   * 使える予約語もあるが、非推奨
* 日本語、ハングル、簡体字、アラビア文字も可能であるが、非推奨

<br/>

#### 良いオブジェクト名は

* オブジェクト名を見るだけで、中身の内容が想像できる
* 短いオブジェクト名

---

## オブジェクトの表示

#### 現在の作業環境におけるオブジェクトリスト

1. Environmentペインで確認
2. Consoleペインで`ls()`を入力

```{r}
ls()
```

<br/>

#### オブジェクトの出力

オブジェクト名のみ入力（`print(オブジェクト名)`もOK）

```{r}
my_vector1 # print(my_vector1) でもOK
my_vector2 # print(my_vector2) でもOK
```

* Rを再起動すると作業環境が初期化されるため、もう一回作成する必要がある。
  * コードを記録し、残すことが重要

---

## 比較

コードは一行増えたものの、全体的にはコードの量が著しく減る。

* ただし、200行書かないといけない点は変わらない。
   * より効率的な方法は?

:::: {.columns}

::: {.column width="45%"}
```{r}
#| collapse: true
123454321 * 2
123454321 * 3
123454321 * 4
123454321 * 5
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
```{r}
#| collapse: true
x <- 123454321
x * 2
x * 3
x * 4
x * 5
```
:::

::::

---

## 等差数列ベクトルの作り方

:::: {.columns}

::: {.column width="45%"}
公差 **=** 1の等差数列

* `:`演算子を利用

```{r}
c(1, 2, 3, 4, 5, 6, 7)
1:7
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
公差 **>** 1の等差数列

* `seq()`関数の使用 (`by`で公差を指定)

```{r}
c(1, 3, 5, 7, 9)
seq(1, 9, by = 2)
```
:::

::::

---

## ベクトル同士の演算

**例)** ベクトル`X`とベクトル`Y`同士の演算

* **ケース1:** `X`の長さ = `Y`の長さ
* **ケース2:** `X`の長さ $\neq$ `Y`の長さ

---

## ケース1: ベクトルの長さが同じ場合

* 同じ位置の要素同士の演算

|ベクトル/位置|1番目|2番目|3番目|4番目|5番目|6番目|
|---|:---:|:---:|:---:|:---:|:---:|:---:|
|`my_vec1`|1|2|3|4|5|6|
||$\times$|$\times$|$\times$|$\times$|$\times$|$\times$|
|`my_vec2`|0|1|2|0|1|2|
|結果|0|2|6|0|5|12|

<br/>

```{r}
my_vec1 <- c(1, 2, 3, 4, 5, 6)
my_vec2 <- c(0, 1, 2, 0, 1, 2)
my_vec1 * my_vec2
```

---

## ケース2: ベクトルの長さが異なる場合

* 短い方のベクトルがリサイクルされる（**ベクトル・リサイクル**）。
  * `my_vec4`の方が短いため、足りない分（太字の部分）はリサイクルされる。

|ベクトル/位置|1番目|2番目|3番目|4番目|5番目|6番目|
|---|:---:|:---:|:---:|:---:|:---:|:---:|
|`my_vec3`|1|2|3|4|5|6|
||$\times$|$\times$|$\times$|$\times$|$\times$|$\times$|
|`my_vec4`|0|1|**0**|**1**|**0**|**1**|
|結果|0|2|0|4|0|6|

<br/>

```{r}
my_vec3 <- c(1, 2, 3, 4, 5, 6)
my_vec4 <- c(0, 1)
my_vec3 * my_vec4
```

---

## 最初の問題

結果はどのコードでも同じ

::: {.panel-tabset}

### コード

:::: {.columns}

::: {.column width="30%"}

答え（3行 ver.）

```{r}
#| eval: false
x <- 123454321
y <- 2:200
x * y
```
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}

答え（2行 ver.）

```{r}
#| eval: false
x <- 123454321
x * 2:200
```

または、

```{r}
#| eval: false
x <- 2:200
123454321 * x
```
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}

答え（1行 ver.）

```{r}
#| eval: false
123454321 * 2:200
```
:::

::::

### 結果

```{r}
123454321 * 2:200
```

:::

---

## ベクトル要素の抽出

---

## 要素の抽出: 位置指定

---

## 要素の抽出: 論理演算子の利用

---

## 表形式データの読み込み

---

## 読み込んだデータの出力